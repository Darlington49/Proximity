
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e0  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  000204c8  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  000204c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006658  08006658  00016658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c8  20000000  08006660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  200004c8  08006b28  000204c8  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000610  08006b28  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001b922  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00021525  00000000  00000000  0003be1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003607  00000000  00000000  0005d33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00060948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f4463  00000000  00000000  000619a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001438  00000000  00000000  00155e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000189d8  00000000  00000000  00157240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000289b8  00000000  00000000  0016fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001985d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a5c  00000000  00000000  00198620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004c8 	.word	0x200004c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d4c 	.word	0x08005d4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004cc 	.word	0x200004cc
 80001cc:	08005d4c 	.word	0x08005d4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f002 fe7c 	bl	8003274 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800057c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800057e:	e003      	b.n	8000588 <LoopCopyDataInit>

08000580 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000582:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000584:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000586:	3104      	adds	r1, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000588:	480a      	ldr	r0, [pc, #40]	; (80005b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800058c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800058e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000590:	d3f6      	bcc.n	8000580 <CopyDataInit>
	ldr	r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000594:	e002      	b.n	800059c <LoopFillZerobss>

08000596 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000596:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000598:	f842 3b04 	str.w	r3, [r2], #4

0800059c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <LoopForever+0x16>)
	cmp	r2, r3
 800059e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005a0:	d3f9      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f004 fa5f 	bl	8004a64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f000 f8fb 	bl	80007a0 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005b0:	08006660 	.word	0x08006660
	ldr	r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b8:	200004c8 	.word	0x200004c8
	ldr	r2, =_sbss
 80005bc:	200004c8 	.word	0x200004c8
	ldr	r3, = _ebss
 80005c0:	20000610 	.word	0x20000610

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 80005c6:	b510      	push	{r4, lr}
 80005c8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80005ca:	f000 f945 	bl	8000858 <__io_getchar>
 80005ce:	7020      	strb	r0, [r4, #0]

	return 1;
}
 80005d0:	2001      	movs	r0, #1
 80005d2:	bd10      	pop	{r4, pc}

080005d4 <_write>:

int _write(int file, char *ptr, int len)
{
 80005d4:	b570      	push	{r4, r5, r6, lr}
 80005d6:	460d      	mov	r5, r1
 80005d8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005da:	460e      	mov	r6, r1
 80005dc:	1b73      	subs	r3, r6, r5
 80005de:	429c      	cmp	r4, r3
 80005e0:	dc01      	bgt.n	80005e6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80005e2:	4620      	mov	r0, r4
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80005e6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80005ea:	f000 f923 	bl	8000834 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ee:	e7f5      	b.n	80005dc <_write+0x8>

080005f0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <_sbrk+0x2c>)
 80005f2:	6811      	ldr	r1, [r2, #0]
{
 80005f4:	b508      	push	{r3, lr}
 80005f6:	4603      	mov	r3, r0
	if (heap_end == 0)
 80005f8:	b909      	cbnz	r1, 80005fe <_sbrk+0xe>
		heap_end = &end;
 80005fa:	4909      	ldr	r1, [pc, #36]	; (8000620 <_sbrk+0x30>)
 80005fc:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 80005fe:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000600:	4669      	mov	r1, sp
 8000602:	4403      	add	r3, r0
 8000604:	428b      	cmp	r3, r1
 8000606:	d906      	bls.n	8000616 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000608:	f004 fa14 	bl	8004a34 <__errno>
 800060c:	230c      	movs	r3, #12
 800060e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000614:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000616:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8000618:	e7fc      	b.n	8000614 <_sbrk+0x24>
 800061a:	bf00      	nop
 800061c:	200004e4 	.word	0x200004e4
 8000620:	20000610 	.word	0x20000610

08000624 <_close>:

int _close(int file)
{
	return -1;
}
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	4770      	bx	lr

0800062a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800062a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800062e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000630:	2000      	movs	r0, #0
 8000632:	4770      	bx	lr

08000634 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000634:	2001      	movs	r0, #1
 8000636:	4770      	bx	lr

08000638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000638:	2000      	movs	r0, #0
 800063a:	4770      	bx	lr

0800063c <Serial_Scanf>:
  * @brief  Gets numeric values from the Hyperterminal.
  * @param  Maximum value allowed (value)
  * @retval The character received
  */
uint32_t Serial_Scanf(uint32_t value)
{
 800063c:	b510      	push	{r4, lr}
 800063e:	4604      	mov	r4, r0
  uint16_t tmp = 0;
  
  tmp = getchar();
 8000640:	f004 f9fe 	bl	8004a40 <getchar>
  
  if (tmp > value)
 8000644:	b280      	uxth	r0, r0
 8000646:	42a0      	cmp	r0, r4
 8000648:	d904      	bls.n	8000654 <Serial_Scanf+0x18>
  {
    printf("\n\r\r  !!! Please enter valid number between 0 and %lu \n\r", value);
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <Serial_Scanf+0x1c>)
 800064c:	4621      	mov	r1, r4
 800064e:	f004 fa43 	bl	8004ad8 <iprintf>
    return 0xFF;
 8000652:	20ff      	movs	r0, #255	; 0xff
  }
  return tmp;
}
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	08005dc0 	.word	0x08005dc0

0800065c <Proximity_Test>:
{
 800065c:	b570      	push	{r4, r5, r6, lr}
  printf("\n\r*************************************************************\n\r");
 800065e:	4842      	ldr	r0, [pc, #264]	; (8000768 <Proximity_Test+0x10c>)
{
 8000660:	b0f8      	sub	sp, #480	; 0x1e0
  printf("\n\r*************************************************************\n\r");
 8000662:	f004 fa39 	bl	8004ad8 <iprintf>
  printf("\n\r********************** Proximity Test ************************\n\r");
 8000666:	4841      	ldr	r0, [pc, #260]	; (800076c <Proximity_Test+0x110>)
 8000668:	f004 fa36 	bl	8004ad8 <iprintf>
  uint16_t vl53l0x_id = 0; 
 800066c:	2400      	movs	r4, #0
  printf("\n\r*************************************************************\n\r\n\r");
 800066e:	4840      	ldr	r0, [pc, #256]	; (8000770 <Proximity_Test+0x114>)
 8000670:	f004 fa32 	bl	8004ad8 <iprintf>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2501      	movs	r5, #1
  uint16_t vl53l0x_id = 0; 
 8000676:	f8ad 417a 	strh.w	r4, [sp, #378]	; 0x17a
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2640      	movs	r6, #64	; 0x40
  SENSOR_IO_Init();  
 800067c:	f002 fdf8 	bl	8003270 <SENSOR_IO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000680:	2302      	movs	r3, #2
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000682:	483c      	ldr	r0, [pc, #240]	; (8000774 <Proximity_Test+0x118>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000684:	9362      	str	r3, [sp, #392]	; 0x188
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8000686:	a95f      	add	r1, sp, #380	; 0x17c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	e9cd 655f 	strd	r6, r5, [sp, #380]	; 0x17c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800068c:	9561      	str	r5, [sp, #388]	; 0x184
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800068e:	f002 fed7 	bl	8003440 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8000692:	462a      	mov	r2, r5
 8000694:	4631      	mov	r1, r6
 8000696:	4837      	ldr	r0, [pc, #220]	; (8000774 <Proximity_Test+0x118>)
 8000698:	f002 ffb0 	bl	80035fc <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 800069c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a0:	f002 fe54 	bl	800334c <HAL_Delay>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80006a4:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80006a6:	4c34      	ldr	r4, [pc, #208]	; (8000778 <Proximity_Test+0x11c>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 80006a8:	2263      	movs	r2, #99	; 0x63
 80006aa:	a85f      	add	r0, sp, #380	; 0x17c
 80006ac:	f004 fa0c 	bl	8004ac8 <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 80006b0:	a95f      	add	r1, sp, #380	; 0x17c
 80006b2:	4620      	mov	r0, r4
 80006b4:	f000 f8f0 	bl	8000898 <VL53L0X_GetDeviceInfo>
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d14a      	bne.n	8000752 <Proximity_Test+0xf6>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 80006bc:	f50d 72bd 	add.w	r2, sp, #378	; 0x17a
 80006c0:	21c0      	movs	r1, #192	; 0xc0
 80006c2:	4620      	mov	r0, r4
 80006c4:	f002 fbc8 	bl	8002e58 <VL53L0X_RdWord>
 80006c8:	2800      	cmp	r0, #0
 80006ca:	d140      	bne.n	800074e <Proximity_Test+0xf2>
      if (vl53l0x_id == VL53L0X_ID)
 80006cc:	f8bd 217a 	ldrh.w	r2, [sp, #378]	; 0x17a
 80006d0:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d110      	bne.n	80006fa <Proximity_Test+0x9e>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 80006d8:	4620      	mov	r0, r4
 80006da:	f000 fab9 	bl	8000c50 <VL53L0X_DataInit>
 80006de:	bb90      	cbnz	r0, 8000746 <Proximity_Test+0xea>
          SetupSingleShot(Dev);
 80006e0:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80006e4:	f104 0110 	add.w	r1, r4, #16
 80006e8:	4668      	mov	r0, sp
          Dev.Present = 1;
 80006ea:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
          SetupSingleShot(Dev);
 80006ee:	f004 f9dd 	bl	8004aac <memcpy>
 80006f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006f6:	f002 fc33 	bl	8002f60 <SetupSingleShot>
  printf("\n\r*** Tape n or N to get a first Proximity distance ***\n\r\n\r");
 80006fa:	4820      	ldr	r0, [pc, #128]	; (800077c <Proximity_Test+0x120>)
      printf("\n\r*** Tape n or N to get a new data ***\n\r\n\r");
 80006fc:	4d20      	ldr	r5, [pc, #128]	; (8000780 <Proximity_Test+0x124>)
      printf("\n\r*** Tape q or Q to quit Proximity Test ***\n\r\n\r");
 80006fe:	4c21      	ldr	r4, [pc, #132]	; (8000784 <Proximity_Test+0x128>)
      printf("\n\r*** This is a new data ***\n\r\n\r");
 8000700:	4e21      	ldr	r6, [pc, #132]	; (8000788 <Proximity_Test+0x12c>)
  printf("\n\r*** Tape n or N to get a first Proximity distance ***\n\r\n\r");
 8000702:	f004 f9e9 	bl	8004ad8 <iprintf>
  printf("\n\r*** Tape q or Q to quit Proximity Test ***\n\r\n\r");
 8000706:	481f      	ldr	r0, [pc, #124]	; (8000784 <Proximity_Test+0x128>)
 8000708:	f004 f9e6 	bl	8004ad8 <iprintf>
    ret = Serial_Scanf(255);
 800070c:	20ff      	movs	r0, #255	; 0xff
 800070e:	f7ff ff95 	bl	800063c <Serial_Scanf>
    if((ret == 'n') || (ret == 'N'))
 8000712:	f020 0020 	bic.w	r0, r0, #32
 8000716:	284e      	cmp	r0, #78	; 0x4e
 8000718:	d11d      	bne.n	8000756 <Proximity_Test+0xfa>
      printf("\n\r*** This is a new data ***\n\r\n\r");
 800071a:	4630      	mov	r0, r6
 800071c:	f004 f9dc 	bl	8004ad8 <iprintf>
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8000720:	a95f      	add	r1, sp, #380	; 0x17c
 8000722:	4815      	ldr	r0, [pc, #84]	; (8000778 <Proximity_Test+0x11c>)
 8000724:	f000 fc8a 	bl	800103c <VL53L0X_PerformSingleRangingMeasurement>
      printf("DISTANCE is = %d mm \n\r", prox_value);
 8000728:	f8bd 1184 	ldrh.w	r1, [sp, #388]	; 0x184
 800072c:	4817      	ldr	r0, [pc, #92]	; (800078c <Proximity_Test+0x130>)
 800072e:	f004 f9d3 	bl	8004ad8 <iprintf>
      printf("\n\r*** This is a new data ***\n\r\n\r");
 8000732:	4630      	mov	r0, r6
 8000734:	f004 f9d0 	bl	8004ad8 <iprintf>
      printf("\n\r*** Tape n or N to get a new data ***\n\r\n\r");
 8000738:	4628      	mov	r0, r5
 800073a:	f004 f9cd 	bl	8004ad8 <iprintf>
      printf("\n\r*** Tape q or Q to quit Proximity Test ***\n\r\n\r");
 800073e:	4620      	mov	r0, r4
 8000740:	f004 f9ca 	bl	8004ad8 <iprintf>
 8000744:	e7e2      	b.n	800070c <Proximity_Test+0xb0>
          printf("VL53L0X Time of Flight Failed to send its ID!\n\r");
 8000746:	4812      	ldr	r0, [pc, #72]	; (8000790 <Proximity_Test+0x134>)
    printf("VL53L0X Time of Flight Failed to get infos!\n\r");
 8000748:	f004 f9c6 	bl	8004ad8 <iprintf>
 800074c:	e7d5      	b.n	80006fa <Proximity_Test+0x9e>
      printf("VL53L0X Time of Flight Failed to Initialize!\n\r");
 800074e:	4811      	ldr	r0, [pc, #68]	; (8000794 <Proximity_Test+0x138>)
 8000750:	e7fa      	b.n	8000748 <Proximity_Test+0xec>
    printf("VL53L0X Time of Flight Failed to get infos!\n\r");
 8000752:	4811      	ldr	r0, [pc, #68]	; (8000798 <Proximity_Test+0x13c>)
 8000754:	e7f8      	b.n	8000748 <Proximity_Test+0xec>
    else if((ret == 'q') || (ret == 'Q'))
 8000756:	2851      	cmp	r0, #81	; 0x51
 8000758:	d1ee      	bne.n	8000738 <Proximity_Test+0xdc>
      printf("\n\r*** End of Proximity Test ***\n\r\n\r");
 800075a:	4810      	ldr	r0, [pc, #64]	; (800079c <Proximity_Test+0x140>)
}
 800075c:	b078      	add	sp, #480	; 0x1e0
 800075e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      printf("\n\r*** End of Proximity Test ***\n\r\n\r");
 8000762:	f004 b9b9 	b.w	8004ad8 <iprintf>
 8000766:	bf00      	nop
 8000768:	08005df8 	.word	0x08005df8
 800076c:	08005e3a 	.word	0x08005e3a
 8000770:	08005e7d 	.word	0x08005e7d
 8000774:	48000800 	.word	0x48000800
 8000778:	20000000 	.word	0x20000000
 800077c:	08005f4e 	.word	0x08005f4e
 8000780:	08005ff3 	.word	0x08005ff3
 8000784:	08005f8a 	.word	0x08005f8a
 8000788:	08005fbb 	.word	0x08005fbb
 800078c:	08005fdc 	.word	0x08005fdc
 8000790:	08005ec1 	.word	0x08005ec1
 8000794:	08005ef1 	.word	0x08005ef1
 8000798:	08005f20 	.word	0x08005f20
 800079c:	0800601f 	.word	0x0800601f

080007a0 <main>:
{
 80007a0:	b500      	push	{lr}
 80007a2:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80007a4:	f002 fdb0 	bl	8003308 <HAL_Init>
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007a8:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007aa:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80007ac:	2200      	movs	r2, #0
 80007ae:	e9cd 240c 	strd	r2, r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007b2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007b6:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b8:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007bc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2404      	movs	r4, #4
 80007c6:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ca:	e9cd 3413 	strd	r3, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ce:	9215      	str	r2, [sp, #84]	; 0x54
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f003 fac6 	bl	8003d60 <HAL_RCC_OscConfig>
 80007d4:	b100      	cbz	r0, 80007d8 <main+0x38>
    while(1);
 80007d6:	e7fe      	b.n	80007d6 <main+0x36>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	210f      	movs	r1, #15
 80007da:	2303      	movs	r3, #3
 80007dc:	e9cd 1300 	strd	r1, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 80007e0:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80007e4:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007e6:	4621      	mov	r1, r4
 80007e8:	4668      	mov	r0, sp
 80007ea:	f003 fd3f 	bl	800426c <HAL_RCC_ClockConfig>
 80007ee:	4604      	mov	r4, r0
 80007f0:	b100      	cbz	r0, 80007f4 <main+0x54>
    while(1);
 80007f2:	e7fe      	b.n	80007f2 <main+0x52>
  BSP_LED_Init(LED2); 
 80007f4:	f002 fc98 	bl	8003128 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 80007f8:	4621      	mov	r1, r4
 80007fa:	4620      	mov	r0, r4
 80007fc:	f002 fcb6 	bl	800316c <BSP_PB_Init>
  hDiscoUart.Instance = DISCOVERY_COM1; 
 8000800:	490a      	ldr	r1, [pc, #40]	; (800082c <main+0x8c>)
  hDiscoUart.Init.BaudRate = 115200;
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <main+0x90>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000804:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 8000806:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800080a:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 800080e:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000810:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000812:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8000820:	f002 fce2 	bl	80031e8 <BSP_COM_Init>
    Proximity_Test();
 8000824:	f7ff ff1a 	bl	800065c <Proximity_Test>
  while (1)
 8000828:	e7fc      	b.n	8000824 <main+0x84>
 800082a:	bf00      	nop
 800082c:	20000578 	.word	0x20000578
 8000830:	40013800 	.word	0x40013800

08000834 <__io_putchar>:
  * @brief Retargets the C library msg_info function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000834:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 8000836:	4c07      	ldr	r4, [pc, #28]	; (8000854 <__io_putchar+0x20>)
{
 8000838:	9001      	str	r0, [sp, #4]
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 800083a:	f247 5330 	movw	r3, #30000	; 0x7530
 800083e:	2201      	movs	r2, #1
 8000840:	a901      	add	r1, sp, #4
 8000842:	4620      	mov	r0, r4
 8000844:	f003 ffc4 	bl	80047d0 <HAL_UART_Transmit>
 8000848:	2800      	cmp	r0, #0
 800084a:	d1f6      	bne.n	800083a <__io_putchar+0x6>
  {
    ;
  }
  return ch;
}
 800084c:	9801      	ldr	r0, [sp, #4]
 800084e:	b002      	add	sp, #8
 8000850:	bd10      	pop	{r4, pc}
 8000852:	bf00      	nop
 8000854:	20000578 	.word	0x20000578

08000858 <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8000858:	b513      	push	{r0, r1, r4, lr}
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 800085a:	2300      	movs	r3, #0
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 800085c:	4c08      	ldr	r4, [pc, #32]	; (8000880 <__io_getchar+0x28>)
  uint8_t ch = 0;
 800085e:	f88d 3007 	strb.w	r3, [sp, #7]
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 8000862:	f247 5330 	movw	r3, #30000	; 0x7530
 8000866:	2201      	movs	r2, #1
 8000868:	f10d 0107 	add.w	r1, sp, #7
 800086c:	4620      	mov	r0, r4
 800086e:	f004 f809 	bl	8004884 <HAL_UART_Receive>
 8000872:	2800      	cmp	r0, #0
 8000874:	d1f5      	bne.n	8000862 <__io_getchar+0xa>
  {
    ;
  }
  return ch;
}
 8000876:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800087a:	b002      	add	sp, #8
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop
 8000880:	20000578 	.word	0x20000578

08000884 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000884:	4770      	bx	lr

08000886 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler>

08000888 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler>

0800088a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler>

0800088c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler>

0800088e <SVC_Handler>:
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000894:	f002 bd48 	b.w	8003328 <HAL_IncTick>

08000898 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8000898:	f002 ba34 	b.w	8002d04 <VL53L0X_get_device_info>

0800089c <VL53L0X_SetDeviceMode>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800089c:	2915      	cmp	r1, #21
 800089e:	d807      	bhi.n	80008b0 <VL53L0X_SetDeviceMode+0x14>
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <VL53L0X_SetDeviceMode+0x1c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	408a      	lsls	r2, r1
 80008a6:	4013      	ands	r3, r2
 80008a8:	b113      	cbz	r3, 80008b0 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80008aa:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80008ac:	2000      	movs	r0, #0
		break;
 80008ae:	4770      	bx	lr
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80008b0:	f06f 0007 	mvn.w	r0, #7
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	0030000b 	.word	0x0030000b

080008bc <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80008bc:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80008be:	460a      	mov	r2, r1
{
 80008c0:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80008c2:	2109      	movs	r1, #9
 80008c4:	f002 fa7f 	bl	8002dc6 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 80008c8:	b918      	cbnz	r0, 80008d2 <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 80008ca:	7823      	ldrb	r3, [r4, #0]
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 80008d2:	bd10      	pop	{r4, pc}

080008d4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80008d4:	f001 be4c 	b.w	8002570 <VL53L0X_set_measurement_timing_budget_micro_seconds>

080008d8 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80008d8:	f001 bd2c 	b.w	8002334 <VL53L0X_set_vcsel_pulse_period>

080008dc <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80008dc:	f001 be2e 	b.w	800253c <VL53L0X_get_vcsel_pulse_period>

080008e0 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80008e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80008e2:	2300      	movs	r3, #0
{
 80008e4:	460c      	mov	r4, r1
 80008e6:	4617      	mov	r7, r2
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80008e8:	2101      	movs	r1, #1
 80008ea:	f10d 0207 	add.w	r2, sp, #7
{
 80008ee:	4606      	mov	r6, r0
	uint8_t SequenceConfig = 0;
 80008f0:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80008f4:	f002 fa67 	bl	8002dc6 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 80008f8:	4605      	mov	r5, r0
 80008fa:	b9d8      	cbnz	r0, 8000934 <VL53L0X_SetSequenceStepEnable+0x54>
		if (SequenceStepEnabled == 1) {
 80008fc:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 80008fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8000902:	d126      	bne.n	8000952 <VL53L0X_SetSequenceStepEnable+0x72>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8000904:	2c04      	cmp	r4, #4
 8000906:	d83a      	bhi.n	800097e <VL53L0X_SetSequenceStepEnable+0x9e>
 8000908:	e8df f004 	tbb	[pc, r4]
 800090c:	1d1a1703 	.word	0x1d1a1703
 8000910:	20          	.byte	0x20
 8000911:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8000912:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8000916:	42a3      	cmp	r3, r4
 8000918:	d00c      	beq.n	8000934 <VL53L0X_SetSequenceStepEnable+0x54>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 800091a:	4622      	mov	r2, r4
 800091c:	2101      	movs	r1, #1
 800091e:	4630      	mov	r0, r6
 8000920:	f002 fae0 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8000924:	4605      	mov	r5, r0
 8000926:	b928      	cbnz	r0, 8000934 <VL53L0X_SetSequenceStepEnable+0x54>
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8000928:	6971      	ldr	r1, [r6, #20]
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800092a:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800092e:	4630      	mov	r0, r6
 8000930:	f7ff ffd0 	bl	80008d4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8000934:	4628      	mov	r0, r5
 8000936:	b003      	add	sp, #12
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 800093a:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 800093e:	e7ea      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x04;
 8000940:	f043 0404 	orr.w	r4, r3, #4
				break;
 8000944:	e7e7      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x40;
 8000946:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 800094a:	e7e4      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew |= 0x80;
 800094c:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8000950:	e7e1      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 8000952:	2c04      	cmp	r4, #4
 8000954:	d813      	bhi.n	800097e <VL53L0X_SetSequenceStepEnable+0x9e>
 8000956:	e8df f004 	tbb	[pc, r4]
 800095a:	0603      	.short	0x0603
 800095c:	0c09      	.short	0x0c09
 800095e:	0f          	.byte	0x0f
 800095f:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8000960:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 8000964:	e7d7      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xd7;
 8000966:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 800096a:	e7d4      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xfb;
 800096c:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 8000970:	e7d1      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0xbf;
 8000972:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 8000976:	e7ce      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
				SequenceConfigNew &= 0x7f;
 8000978:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 800097c:	e7cb      	b.n	8000916 <VL53L0X_SetSequenceStepEnable+0x36>
			switch (SequenceStepId) {
 800097e:	f06f 0503 	mvn.w	r5, #3
 8000982:	e7d7      	b.n	8000934 <VL53L0X_SetSequenceStepEnable+0x54>

08000984 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8000984:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 8000986:	2300      	movs	r3, #0
{
 8000988:	460c      	mov	r4, r1
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800098a:	f10d 0207 	add.w	r2, sp, #7
 800098e:	2101      	movs	r1, #1
	uint8_t SequenceConfig = 0;
 8000990:	f88d 3007 	strb.w	r3, [sp, #7]
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000994:	f002 fa17 	bl	8002dc6 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8000998:	b978      	cbnz	r0, 80009ba <VL53L0X_GetSequenceStepEnables+0x36>
		Status = sequence_step_enabled(Dev,
 800099a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800099e:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80009a2:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80009a4:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80009a8:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80009aa:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80009ae:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80009b0:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80009b4:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80009b6:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80009b8:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80009ba:	b002      	add	sp, #8
 80009bc:	bd10      	pop	{r4, pc}

080009be <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80009be:	b513      	push	{r0, r1, r4, lr}
 80009c0:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80009c2:	aa01      	add	r2, sp, #4
 80009c4:	f001 fbac 	bl	8002120 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80009c8:	b978      	cbnz	r0, 80009ea <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80009ca:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80009cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80009d4:	fb02 3311 	mls	r3, r2, r1, r3
 80009d8:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 80009dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80009e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80009e4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80009e8:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80009ea:	b002      	add	sp, #8
 80009ec:	bd10      	pop	{r4, pc}

080009ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80009ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80009f0:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80009f2:	f10d 0202 	add.w	r2, sp, #2
 80009f6:	21f8      	movs	r1, #248	; 0xf8
{
 80009f8:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80009fa:	f002 fa2d 	bl	8002e58 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80009fe:	b970      	cbnz	r0, 8000a1e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8000a00:	aa01      	add	r2, sp, #4
 8000a02:	2104      	movs	r1, #4
 8000a04:	4620      	mov	r0, r4
 8000a06:	f002 fa47 	bl	8002e98 <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8000a0a:	b940      	cbnz	r0, 8000a1e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8000a0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8000a10:	b11a      	cbz	r2, 8000a1a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8000a12:	9b01      	ldr	r3, [sp, #4]
 8000a14:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8000a18:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8000a1a:	682b      	ldr	r3, [r5, #0]
 8000a1c:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000a1e:	b003      	add	sp, #12
 8000a20:	bd30      	pop	{r4, r5, pc}

08000a22 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8000a22:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8000a24:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000a26:	2000      	movs	r0, #0
 8000a28:	4770      	bx	lr

08000a2a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8000a2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a2c:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8000a2e:	f10d 0206 	add.w	r2, sp, #6
 8000a32:	2120      	movs	r1, #32
{
 8000a34:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 8000a36:	f002 fa0f 	bl	8002e58 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8000a3a:	b928      	cbnz	r0, 8000a48 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8000a3c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a40:	b923      	cbnz	r3, 8000a4c <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8000a42:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8000a44:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8000a46:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8000a4c:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8000a4e:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8000a50:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8000a52:	2301      	movs	r3, #1
 8000a54:	7723      	strb	r3, [r4, #28]
 8000a56:	e7f7      	b.n	8000a48 <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

08000a58 <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000a58:	2905      	cmp	r1, #5
{
 8000a5a:	b570      	push	{r4, r5, r6, lr}
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	460e      	mov	r6, r1
 8000a60:	4615      	mov	r5, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000a62:	d835      	bhi.n	8000ad0 <VL53L0X_SetLimitCheckEnable+0x78>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8000a64:	b162      	cbz	r2, 8000a80 <VL53L0X_SetLimitCheckEnable+0x28>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000a66:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8000a6a:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 8000a6e:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 8000a70:	1e70      	subs	r0, r6, #1
 8000a72:	2804      	cmp	r0, #4
 8000a74:	d807      	bhi.n	8000a86 <VL53L0X_SetLimitCheckEnable+0x2e>
 8000a76:	e8df f000 	tbb	[pc, r0]
 8000a7a:	170e      	.short	0x170e
 8000a7c:	1d1a      	.short	0x1d1a
 8000a7e:	24          	.byte	0x24
 8000a7f:	00          	.byte	0x00
			LimitCheckEnableInt = 0;
 8000a80:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e7f4      	b.n	8000a70 <VL53L0X_SetLimitCheckEnable+0x18>

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000a86:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 8000a8a:	4434      	add	r4, r6
 8000a8c:	b9e5      	cbnz	r5, 8000ac8 <VL53L0X_SetLimitCheckEnable+0x70>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000a8e:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000a92:	2000      	movs	r0, #0
 8000a94:	e007      	b.n	8000aa6 <VL53L0X_SetLimitCheckEnable+0x4e>
			Status = VL53L0X_WrWord(Dev,
 8000a96:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8000a9a:	2144      	movs	r1, #68	; 0x44
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f002 fa31 	bl	8002f04 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d0f1      	beq.n	8000a8a <VL53L0X_SetLimitCheckEnable+0x32>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000aa8:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	if (Status == VL53L0X_ERROR_NONE) {
 8000aac:	e7ed      	b.n	8000a8a <VL53L0X_SetLimitCheckEnable+0x32>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000aae:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	if (Status == VL53L0X_ERROR_NONE) {
 8000ab2:	e7ea      	b.n	8000a8a <VL53L0X_SetLimitCheckEnable+0x32>
			Status = VL53L0X_UpdateByte(Dev,
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 8000ab8:	2160      	movs	r1, #96	; 0x60
 8000aba:	4620      	mov	r0, r4
 8000abc:	f002 fa34 	bl	8002f28 <VL53L0X_UpdateByte>
			break;
 8000ac0:	e7ef      	b.n	8000aa2 <VL53L0X_SetLimitCheckEnable+0x4a>
			Status = VL53L0X_UpdateByte(Dev,
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	22ef      	movs	r2, #239	; 0xef
 8000ac6:	e7f7      	b.n	8000ab8 <VL53L0X_SetLimitCheckEnable+0x60>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8000ace:	e7e0      	b.n	8000a92 <VL53L0X_SetLimitCheckEnable+0x3a>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8000ad0:	f06f 0003 	mvn.w	r0, #3
 8000ad4:	e7e7      	b.n	8000aa6 <VL53L0X_SetLimitCheckEnable+0x4e>

08000ad6 <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000ad6:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000ad8:	bf96      	itet	ls
 8000ada:	1840      	addls	r0, r0, r1
		*pLimitCheckEnable = 0;
 8000adc:	2300      	movhi	r3, #0
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000ade:	f890 3028 	ldrbls.w	r3, [r0, #40]	; 0x28
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8000ae2:	7013      	strb	r3, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ae4:	bf94      	ite	ls
 8000ae6:	2000      	movls	r0, #0
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8000ae8:	f06f 0003 	mvnhi.w	r0, #3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000aec:	4770      	bx	lr

08000aee <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8000aee:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8000af0:	1843      	adds	r3, r0, r1
{
 8000af2:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8000af4:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8000af8:	460e      	mov	r6, r1
 8000afa:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8000afc:	b918      	cbnz	r0, 8000b06 <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000afe:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8000b02:	6362      	str	r2, [r4, #52]	; 0x34
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000b04:	bd70      	pop	{r4, r5, r6, pc}
		switch (LimitCheckId) {
 8000b06:	2905      	cmp	r1, #5
 8000b08:	d81b      	bhi.n	8000b42 <VL53L0X_SetLimitCheckValue+0x54>
 8000b0a:	e8df f001 	tbb	[pc, r1]
 8000b0e:	0903      	.short	0x0903
 8000b10:	16161412 	.word	0x16161412
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b14:	6362      	str	r2, [r4, #52]	; 0x34
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b16:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	6365      	str	r5, [r4, #52]	; 0x34
 8000b1e:	e7f1      	b.n	8000b04 <VL53L0X_SetLimitCheckValue+0x16>
			Status = VL53L0X_WrWord(Dev,
 8000b20:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8000b24:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 8000b26:	4620      	mov	r0, r4
 8000b28:	f002 f9ec 	bl	8002f04 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1e9      	bne.n	8000b04 <VL53L0X_SetLimitCheckValue+0x16>
 8000b30:	e7f1      	b.n	8000b16 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b32:	63e2      	str	r2, [r4, #60]	; 0x3c
		if (Status == VL53L0X_ERROR_NONE) {
 8000b34:	e7ef      	b.n	8000b16 <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b36:	6422      	str	r2, [r4, #64]	; 0x40
		if (Status == VL53L0X_ERROR_NONE) {
 8000b38:	e7ed      	b.n	8000b16 <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8000b3a:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8000b3e:	2164      	movs	r1, #100	; 0x64
 8000b40:	e7f1      	b.n	8000b26 <VL53L0X_SetLimitCheckValue+0x38>
		switch (LimitCheckId) {
 8000b42:	f06f 0003 	mvn.w	r0, #3
 8000b46:	e7dd      	b.n	8000b04 <VL53L0X_SetLimitCheckValue+0x16>

08000b48 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8000b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8000b4e:	2905      	cmp	r1, #5
 8000b50:	d82c      	bhi.n	8000bac <VL53L0X_GetLimitCheckValue+0x64>
 8000b52:	e8df f001 	tbb	[pc, r1]
 8000b56:	0703      	.short	0x0703
 8000b58:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8000b5e:	602b      	str	r3, [r5, #0]
 8000b60:	2000      	movs	r0, #0
 8000b62:	e021      	b.n	8000ba8 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 8000b64:	f10d 0206 	add.w	r2, sp, #6
 8000b68:	2144      	movs	r1, #68	; 0x44
 8000b6a:	f002 f975 	bl	8002e58 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8000b6e:	b9d8      	cbnz	r0, 8000ba8 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8000b70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 8000b74:	0253      	lsls	r3, r2, #9
 8000b76:	b19a      	cbz	r2, 8000ba0 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 8000b78:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8000b7a:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8000b82:	e011      	b.n	8000ba8 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b84:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		if (EnableZeroValue == 1) {
 8000b86:	e7ea      	b.n	8000b5e <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000b88:	6c03      	ldr	r3, [r0, #64]	; 0x40
		if (EnableZeroValue == 1) {
 8000b8a:	e7e8      	b.n	8000b5e <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 8000b8c:	f10d 0206 	add.w	r2, sp, #6
 8000b90:	2164      	movs	r1, #100	; 0x64
 8000b92:	f002 f961 	bl	8002e58 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 8000b96:	b938      	cbnz	r0, 8000ba8 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8000b98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000b9c:	025b      	lsls	r3, r3, #9
		if (EnableZeroValue == 1) {
 8000b9e:	e7de      	b.n	8000b5e <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8000ba0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 8000ba2:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8000ba4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8000ba8:	b003      	add	sp, #12
 8000baa:	bd30      	pop	{r4, r5, pc}
	switch (LimitCheckId) {
 8000bac:	f06f 0003 	mvn.w	r0, #3
 8000bb0:	e7fa      	b.n	8000ba8 <VL53L0X_GetLimitCheckValue+0x60>

08000bb2 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8000bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bb4:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8000bb6:	f10d 0207 	add.w	r2, sp, #7
 8000bba:	2101      	movs	r1, #1
{
 8000bbc:	4604      	mov	r4, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8000bbe:	f002 f902 	bl	8002dc6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 8000bc2:	b938      	cbnz	r0, 8000bd4 <VL53L0X_GetWrapAroundCheckEnable+0x22>
		PALDevDataSet(Dev, SequenceConfig, data);
 8000bc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000bc8:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (data & (0x01 << 7))
			*pWrapAroundCheckEnable = 0x01;
 8000bcc:	09db      	lsrs	r3, r3, #7
 8000bce:	702b      	strb	r3, [r5, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8000bd0:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd30      	pop	{r4, r5, pc}

08000bd8 <VL53L0X_GetDeviceParameters>:
{
 8000bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8000bdc:	7c03      	ldrb	r3, [r0, #16]
{
 8000bde:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8000be0:	f801 3b08 	strb.w	r3, [r1], #8
{
 8000be4:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8000be6:	f7ff ff02 	bl	80009ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8000bea:	bb40      	cbnz	r0, 8000c3e <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8000bec:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8000bee:	f104 0110 	add.w	r1, r4, #16
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f7ff ff19 	bl	8000a2a <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8000bf8:	bb08      	cbnz	r0, 8000c3e <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8000bfa:	f104 0114 	add.w	r1, r4, #20
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f000 fbc7 	bl	8001392 <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8000c04:	b9d8      	cbnz	r0, 8000c3e <VL53L0X_GetDeviceParameters+0x66>
 8000c06:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8000c0a:	f105 0928 	add.w	r9, r5, #40	; 0x28
 8000c0e:	f104 0818 	add.w	r8, r4, #24
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000c12:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8000c14:	463a      	mov	r2, r7
 8000c16:	b2b1      	uxth	r1, r6
 8000c18:	4628      	mov	r0, r5
 8000c1a:	f7ff ff95 	bl	8000b48 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 8000c1e:	b970      	cbnz	r0, 8000c3e <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000c20:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000c22:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8000c26:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000c2a:	2e06      	cmp	r6, #6
 8000c2c:	f107 0704 	add.w	r7, r7, #4
 8000c30:	d1f0      	bne.n	8000c14 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8000c32:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8000c36:	4628      	mov	r0, r5
 8000c38:	f7ff ffbb 	bl	8000bb2 <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8000c3c:	b108      	cbz	r0, 8000c42 <VL53L0X_GetDeviceParameters+0x6a>
}
 8000c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8000c42:	1d21      	adds	r1, r4, #4
 8000c44:	4628      	mov	r0, r5
}
 8000c46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8000c4a:	f001 bcf9 	b.w	8002640 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08000c50 <VL53L0X_DataInit>:
{
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000c52:	2200      	movs	r2, #0
{
 8000c54:	4605      	mov	r5, r0
 8000c56:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8000c58:	2188      	movs	r1, #136	; 0x88
 8000c5a:	f002 f943 	bl	8002ee4 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8000c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c62:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8000c66:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000c6a:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <VL53L0X_DataInit+0xe4>)
 8000c70:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000c74:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000c76:	4a30      	ldr	r2, [pc, #192]	; (8000d38 <VL53L0X_DataInit+0xe8>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8000c78:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8000c7c:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8000c80:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8000c82:	4669      	mov	r1, sp
 8000c84:	4628      	mov	r0, r5
 8000c86:	f7ff ffa7 	bl	8000bd8 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	b970      	cbnz	r0, 8000cac <VL53L0X_DataInit+0x5c>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8000c8e:	f8ad 0000 	strh.w	r0, [sp]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8000c92:	466e      	mov	r6, sp
 8000c94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c96:	f105 0710 	add.w	r7, r5, #16
 8000c9a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000c9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000ca0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ca2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000ca4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ca8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <VL53L0X_DataInit+0xec>)
 8000cae:	4a24      	ldr	r2, [pc, #144]	; (8000d40 <VL53L0X_DataInit+0xf0>)
 8000cb0:	e9c5 234d 	strd	r2, r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000cba:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8000cbc:	bbb4      	cbnz	r4, 8000d2c <VL53L0X_DataInit+0xdc>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000cbe:	b2b1      	uxth	r1, r6
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff fec8 	bl	8000a58 <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000cc8:	3601      	adds	r6, #1
 8000cca:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8000ccc:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000cce:	d1f5      	bne.n	8000cbc <VL53L0X_DataInit+0x6c>
	if (Status == VL53L0X_ERROR_NONE)
 8000cd0:	bb60      	cbnz	r0, 8000d2c <VL53L0X_DataInit+0xdc>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000cd2:	8568      	strh	r0, [r5, #42]	; 0x2a
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000cd4:	4602      	mov	r2, r0
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000cd6:	4606      	mov	r6, r0
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000cd8:	2104      	movs	r1, #4
 8000cda:	4628      	mov	r0, r5
 8000cdc:	f7ff febc 	bl	8000a58 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	bb18      	cbnz	r0, 8000d2c <VL53L0X_DataInit+0xdc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	2105      	movs	r1, #5
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f7ff feb5 	bl	8000a58 <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 8000cee:	4604      	mov	r4, r0
 8000cf0:	b9e0      	cbnz	r0, 8000d2c <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8000cf2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cf6:	636b      	str	r3, [r5, #52]	; 0x34
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8000cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f7ff fef5 	bl	8000aee <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 8000d04:	4604      	mov	r4, r0
 8000d06:	b988      	cbnz	r0, 8000d2c <VL53L0X_DataInit+0xdc>
	if (Temp8 == 0) { /* disabled write only internal value */
 8000d08:	f44f 130c 	mov.w	r3, #2293760	; 0x230000
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	e9c5 300f 	strd	r3, r0, [r5, #60]	; 0x3c
 8000d12:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8000d16:	2101      	movs	r1, #1
 8000d18:	4628      	mov	r0, r5
 8000d1a:	f002 f8e3 	bl	8002ee4 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8000d1e:	2301      	movs	r3, #1
 8000d20:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 8000d24:	4604      	mov	r4, r0
 8000d26:	b908      	cbnz	r0, 8000d2c <VL53L0X_DataInit+0xdc>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8000d28:	f885 6115 	strb.w	r6, [r5, #277]	; 0x115
}
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	b011      	add	sp, #68	; 0x44
 8000d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d32:	bf00      	nop
 8000d34:	00016b85 	.word	0x00016b85
 8000d38:	000970a4 	.word	0x000970a4
 8000d3c:	0a0001f4 	.word	0x0a0001f4
 8000d40:	03840064 	.word	0x03840064

08000d44 <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8000d44:	2301      	movs	r3, #1
 8000d46:	f000 bd52 	b.w	80017ee <VL53L0X_perform_ref_calibration>

08000d4a <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8000d4a:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8000d50:	230c      	movs	r3, #12
{
 8000d52:	460c      	mov	r4, r1
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8000d54:	aa04      	add	r2, sp, #16
 8000d56:	2114      	movs	r1, #20
{
 8000d58:	4605      	mov	r5, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8000d5a:	f002 f867 	bl	8002e2c <VL53L0X_ReadMulti>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4684      	mov	ip, r0

	if (Status == VL53L0X_ERROR_NONE) {
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d16e      	bne.n	8000e44 <VL53L0X_GetRangingMeasurementData+0xfa>
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8000d66:	6063      	str	r3, [r4, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8000d68:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8000d6c:	f89d 3016 	ldrb.w	r3, [sp, #22]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8000d70:	f89d 1018 	ldrb.w	r1, [sp, #24]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8000d74:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8000d76:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8000d7a:	f89d 3019 	ldrb.w	r3, [sp, #25]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8000d7e:	f89d 701a 	ldrb.w	r7, [sp, #26]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8000d82:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8000d84:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	025b      	lsls	r3, r3, #9

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8000d8c:	f89d 1012 	ldrb.w	r1, [sp, #18]
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8000d90:	6123      	str	r3, [r4, #16]
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8000d92:	f89d 3013 	ldrb.w	r3, [sp, #19]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8000d96:	f89d 001b 	ldrb.w	r0, [sp, #27]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8000d9a:	f8b5 614e 	ldrh.w	r6, [r5, #334]	; 0x14e
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8000d9e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8000da2:	b292      	uxth	r2, r2
 8000da4:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8000da6:	b29b      	uxth	r3, r3
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8000da8:	eb00 2007 	add.w	r0, r0, r7, lsl #8
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8000dac:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8000dae:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8000db0:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
		DeviceRangeStatus = localBuffer[0];
 8000db4:	f89d 1010 	ldrb.w	r1, [sp, #16]
		RangeFractionalEnable = PALDevDataGet(Dev,
 8000db8:	f895 c131 	ldrb.w	ip, [r5, #305]	; 0x131
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8000dbc:	b287      	uxth	r7, r0
		if (LinearityCorrectiveGain != 1000) {
 8000dbe:	d00c      	beq.n	8000dda <VL53L0X_GetRangingMeasurementData+0x90>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8000dc0:	fb07 f006 	mul.w	r0, r7, r6
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8000dc4:	7f2f      	ldrb	r7, [r5, #28]
				* tmpuint16 + 500) / 1000);
 8000dc6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8000dca:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8000dce:	fbb0 f0f6 	udiv	r0, r0, r6
			VL53L0X_GETPARAMETERFIELD(Dev,
 8000dd2:	6a2e      	ldr	r6, [r5, #32]
			if (XTalkCompensationEnable) {
 8000dd4:	2f00      	cmp	r7, #0
 8000dd6:	d139      	bne.n	8000e4c <VL53L0X_GetRangingMeasurementData+0x102>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 8000dd8:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8000dda:	f1bc 0f00 	cmp.w	ip, #0
 8000dde:	d041      	beq.n	8000e64 <VL53L0X_GetRangingMeasurementData+0x11a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8000de0:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8000de2:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8000de4:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 8000de6:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8000de8:	f10d 000f 	add.w	r0, sp, #15
 8000dec:	e9cd 4000 	strd	r4, r0, [sp]
 8000df0:	4628      	mov	r0, r5
 8000df2:	f001 fe75 	bl	8002ae0 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8000df6:	4684      	mov	ip, r0
 8000df8:	bb20      	cbnz	r0, 8000e44 <VL53L0X_GetRangingMeasurementData+0xfa>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8000dfa:	f89d e00f 	ldrb.w	lr, [sp, #15]
 8000dfe:	f884 e018 	strb.w	lr, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8000e02:	f105 0650 	add.w	r6, r5, #80	; 0x50
 8000e06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e08:	af07      	add	r7, sp, #28
 8000e0a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8000e0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8000e10:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8000e12:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8000e16:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8000e1a:	8aa2      	ldrh	r2, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8000e1c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8000e20:	e9d4 4901 	ldrd	r4, r9, [r4, #4]
 8000e24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8000e28:	e9cd 4908 	strd	r4, r9, [sp, #32]
 8000e2c:	ac07      	add	r4, sp, #28
 8000e2e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8000e32:	f88d e034 	strb.w	lr, [sp, #52]	; 0x34
 8000e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e38:	3550      	adds	r5, #80	; 0x50
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000e40:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000e44:	4660      	mov	r0, ip
 8000e46:	b00e      	add	sp, #56	; 0x38
 8000e48:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
					* EffectiveSpadRtnCount) >> 8))
 8000e4c:	b2b6      	uxth	r6, r6
 8000e4e:	435e      	muls	r6, r3
				if ((SignalRate
 8000e50:	ebb2 2f26 	cmp.w	r2, r6, asr #8
					* EffectiveSpadRtnCount) >> 8))
 8000e54:	ea4f 2726 	mov.w	r7, r6, asr #8
				if ((SignalRate
 8000e58:	d107      	bne.n	8000e6a <VL53L0X_GetRangingMeasurementData+0x120>
					if (RangeFractionalEnable)
 8000e5a:	f1bc 0f00 	cmp.w	ip, #0
 8000e5e:	d10a      	bne.n	8000e76 <VL53L0X_GetRangingMeasurementData+0x12c>
						XtalkRangeMilliMeter = 8888
 8000e60:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8000e64:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8000e66:	2000      	movs	r0, #0
 8000e68:	e7bd      	b.n	8000de6 <VL53L0X_GetRangingMeasurementData+0x9c>
					(tmpuint16 * SignalRate)
 8000e6a:	b280      	uxth	r0, r0
 8000e6c:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 8000e6e:	1bd6      	subs	r6, r2, r7
						/ (SignalRate
 8000e70:	fbb0 f0f6 	udiv	r0, r0, r6
 8000e74:	e7b0      	b.n	8000dd8 <VL53L0X_GetRangingMeasurementData+0x8e>
						XtalkRangeMilliMeter = 8888;
 8000e76:	f242 27b8 	movw	r7, #8888	; 0x22b8
 8000e7a:	e7b1      	b.n	8000de0 <VL53L0X_GetRangingMeasurementData+0x96>

08000e7c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8000e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e7e:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8000e80:	210e      	movs	r1, #14
 8000e82:	f10d 0206 	add.w	r2, sp, #6
{
 8000e86:	461d      	mov	r5, r3
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8000e88:	4c0b      	ldr	r4, [pc, #44]	; (8000eb8 <VL53L0X_GetInterruptThresholds+0x3c>)
{
 8000e8a:	4606      	mov	r6, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8000e8c:	f001 ffe4 	bl	8002e58 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8000e90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e94:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8000e98:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8000e9a:	b950      	cbnz	r0, 8000eb2 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8000e9c:	f10d 0206 	add.w	r2, sp, #6
 8000ea0:	210c      	movs	r1, #12
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f001 ffd8 	bl	8002e58 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8000ea8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000eac:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8000eb0:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8000eb2:	b003      	add	sp, #12
 8000eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	1ffe0000 	.word	0x1ffe0000

08000ebc <VL53L0X_CheckAndLoadInterruptSettings>:
{
 8000ebc:	b5e3      	push	{r0, r1, r5, r6, r7, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8000ebe:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	2b02      	cmp	r3, #2
{
 8000ec6:	4607      	mov	r7, r0
 8000ec8:	460d      	mov	r5, r1
	if ((InterruptConfig ==
 8000eca:	d833      	bhi.n	8000f34 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8000ecc:	ab01      	add	r3, sp, #4
 8000ece:	466a      	mov	r2, sp
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	f7ff ffd3 	bl	8000e7c <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8000ed6:	9b00      	ldr	r3, [sp, #0]
 8000ed8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8000edc:	4606      	mov	r6, r0
		if (((ThresholdLow > 255*65536) ||
 8000ede:	d803      	bhi.n	8000ee8 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8000ee0:	9b01      	ldr	r3, [sp, #4]
 8000ee2:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8000ee6:	d906      	bls.n	8000ef6 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8000ee8:	b92e      	cbnz	r6, 8000ef6 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 8000eea:	b13d      	cbz	r5, 8000efc <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 8000eec:	4912      	ldr	r1, [pc, #72]	; (8000f38 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f001 fc0b 	bl	800270a <VL53L0X_load_tuning_settings>
 8000ef4:	4606      	mov	r6, r0
}
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	b002      	add	sp, #8
 8000efa:	bde0      	pop	{r5, r6, r7, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8000efc:	2204      	movs	r2, #4
 8000efe:	21ff      	movs	r1, #255	; 0xff
 8000f00:	4638      	mov	r0, r7
 8000f02:	f001 ffef 	bl	8002ee4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8000f06:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8000f08:	4605      	mov	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8000f0a:	2170      	movs	r1, #112	; 0x70
 8000f0c:	4638      	mov	r0, r7
 8000f0e:	f001 ffe9 	bl	8002ee4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000f12:	4632      	mov	r2, r6
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8000f14:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	4638      	mov	r0, r7
 8000f1a:	f001 ffe3 	bl	8002ee4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8000f1e:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000f20:	4305      	orrs	r5, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000f22:	4632      	mov	r2, r6
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4638      	mov	r0, r7
 8000f28:	f001 ffdc 	bl	8002ee4 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8000f2c:	b26d      	sxtb	r5, r5
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8000f2e:	4328      	orrs	r0, r5
 8000f30:	b246      	sxtb	r6, r0
 8000f32:	e7e0      	b.n	8000ef6 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f34:	2600      	movs	r6, #0
 8000f36:	e7de      	b.n	8000ef6 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 8000f38:	20000188 	.word	0x20000188

08000f3c <VL53L0X_StartMeasurement>:
{
 8000f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8000f3e:	7c01      	ldrb	r1, [r0, #16]
	switch (DeviceMode) {
 8000f40:	2901      	cmp	r1, #1
{
 8000f42:	4604      	mov	r4, r0
	switch (DeviceMode) {
 8000f44:	d024      	beq.n	8000f90 <VL53L0X_StartMeasurement+0x54>
 8000f46:	2903      	cmp	r1, #3
 8000f48:	d02f      	beq.n	8000faa <VL53L0X_StartMeasurement+0x6e>
 8000f4a:	bb99      	cbnz	r1, 8000fb4 <VL53L0X_StartMeasurement+0x78>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f001 ffc9 	bl	8002ee4 <VL53L0X_WrByte>
		Byte = StartStopByte;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 8000f58:	b198      	cbz	r0, 8000f82 <VL53L0X_StartMeasurement+0x46>
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 8000f5e:	4601      	mov	r1, r0
 8000f60:	f10d 0207 	add.w	r2, sp, #7
 8000f64:	4620      	mov	r0, r4
 8000f66:	f001 ff2e 	bl	8002dc6 <VL53L0X_RdByte>
			} while (((Byte & StartStopByte) == StartStopByte)
 8000f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8000f6e:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 8000f70:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8000f74:	d507      	bpl.n	8000f86 <VL53L0X_StartMeasurement+0x4a>
				&& (Status == VL53L0X_ERROR_NONE)
 8000f76:	b930      	cbnz	r0, 8000f86 <VL53L0X_StartMeasurement+0x4a>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8000f78:	2dc8      	cmp	r5, #200	; 0xc8
 8000f7a:	d1f0      	bne.n	8000f5e <VL53L0X_StartMeasurement+0x22>
				Status = VL53L0X_ERROR_TIME_OUT;
 8000f7c:	f06f 0006 	mvn.w	r0, #6
 8000f80:	e7eb      	b.n	8000f5a <VL53L0X_StartMeasurement+0x1e>
			LoopNb = 0;
 8000f82:	4605      	mov	r5, r0
 8000f84:	e7f1      	b.n	8000f6a <VL53L0X_StartMeasurement+0x2e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8000f86:	2dc8      	cmp	r5, #200	; 0xc8
 8000f88:	bf08      	it	eq
 8000f8a:	f06f 0006 	mvneq.w	r0, #6
 8000f8e:	e7e4      	b.n	8000f5a <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8000f90:	f7ff ff94 	bl	8000ebc <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8000f94:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8000f96:	2100      	movs	r1, #0
 8000f98:	4620      	mov	r0, r4
 8000f9a:	f001 ffa3 	bl	8002ee4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d1db      	bne.n	8000f5a <VL53L0X_StartMeasurement+0x1e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8000fa8:	e7d7      	b.n	8000f5a <VL53L0X_StartMeasurement+0x1e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8000faa:	2101      	movs	r1, #1
 8000fac:	f7ff ff86 	bl	8000ebc <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	e7f0      	b.n	8000f96 <VL53L0X_StartMeasurement+0x5a>
	switch (DeviceMode) {
 8000fb4:	f06f 0007 	mvn.w	r0, #7
 8000fb8:	e7cf      	b.n	8000f5a <VL53L0X_StartMeasurement+0x1e>

08000fba <VL53L0X_PerformSingleMeasurement>:
{
 8000fba:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8000fbc:	7c05      	ldrb	r5, [r0, #16]
{
 8000fbe:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8000fc0:	b125      	cbz	r5, 8000fcc <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f000 fd5c 	bl	8001a80 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8000fc8:	b128      	cbz	r0, 8000fd6 <VL53L0X_PerformSingleMeasurement+0x1c>
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8000fcc:	f7ff ffb6 	bl	8000f3c <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d0f6      	beq.n	8000fc2 <VL53L0X_PerformSingleMeasurement+0x8>
 8000fd4:	e7f9      	b.n	8000fca <VL53L0X_PerformSingleMeasurement+0x10>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d1f7      	bne.n	8000fca <VL53L0X_PerformSingleMeasurement+0x10>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8000fe0:	e7f3      	b.n	8000fca <VL53L0X_PerformSingleMeasurement+0x10>

08000fe2 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8000fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fe4:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8000fe6:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8000fe8:	2201      	movs	r2, #1
 8000fea:	210b      	movs	r1, #11
 8000fec:	4630      	mov	r0, r6
 8000fee:	f001 ff79 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8000ff2:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8000ff4:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8000ff6:	210b      	movs	r1, #11
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	f001 ff73 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8000ffe:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8001002:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8001004:	2113      	movs	r1, #19
 8001006:	4630      	mov	r0, r6
 8001008:	f001 fedd 	bl	8002dc6 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev,
 800100c:	b264      	sxtb	r4, r4
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800100e:	f89d 2007 	ldrb.w	r2, [sp, #7]
		Status |= VL53L0X_RdByte(Dev,
 8001012:	ea44 0300 	orr.w	r3, r4, r0
 8001016:	b258      	sxtb	r0, r3
		LoopCount++;
 8001018:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 800101a:	0753      	lsls	r3, r2, #29
		LoopCount++;
 800101c:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 800101e:	d005      	beq.n	800102c <VL53L0X_ClearInterruptMask+0x4a>
			&& (LoopCount < 3)
 8001020:	2d03      	cmp	r5, #3
 8001022:	d008      	beq.n	8001036 <VL53L0X_ClearInterruptMask+0x54>
			&& (Status == VL53L0X_ERROR_NONE));
 8001024:	2800      	cmp	r0, #0
 8001026:	d0df      	beq.n	8000fe8 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001028:	b002      	add	sp, #8
 800102a:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800102c:	2d03      	cmp	r5, #3
 800102e:	bf08      	it	eq
 8001030:	f06f 000b 	mvneq.w	r0, #11
 8001034:	e7f8      	b.n	8001028 <VL53L0X_ClearInterruptMask+0x46>
 8001036:	f06f 000b 	mvn.w	r0, #11
 800103a:	e7f5      	b.n	8001028 <VL53L0X_ClearInterruptMask+0x46>

0800103c <VL53L0X_PerformSingleRangingMeasurement>:
{
 800103c:	b513      	push	{r0, r1, r4, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800103e:	2300      	movs	r3, #0
 8001040:	7403      	strb	r3, [r0, #16]
{
 8001042:	9101      	str	r1, [sp, #4]
 8001044:	4604      	mov	r4, r0
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8001046:	f7ff ffb8 	bl	8000fba <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 800104a:	9901      	ldr	r1, [sp, #4]
 800104c:	b950      	cbnz	r0, 8001064 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800104e:	4620      	mov	r0, r4
 8001050:	f7ff fe7b 	bl	8000d4a <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8001054:	b930      	cbnz	r0, 8001064 <VL53L0X_PerformSingleRangingMeasurement+0x28>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001056:	4601      	mov	r1, r0
 8001058:	4620      	mov	r0, r4
}
 800105a:	b002      	add	sp, #8
 800105c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001060:	f7ff bfbf 	b.w	8000fe2 <VL53L0X_ClearInterruptMask>
}
 8001064:	b002      	add	sp, #8
 8001066:	bd10      	pop	{r4, pc}

08001068 <VL53L0X_SetGpioConfig.part.0>:
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8001068:	2915      	cmp	r1, #21
VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
 800106a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106e:	4680      	mov	r8, r0
 8001070:	4614      	mov	r4, r2
 8001072:	461d      	mov	r5, r3
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8001074:	d168      	bne.n	8001148 <VL53L0X_SetGpioConfig.part.0+0xe0>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001076:	2201      	movs	r2, #1
 8001078:	21ff      	movs	r1, #255	; 0xff
 800107a:	f001 ff33 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800107e:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001080:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001082:	4611      	mov	r1, r2
 8001084:	4640      	mov	r0, r8
 8001086:	f001 ff2d 	bl	8002ee4 <VL53L0X_WrByte>
 800108a:	4320      	orrs	r0, r4
 800108c:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800108e:	2200      	movs	r2, #0
 8001090:	21ff      	movs	r1, #255	; 0xff
 8001092:	4640      	mov	r0, r8
 8001094:	f001 ff26 	bl	8002ee4 <VL53L0X_WrByte>
 8001098:	4320      	orrs	r0, r4
 800109a:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800109c:	2201      	movs	r2, #1
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	4640      	mov	r0, r8
 80010a2:	f001 ff1f 	bl	8002ee4 <VL53L0X_WrByte>
 80010a6:	4338      	orrs	r0, r7
 80010a8:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80010aa:	2202      	movs	r2, #2
 80010ac:	2185      	movs	r1, #133	; 0x85
 80010ae:	4640      	mov	r0, r8
 80010b0:	f001 ff18 	bl	8002ee4 <VL53L0X_WrByte>
 80010b4:	4330      	orrs	r0, r6
 80010b6:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80010b8:	2204      	movs	r2, #4
 80010ba:	21ff      	movs	r1, #255	; 0xff
 80010bc:	4640      	mov	r0, r8
 80010be:	f001 ff11 	bl	8002ee4 <VL53L0X_WrByte>
 80010c2:	4328      	orrs	r0, r5
 80010c4:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80010c6:	2200      	movs	r2, #0
 80010c8:	21cd      	movs	r1, #205	; 0xcd
 80010ca:	4640      	mov	r0, r8
 80010cc:	f001 ff0a 	bl	8002ee4 <VL53L0X_WrByte>
 80010d0:	4320      	orrs	r0, r4
 80010d2:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80010d4:	2211      	movs	r2, #17
 80010d6:	21cc      	movs	r1, #204	; 0xcc
 80010d8:	4640      	mov	r0, r8
 80010da:	f001 ff03 	bl	8002ee4 <VL53L0X_WrByte>
 80010de:	4338      	orrs	r0, r7
 80010e0:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80010e2:	2207      	movs	r2, #7
 80010e4:	21ff      	movs	r1, #255	; 0xff
 80010e6:	4640      	mov	r0, r8
 80010e8:	f001 fefc 	bl	8002ee4 <VL53L0X_WrByte>
 80010ec:	4330      	orrs	r0, r6
 80010ee:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80010f0:	2200      	movs	r2, #0
 80010f2:	21be      	movs	r1, #190	; 0xbe
 80010f4:	4640      	mov	r0, r8
 80010f6:	f001 fef5 	bl	8002ee4 <VL53L0X_WrByte>
 80010fa:	4328      	orrs	r0, r5
 80010fc:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80010fe:	2206      	movs	r2, #6
 8001100:	21ff      	movs	r1, #255	; 0xff
 8001102:	4640      	mov	r0, r8
 8001104:	f001 feee 	bl	8002ee4 <VL53L0X_WrByte>
 8001108:	4320      	orrs	r0, r4
 800110a:	b247      	sxtb	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800110c:	2209      	movs	r2, #9
 800110e:	21cc      	movs	r1, #204	; 0xcc
 8001110:	4640      	mov	r0, r8
 8001112:	f001 fee7 	bl	8002ee4 <VL53L0X_WrByte>
 8001116:	4338      	orrs	r0, r7
 8001118:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800111a:	2200      	movs	r2, #0
 800111c:	21ff      	movs	r1, #255	; 0xff
 800111e:	4640      	mov	r0, r8
 8001120:	f001 fee0 	bl	8002ee4 <VL53L0X_WrByte>
 8001124:	4330      	orrs	r0, r6
 8001126:	b245      	sxtb	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001128:	2201      	movs	r2, #1
 800112a:	21ff      	movs	r1, #255	; 0xff
 800112c:	4640      	mov	r0, r8
 800112e:	f001 fed9 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001132:	2200      	movs	r2, #0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001134:	4328      	orrs	r0, r5
 8001136:	b244      	sxtb	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001138:	4611      	mov	r1, r2
 800113a:	4640      	mov	r0, r8
 800113c:	f001 fed2 	bl	8002ee4 <VL53L0X_WrByte>
 8001140:	4320      	orrs	r0, r4
 8001142:	b240      	sxtb	r0, r0
}
 8001144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switch (Functionality) {
 8001148:	2a04      	cmp	r2, #4
 800114a:	d817      	bhi.n	800117c <VL53L0X_SetGpioConfig.part.0+0x114>
			Status = VL53L0X_WrByte(Dev,
 800114c:	210a      	movs	r1, #10
 800114e:	f001 fec9 	bl	8002ee4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8001152:	2800      	cmp	r0, #0
 8001154:	d1f6      	bne.n	8001144 <VL53L0X_SetGpioConfig.part.0+0xdc>
				data = (uint8_t)(1 << 4);
 8001156:	2d00      	cmp	r5, #0
			Status = VL53L0X_UpdateByte(Dev,
 8001158:	bf0c      	ite	eq
 800115a:	462b      	moveq	r3, r5
 800115c:	2310      	movne	r3, #16
 800115e:	22ef      	movs	r2, #239	; 0xef
 8001160:	2184      	movs	r1, #132	; 0x84
 8001162:	4640      	mov	r0, r8
 8001164:	f001 fee0 	bl	8002f28 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8001168:	2800      	cmp	r0, #0
 800116a:	d1eb      	bne.n	8001144 <VL53L0X_SetGpioConfig.part.0+0xdc>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800116c:	f888 40da 	strb.w	r4, [r8, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001170:	4601      	mov	r1, r0
 8001172:	4640      	mov	r0, r8
}
 8001174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001178:	f7ff bf33 	b.w	8000fe2 <VL53L0X_ClearInterruptMask>
				Status =
 800117c:	f06f 000a 	mvn.w	r0, #10
 8001180:	e7e0      	b.n	8001144 <VL53L0X_SetGpioConfig.part.0+0xdc>
	...

08001184 <VL53L0X_StaticInit>:
{
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	b094      	sub	sp, #80	; 0x50
 8001188:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800118a:	2240      	movs	r2, #64	; 0x40
 800118c:	2100      	movs	r1, #0
 800118e:	a804      	add	r0, sp, #16
 8001190:	f003 fc9a 	bl	8004ac8 <memset>
	uint16_t tempword = 0;
 8001194:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001196:	2101      	movs	r1, #1
 8001198:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 800119a:	f8ad 3006 	strh.w	r3, [sp, #6]
	uint8_t tempbyte = 0;
 800119e:	f88d 3003 	strb.w	r3, [sp, #3]
	uint8_t isApertureSpads = 0;
 80011a2:	f88d 3004 	strb.w	r3, [sp, #4]
	uint32_t refSpadCount = 0;
 80011a6:	9302      	str	r3, [sp, #8]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 80011a8:	f000 fcb9 	bl	8001b1e <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80011ac:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 80011b0:	2a01      	cmp	r2, #1
 80011b2:	d806      	bhi.n	80011c2 <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80011b4:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 80011b8:	f040 80ad 	bne.w	8001316 <VL53L0X_StaticInit+0x192>
		((ApertureSpads == 1) && (count > 32)) ||
 80011bc:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 80011be:	f240 80ac 	bls.w	800131a <VL53L0X_StaticInit+0x196>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80011c2:	aa01      	add	r2, sp, #4
 80011c4:	a902      	add	r1, sp, #8
 80011c6:	4628      	mov	r0, r5
 80011c8:	f000 fb2d 	bl	8001826 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80011cc:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 80011ce:	2800      	cmp	r0, #0
 80011d0:	f040 809e 	bne.w	8001310 <VL53L0X_StaticInit+0x18c>
		if (UseInternalTuningSettings == 0)
 80011d4:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 80a2 	bne.w	8001322 <VL53L0X_StaticInit+0x19e>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80011de:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80011e2:	4628      	mov	r0, r5
 80011e4:	f001 fa91 	bl	800270a <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 80011e8:	4604      	mov	r4, r0
 80011ea:	2800      	cmp	r0, #0
 80011ec:	f040 8090 	bne.w	8001310 <VL53L0X_StaticInit+0x18c>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80011f0:	4623      	mov	r3, r4
 80011f2:	4621      	mov	r1, r4
 80011f4:	2204      	movs	r2, #4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f7ff ff36 	bl	8001068 <VL53L0X_SetGpioConfig.part.0>
	if (Status == VL53L0X_ERROR_NONE) {
 80011fc:	4604      	mov	r4, r0
 80011fe:	2800      	cmp	r0, #0
 8001200:	f040 8086 	bne.w	8001310 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001204:	2201      	movs	r2, #1
 8001206:	21ff      	movs	r1, #255	; 0xff
 8001208:	4628      	mov	r0, r5
 800120a:	f001 fe6b 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800120e:	f10d 0206 	add.w	r2, sp, #6
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001212:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001214:	2184      	movs	r1, #132	; 0x84
 8001216:	4628      	mov	r0, r5
 8001218:	f001 fe1e 	bl	8002e58 <VL53L0X_RdWord>
 800121c:	4330      	orrs	r0, r6
 800121e:	b246      	sxtb	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001220:	4622      	mov	r2, r4
 8001222:	21ff      	movs	r1, #255	; 0xff
 8001224:	4628      	mov	r0, r5
 8001226:	f001 fe5d 	bl	8002ee4 <VL53L0X_WrByte>
 800122a:	4330      	orrs	r0, r6
 800122c:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 800122e:	2c00      	cmp	r4, #0
 8001230:	d16e      	bne.n	8001310 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001232:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800123c:	a904      	add	r1, sp, #16
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff fcca 	bl	8000bd8 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8001244:	4604      	mov	r4, r0
 8001246:	2800      	cmp	r0, #0
 8001248:	d162      	bne.n	8001310 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800124a:	f10d 0103 	add.w	r1, sp, #3
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff fb34 	bl	80008bc <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8001254:	4604      	mov	r4, r0
 8001256:	2800      	cmp	r0, #0
 8001258:	d15a      	bne.n	8001310 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800125a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800125e:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001262:	ae04      	add	r6, sp, #16
 8001264:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001266:	f105 0410 	add.w	r4, r5, #16
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 800127c:	f10d 0203 	add.w	r2, sp, #3
 8001280:	2101      	movs	r1, #1
 8001282:	4628      	mov	r0, r5
 8001284:	f001 fd9f 	bl	8002dc6 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8001288:	4604      	mov	r4, r0
 800128a:	2800      	cmp	r0, #0
 800128c:	d140      	bne.n	8001310 <VL53L0X_StaticInit+0x18c>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800128e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001292:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001296:	4602      	mov	r2, r0
 8001298:	4601      	mov	r1, r0
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff fb20 	bl	80008e0 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80012a0:	4604      	mov	r4, r0
 80012a2:	bba8      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80012a4:	4602      	mov	r2, r0
 80012a6:	2102      	movs	r1, #2
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff fb19 	bl	80008e0 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 80012ae:	4604      	mov	r4, r0
 80012b0:	bb70      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80012b2:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80012b4:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80012b6:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80012ba:	f10d 0205 	add.w	r2, sp, #5
 80012be:	4628      	mov	r0, r5
 80012c0:	f001 f93c 	bl	800253c <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80012c4:	4604      	mov	r4, r0
 80012c6:	bb18      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012cc:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80012d0:	f10d 0205 	add.w	r2, sp, #5
 80012d4:	2101      	movs	r1, #1
 80012d6:	4628      	mov	r0, r5
 80012d8:	f001 f930 	bl	800253c <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 80012dc:	4604      	mov	r4, r0
 80012de:	b9b8      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80012e4:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 80012e8:	aa03      	add	r2, sp, #12
 80012ea:	2103      	movs	r1, #3
 80012ec:	4628      	mov	r0, r5
 80012ee:	f7ff fb66 	bl	80009be <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 80012f2:	4604      	mov	r4, r0
 80012f4:	b960      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80012f6:	9b03      	ldr	r3, [sp, #12]
 80012f8:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 80012fc:	aa03      	add	r2, sp, #12
 80012fe:	2104      	movs	r1, #4
 8001300:	4628      	mov	r0, r5
 8001302:	f7ff fb5c 	bl	80009be <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8001306:	4604      	mov	r4, r0
 8001308:	b910      	cbnz	r0, 8001310 <VL53L0X_StaticInit+0x18c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800130a:	9b03      	ldr	r3, [sp, #12]
 800130c:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8001310:	4620      	mov	r0, r4
 8001312:	b014      	add	sp, #80	; 0x50
 8001314:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8001316:	290c      	cmp	r1, #12
 8001318:	e751      	b.n	80011be <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800131a:	4628      	mov	r0, r5
 800131c:	f000 f910 	bl	8001540 <VL53L0X_set_reference_spads>
 8001320:	e754      	b.n	80011cc <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8001322:	4901      	ldr	r1, [pc, #4]	; (8001328 <VL53L0X_StaticInit+0x1a4>)
 8001324:	e75d      	b.n	80011e2 <VL53L0X_StaticInit+0x5e>
 8001326:	bf00      	nop
 8001328:	2000033e 	.word	0x2000033e

0800132c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800132c:	b513      	push	{r0, r1, r4, lr}
 800132e:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8001330:	f10d 0207 	add.w	r2, sp, #7
 8001334:	2113      	movs	r1, #19
 8001336:	f001 fd46 	bl	8002dc6 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 800133a:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800133e:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8001342:	f003 0207 	and.w	r2, r3, #7

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001346:	bf18      	it	ne
 8001348:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 800134c:	6022      	str	r2, [r4, #0]
}
 800134e:	b002      	add	sp, #8
 8001350:	bd10      	pop	{r4, pc}

08001352 <VL53L0X_GetMeasurementDataReady>:
{
 8001352:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8001354:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8001358:	2b04      	cmp	r3, #4
{
 800135a:	460c      	mov	r4, r1
	if (InterruptConfig ==
 800135c:	d10b      	bne.n	8001376 <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800135e:	a901      	add	r1, sp, #4
 8001360:	f7ff ffe4 	bl	800132c <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8001364:	9b01      	ldr	r3, [sp, #4]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d101      	bne.n	800136e <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	7023      	strb	r3, [r4, #0]
}
 8001372:	b002      	add	sp, #8
 8001374:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8001376:	aa01      	add	r2, sp, #4
 8001378:	2114      	movs	r1, #20
 800137a:	f001 fd24 	bl	8002dc6 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 800137e:	2800      	cmp	r0, #0
 8001380:	d1f7      	bne.n	8001372 <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 8001382:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001386:	07db      	lsls	r3, r3, #31
 8001388:	d4ef      	bmi.n	800136a <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 800138a:	7020      	strb	r0, [r4, #0]
 800138c:	e7f1      	b.n	8001372 <VL53L0X_GetMeasurementDataReady+0x20>

0800138e <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800138e:	f000 ba4a 	b.w	8001826 <VL53L0X_perform_ref_spad_management>

08001392 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001392:	b513      	push	{r0, r1, r4, lr}
 8001394:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8001396:	f10d 0206 	add.w	r2, sp, #6
 800139a:	2128      	movs	r1, #40	; 0x28
 800139c:	f001 fd5c 	bl	8002e58 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80013a0:	b978      	cbnz	r0, 80013c2 <VL53L0X_get_offset_calibration_data_micro_meter+0x30>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80013a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80013a6:	f3c2 030b 	ubfx	r3, r2, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80013aa:	f412 6f00 	tst.w	r2, #2048	; 0x800
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80013ae:	bf18      	it	ne
 80013b0:	f5a3 5380 	subne.w	r3, r3, #4096	; 0x1000
 80013b4:	f04f 02fa 	mov.w	r2, #250	; 0xfa
					* 250;
 80013b8:	bf14      	ite	ne
 80013ba:	fb13 f302 	smulbbne	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80013be:	4353      	muleq	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80013c0:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 80013c2:	b002      	add	sp, #8
 80013c4:	bd10      	pop	{r4, pc}

080013c6 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80013c6:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 80013c8:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	*next = -1;
 80013cc:	f04f 34ff 	mov.w	r4, #4294967295
 80013d0:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80013d2:	4666      	mov	r6, ip
	fineOffset = curr % cSpadsPerByte;
 80013d4:	f002 0407 	and.w	r4, r2, #7
	uint8_t success = 0;
 80013d8:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80013da:	428e      	cmp	r6, r1
 80013dc:	d200      	bcs.n	80013e0 <get_next_good_spad+0x1a>
 80013de:	b107      	cbz	r7, 80013e2 <get_next_good_spad+0x1c>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dataByte = goodSpadArray[coarseIndex];
 80013e2:	5d82      	ldrb	r2, [r0, r6]
		if (coarseIndex == startIndex) {
 80013e4:	4566      	cmp	r6, ip
			dataByte >>= fineOffset;
 80013e6:	bf03      	ittte	eq
 80013e8:	4122      	asreq	r2, r4
 80013ea:	b2d2      	uxtbeq	r2, r2
			fineIndex = fineOffset;
 80013ec:	4625      	moveq	r5, r4
		fineIndex = 0;
 80013ee:	463d      	movne	r5, r7
			if ((dataByte & 0x1) == 1) {
 80013f0:	f012 0701 	ands.w	r7, r2, #1
 80013f4:	d004      	beq.n	8001400 <get_next_good_spad+0x3a>
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80013f6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 80013fa:	601d      	str	r5, [r3, #0]
				coarseIndex++) {
 80013fc:	3601      	adds	r6, #1
 80013fe:	e7ec      	b.n	80013da <get_next_good_spad+0x14>
			fineIndex++;
 8001400:	3501      	adds	r5, #1
		while (fineIndex < cSpadsPerByte) {
 8001402:	2d08      	cmp	r5, #8
			dataByte >>= 1;
 8001404:	ea4f 0252 	mov.w	r2, r2, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8001408:	d1f2      	bne.n	80013f0 <get_next_good_spad+0x2a>
 800140a:	e7f7      	b.n	80013fc <get_next_good_spad+0x36>

0800140c <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 800140e:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8001410:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8001414:	3800      	subs	r0, #0
 8001416:	bf18      	it	ne
 8001418:	2001      	movne	r0, #1
 800141a:	4770      	bx	lr
 800141c:	20000434 	.word	0x20000434

08001420 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8001420:	b530      	push	{r4, r5, lr}
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8001422:	ebb1 0fd2 	cmp.w	r1, r2, lsr #3
	coarseIndex = spadIndex / cSpadsPerByte;
 8001426:	ea4f 04d2 	mov.w	r4, r2, lsr #3
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800142a:	bf88      	it	hi
 800142c:	2301      	movhi	r3, #1
	fineIndex = spadIndex % cSpadsPerByte;
 800142e:	f002 0507 	and.w	r5, r2, #7
		spadArray[coarseIndex] |= (1 << fineIndex);
 8001432:	bf81      	itttt	hi
 8001434:	fa03 f205 	lslhi.w	r2, r3, r5
 8001438:	5d03      	ldrbhi	r3, [r0, r4]
 800143a:	4313      	orrhi	r3, r2
 800143c:	5503      	strbhi	r3, [r0, r4]
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800143e:	bf94      	ite	ls
 8001440:	f06f 0031 	mvnls.w	r0, #49	; 0x31
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001444:	2000      	movhi	r0, #0

	return status;
}
 8001446:	bd30      	pop	{r4, r5, pc}

08001448 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8001448:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800144a:	2306      	movs	r3, #6
 800144c:	21b0      	movs	r1, #176	; 0xb0
 800144e:	f001 bccf 	b.w	8002df0 <VL53L0X_WriteMulti>

08001452 <get_ref_spad_map>:
				refSpadArray, 6);
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8001452:	460a      	mov	r2, r1
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8001454:	2306      	movs	r3, #6
 8001456:	21b0      	movs	r1, #176	; 0xb0
 8001458:	f001 bce8 	b.w	8002e2c <VL53L0X_ReadMulti>

0800145c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001460:	b085      	sub	sp, #20
 8001462:	4680      	mov	r8, r0
 8001464:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001466:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8001468:	9601      	str	r6, [sp, #4]
{
 800146a:	468a      	mov	sl, r1
 800146c:	4693      	mov	fp, r2
 800146e:	461c      	mov	r4, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8001470:	f04f 0900 	mov.w	r9, #0
 8001474:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001476:	4599      	cmp	r9, r3
 8001478:	d113      	bne.n	80014a2 <enable_ref_spads+0x46>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800147a:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 800147c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800147e:	601e      	str	r6, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8001480:	b960      	cbnz	r0, 800149c <enable_ref_spads+0x40>
		status = set_ref_spad_map(Dev, spadArray);
 8001482:	4621      	mov	r1, r4
 8001484:	4640      	mov	r0, r8
 8001486:	f7ff ffdf 	bl	8001448 <set_ref_spad_map>


	if (status == VL53L0X_ERROR_NONE) {
 800148a:	b938      	cbnz	r0, 800149c <enable_ref_spads+0x40>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800148c:	a902      	add	r1, sp, #8
 800148e:	4640      	mov	r0, r8
 8001490:	f7ff ffdf 	bl	8001452 <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8001494:	4425      	add	r5, r4
 8001496:	ab02      	add	r3, sp, #8
 8001498:	42ac      	cmp	r4, r5
 800149a:	d11c      	bne.n	80014d6 <enable_ref_spads+0x7a>
			}
			i++;
		}
	}
	return status;
}
 800149c:	b005      	add	sp, #20
 800149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80014a2:	ab01      	add	r3, sp, #4
 80014a4:	4632      	mov	r2, r6
 80014a6:	4629      	mov	r1, r5
 80014a8:	4658      	mov	r0, fp
 80014aa:	f7ff ff8c 	bl	80013c6 <get_next_good_spad>
		if (nextGoodSpad == -1) {
 80014ae:	9f01      	ldr	r7, [sp, #4]
 80014b0:	1c7b      	adds	r3, r7, #1
 80014b2:	d00d      	beq.n	80014d0 <enable_ref_spads+0x74>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80014b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80014b6:	18f8      	adds	r0, r7, r3
 80014b8:	f7ff ffa8 	bl	800140c <is_aperture>
 80014bc:	4550      	cmp	r0, sl
 80014be:	d107      	bne.n	80014d0 <enable_ref_spads+0x74>
		enable_spad_bit(spadArray, size, currentSpad);
 80014c0:	463a      	mov	r2, r7
 80014c2:	4620      	mov	r0, r4
 80014c4:	f7ff ffac 	bl	8001420 <enable_spad_bit>
		currentSpad++;
 80014c8:	1c7e      	adds	r6, r7, #1
	for (index = 0; index < spadCount; index++) {
 80014ca:	f109 0901 	add.w	r9, r9, #1
 80014ce:	e7d1      	b.n	8001474 <enable_ref_spads+0x18>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80014d0:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80014d4:	e7d2      	b.n	800147c <enable_ref_spads+0x20>
			if (spadArray[i] != checkSpadArray[i]) {
 80014d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014de:	4291      	cmp	r1, r2
 80014e0:	d0da      	beq.n	8001498 <enable_ref_spads+0x3c>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80014e2:	f06f 0031 	mvn.w	r0, #49	; 0x31
 80014e6:	e7d9      	b.n	800149c <enable_ref_spads+0x40>

080014e8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80014e8:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 80014ea:	22c0      	movs	r2, #192	; 0xc0
{
 80014ec:	b088      	sub	sp, #32
 80014ee:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 80014f0:	2101      	movs	r1, #1
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80014f2:	f890 4130 	ldrb.w	r4, [r0, #304]	; 0x130
{
 80014f6:	4605      	mov	r5, r0
		status = VL53L0X_WrByte(Dev,
 80014f8:	f001 fcf4 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80014fc:	b9f0      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80014fe:	a901      	add	r1, sp, #4
 8001500:	4628      	mov	r0, r5
 8001502:	f7ff fd9b 	bl	800103c <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8001506:	b9c8      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001508:	2201      	movs	r2, #1
 800150a:	21ff      	movs	r1, #255	; 0xff
 800150c:	4628      	mov	r0, r5
 800150e:	f001 fce9 	bl	8002ee4 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8001512:	b998      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8001514:	4632      	mov	r2, r6
 8001516:	21b6      	movs	r1, #182	; 0xb6
 8001518:	4628      	mov	r0, r5
 800151a:	f001 fc9d 	bl	8002e58 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800151e:	b968      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001520:	4602      	mov	r2, r0
 8001522:	21ff      	movs	r1, #255	; 0xff
 8001524:	4628      	mov	r0, r5
 8001526:	f001 fcdd 	bl	8002ee4 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 800152a:	b938      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800152c:	4622      	mov	r2, r4
 800152e:	2101      	movs	r1, #1
 8001530:	4628      	mov	r0, r5
 8001532:	f001 fcd7 	bl	8002ee4 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8001536:	b908      	cbnz	r0, 800153c <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8001538:	f885 4130 	strb.w	r4, [r5, #304]	; 0x130
	}

	return status;
}
 800153c:	b008      	add	sp, #32
 800153e:	bd70      	pop	{r4, r5, r6, pc}

08001540 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8001540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001542:	460f      	mov	r7, r1
 8001544:	b089      	sub	sp, #36	; 0x24
 8001546:	4616      	mov	r6, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001548:	21ff      	movs	r1, #255	; 0xff
 800154a:	2201      	movs	r2, #1
{
 800154c:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800154e:	f001 fcc9 	bl	8002ee4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001552:	4602      	mov	r2, r0
 8001554:	b9a8      	cbnz	r0, 8001582 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8001556:	214f      	movs	r1, #79	; 0x4f
 8001558:	4620      	mov	r0, r4
 800155a:	f001 fcc3 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800155e:	b980      	cbnz	r0, 8001582 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8001560:	222c      	movs	r2, #44	; 0x2c
 8001562:	214e      	movs	r1, #78	; 0x4e
 8001564:	4620      	mov	r0, r4
 8001566:	f001 fcbd 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800156a:	4602      	mov	r2, r0
 800156c:	b948      	cbnz	r0, 8001582 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800156e:	21ff      	movs	r1, #255	; 0xff
 8001570:	4620      	mov	r0, r4
 8001572:	f001 fcb7 	bl	8002ee4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001576:	b920      	cbnz	r0, 8001582 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8001578:	22b4      	movs	r2, #180	; 0xb4
 800157a:	21b6      	movs	r1, #182	; 0xb6
 800157c:	4620      	mov	r0, r4
 800157e:	f001 fcb1 	bl	8002ee4 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8001582:	2500      	movs	r5, #0
 8001584:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8001588:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128

	if (isApertureSpads) {
 800158c:	b9de      	cbnz	r6, 80015c6 <VL53L0X_set_reference_spads+0x86>
	uint32_t currentSpadIndex = 0;
 800158e:	4635      	mov	r5, r6
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 8001590:	ab07      	add	r3, sp, #28
 8001592:	22b4      	movs	r2, #180	; 0xb4
 8001594:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8001598:	2306      	movs	r3, #6
 800159a:	e9cd 3200 	strd	r3, r2, [sp]
 800159e:	9502      	str	r5, [sp, #8]
 80015a0:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80015a4:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 80015a8:	4631      	mov	r1, r6
 80015aa:	4620      	mov	r0, r4
 80015ac:	f7ff ff56 	bl	800145c <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80015b0:	b930      	cbnz	r0, 80015c0 <VL53L0X_set_reference_spads+0x80>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80015b2:	2301      	movs	r3, #1
 80015b4:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80015b8:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80015bc:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 80015c0:	b009      	add	sp, #36	; 0x24
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			currentSpadIndex++;
 80015c4:	3501      	adds	r5, #1
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80015c6:	f105 00b4 	add.w	r0, r5, #180	; 0xb4
 80015ca:	f7ff ff1f 	bl	800140c <is_aperture>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	d1de      	bne.n	8001590 <VL53L0X_set_reference_spads+0x50>
 80015d2:	2d2c      	cmp	r5, #44	; 0x2c
 80015d4:	d1f6      	bne.n	80015c4 <VL53L0X_set_reference_spads+0x84>
 80015d6:	e7db      	b.n	8001590 <VL53L0X_set_reference_spads+0x50>

080015d8 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80015d8:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80015da:	f041 0201 	orr.w	r2, r1, #1
 80015de:	2100      	movs	r1, #0
{
 80015e0:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80015e2:	f001 fc7f 	bl	8002ee4 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80015e6:	b978      	cbnz	r0, 8001608 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80015e8:	4620      	mov	r0, r4
 80015ea:	f000 fa49 	bl	8001a80 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80015ee:	b958      	cbnz	r0, 8001608 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80015f0:	4601      	mov	r1, r0
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff fcf5 	bl	8000fe2 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 80015f8:	b930      	cbnz	r0, 8001608 <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80015fa:	4602      	mov	r2, r0
 80015fc:	4601      	mov	r1, r0
 80015fe:	4620      	mov	r0, r4

	return Status;
}
 8001600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8001604:	f001 bc6e 	b.w	8002ee4 <VL53L0X_WrByte>
}
 8001608:	bd10      	pop	{r4, pc}

0800160a <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800160a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 800160e:	2400      	movs	r4, #0
{
 8001610:	4689      	mov	r9, r1
 8001612:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001614:	21ff      	movs	r1, #255	; 0xff
 8001616:	2201      	movs	r2, #1
{
 8001618:	4606      	mov	r6, r0
 800161a:	461f      	mov	r7, r3
	uint8_t PhaseCalint = 0;
 800161c:	f88d 4007 	strb.w	r4, [sp, #7]
{
 8001620:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8001624:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001628:	f001 fc5c 	bl	8002ee4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800162c:	4622      	mov	r2, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800162e:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001630:	4621      	mov	r1, r4
 8001632:	4630      	mov	r0, r6
 8001634:	f001 fc56 	bl	8002ee4 <VL53L0X_WrByte>
 8001638:	4328      	orrs	r0, r5
 800163a:	b245      	sxtb	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800163c:	4622      	mov	r2, r4
 800163e:	21ff      	movs	r1, #255	; 0xff
 8001640:	4630      	mov	r0, r6
 8001642:	f001 fc4f 	bl	8002ee4 <VL53L0X_WrByte>
 8001646:	4328      	orrs	r0, r5
 8001648:	b244      	sxtb	r4, r0

	if (read_not_write) {
 800164a:	f1b9 0f00 	cmp.w	r9, #0
 800164e:	d032      	beq.n	80016b6 <VL53L0X_ref_calibration_io+0xac>
		if (vhv_enable)
 8001650:	f1bb 0f00 	cmp.w	fp, #0
 8001654:	d006      	beq.n	8001664 <VL53L0X_ref_calibration_io+0x5a>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8001656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001658:	21cb      	movs	r1, #203	; 0xcb
 800165a:	4630      	mov	r0, r6
 800165c:	f001 fbb3 	bl	8002dc6 <VL53L0X_RdByte>
 8001660:	4320      	orrs	r0, r4
 8001662:	b244      	sxtb	r4, r0
		if (phase_enable)
 8001664:	f1ba 0f00 	cmp.w	sl, #0
 8001668:	d007      	beq.n	800167a <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800166a:	f10d 0207 	add.w	r2, sp, #7
 800166e:	21ee      	movs	r1, #238	; 0xee
 8001670:	4630      	mov	r0, r6
 8001672:	f001 fba8 	bl	8002dc6 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8001676:	4320      	orrs	r0, r4
 8001678:	b244      	sxtb	r4, r0
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800167a:	2201      	movs	r2, #1
 800167c:	21ff      	movs	r1, #255	; 0xff
 800167e:	4630      	mov	r0, r6
 8001680:	f001 fc30 	bl	8002ee4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001684:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001686:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001688:	2100      	movs	r1, #0
 800168a:	4630      	mov	r0, r6
 800168c:	f001 fc2a 	bl	8002ee4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001690:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001692:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001694:	2200      	movs	r2, #0
 8001696:	21ff      	movs	r1, #255	; 0xff
 8001698:	4630      	mov	r0, r6
 800169a:	f001 fc23 	bl	8002ee4 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800169e:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80016a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80016a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80016a6:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80016a8:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 80016ac:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80016ae:	7013      	strb	r3, [r2, #0]
}
 80016b0:	b003      	add	sp, #12
 80016b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 80016b6:	f1bb 0f00 	cmp.w	fp, #0
 80016ba:	d006      	beq.n	80016ca <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80016bc:	4642      	mov	r2, r8
 80016be:	21cb      	movs	r1, #203	; 0xcb
 80016c0:	4630      	mov	r0, r6
 80016c2:	f001 fc0f 	bl	8002ee4 <VL53L0X_WrByte>
 80016c6:	4320      	orrs	r0, r4
 80016c8:	b244      	sxtb	r4, r0
		if (phase_enable)
 80016ca:	f1ba 0f00 	cmp.w	sl, #0
 80016ce:	d0d4      	beq.n	800167a <VL53L0X_ref_calibration_io+0x70>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80016d0:	463b      	mov	r3, r7
 80016d2:	2280      	movs	r2, #128	; 0x80
 80016d4:	21ee      	movs	r1, #238	; 0xee
 80016d6:	4630      	mov	r0, r6
 80016d8:	f001 fc26 	bl	8002f28 <VL53L0X_UpdateByte>
 80016dc:	e7cb      	b.n	8001676 <VL53L0X_ref_calibration_io+0x6c>

080016de <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80016de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	4691      	mov	r9, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80016e6:	2200      	movs	r2, #0
{
 80016e8:	4605      	mov	r5, r0
 80016ea:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80016ec:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80016f0:	461e      	mov	r6, r3
 80016f2:	b31b      	cbz	r3, 800173c <VL53L0X_perform_vhv_calibration+0x5e>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80016f4:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80016f8:	2201      	movs	r2, #1
 80016fa:	4611      	mov	r1, r2
 80016fc:	4628      	mov	r0, r5
 80016fe:	f001 fbf1 	bl	8002ee4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001702:	4604      	mov	r4, r0
 8001704:	bb58      	cbnz	r0, 800175e <VL53L0X_perform_vhv_calibration+0x80>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	4628      	mov	r0, r5
 800170a:	f7ff ff65 	bl	80015d8 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800170e:	4604      	mov	r4, r0
 8001710:	bb28      	cbnz	r0, 800175e <VL53L0X_perform_vhv_calibration+0x80>
 8001712:	f1b9 0f01 	cmp.w	r9, #1
 8001716:	d113      	bne.n	8001740 <VL53L0X_perform_vhv_calibration+0x62>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8001718:	f10d 0317 	add.w	r3, sp, #23
 800171c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8001720:	e9cd 8300 	strd	r8, r3, [sp]
 8001724:	4602      	mov	r2, r0
 8001726:	4603      	mov	r3, r0
 8001728:	4649      	mov	r1, r9
 800172a:	4628      	mov	r0, r5
 800172c:	f7ff ff6d 	bl	800160a <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8001730:	b140      	cbz	r0, 8001744 <VL53L0X_perform_vhv_calibration+0x66>
		*pVhvSettings = 0;
 8001732:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 8001734:	4620      	mov	r0, r4
 8001736:	b007      	add	sp, #28
 8001738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 800173c:	461f      	mov	r7, r3
 800173e:	e7db      	b.n	80016f8 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8001740:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8001744:	2e00      	cmp	r6, #0
 8001746:	d0f5      	beq.n	8001734 <VL53L0X_perform_vhv_calibration+0x56>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001748:	463a      	mov	r2, r7
 800174a:	2101      	movs	r1, #1
 800174c:	4628      	mov	r0, r5
 800174e:	f001 fbc9 	bl	8002ee4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 8001752:	4604      	mov	r4, r0
 8001754:	2800      	cmp	r0, #0
 8001756:	d1ed      	bne.n	8001734 <VL53L0X_perform_vhv_calibration+0x56>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8001758:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 800175c:	e7ea      	b.n	8001734 <VL53L0X_perform_vhv_calibration+0x56>
		*pVhvSettings = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f888 3000 	strb.w	r3, [r8]
 8001764:	4620      	mov	r0, r4
 8001766:	e7e4      	b.n	8001732 <VL53L0X_perform_vhv_calibration+0x54>

08001768 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8001768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800176c:	4605      	mov	r5, r0
 800176e:	b087      	sub	sp, #28
 8001770:	4688      	mov	r8, r1
 8001772:	4691      	mov	r9, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8001774:	461e      	mov	r6, r3
 8001776:	b323      	cbz	r3, 80017c2 <VL53L0X_perform_phase_calibration+0x5a>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8001778:	f890 7130 	ldrb.w	r7, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800177c:	2202      	movs	r2, #2
 800177e:	2101      	movs	r1, #1
 8001780:	4628      	mov	r0, r5
 8001782:	f001 fbaf 	bl	8002ee4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001786:	4604      	mov	r4, r0
 8001788:	bb60      	cbnz	r0, 80017e4 <VL53L0X_perform_phase_calibration+0x7c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800178a:	4601      	mov	r1, r0
 800178c:	4628      	mov	r0, r5
 800178e:	f7ff ff23 	bl	80015d8 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8001792:	4604      	mov	r4, r0
 8001794:	bb30      	cbnz	r0, 80017e4 <VL53L0X_perform_phase_calibration+0x7c>
 8001796:	f1b9 0f01 	cmp.w	r9, #1
 800179a:	d114      	bne.n	80017c6 <VL53L0X_perform_phase_calibration+0x5e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800179c:	f10d 0317 	add.w	r3, sp, #23
 80017a0:	e9cd 0902 	strd	r0, r9, [sp, #8]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	4602      	mov	r2, r0
 80017a8:	4603      	mov	r3, r0
 80017aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80017ae:	4649      	mov	r1, r9
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff ff2a 	bl	800160a <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80017b6:	b140      	cbz	r0, 80017ca <VL53L0X_perform_phase_calibration+0x62>
		*pPhaseCal = 0;
 80017b8:	4604      	mov	r4, r0
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);

	}

	return Status;
}
 80017ba:	4620      	mov	r0, r4
 80017bc:	b007      	add	sp, #28
 80017be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t SequenceConfig = 0;
 80017c2:	461f      	mov	r7, r3
 80017c4:	e7da      	b.n	800177c <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 80017c6:	f888 0000 	strb.w	r0, [r8]
	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80017ca:	2e00      	cmp	r6, #0
 80017cc:	d0f5      	beq.n	80017ba <VL53L0X_perform_phase_calibration+0x52>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80017ce:	463a      	mov	r2, r7
 80017d0:	2101      	movs	r1, #1
 80017d2:	4628      	mov	r0, r5
 80017d4:	f001 fb86 	bl	8002ee4 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE)
 80017d8:	4604      	mov	r4, r0
 80017da:	2800      	cmp	r0, #0
 80017dc:	d1ed      	bne.n	80017ba <VL53L0X_perform_phase_calibration+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80017de:	f885 7130 	strb.w	r7, [r5, #304]	; 0x130
 80017e2:	e7ea      	b.n	80017ba <VL53L0X_perform_phase_calibration+0x52>
		*pPhaseCal = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f888 3000 	strb.w	r3, [r8]
 80017ea:	4620      	mov	r0, r4
 80017ec:	e7e4      	b.n	80017b8 <VL53L0X_perform_phase_calibration+0x50>

080017ee <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80017ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017f0:	4615      	mov	r5, r2
 80017f2:	461a      	mov	r2, r3

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 80017f4:	2300      	movs	r3, #0
 80017f6:	9201      	str	r2, [sp, #4]
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80017f8:	f890 6130 	ldrb.w	r6, [r0, #304]	; 0x130
{
 80017fc:	4604      	mov	r4, r0
	Status = VL53L0X_perform_vhv_calibration(
 80017fe:	f7ff ff6e 	bl	80016de <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001802:	9a01      	ldr	r2, [sp, #4]
 8001804:	b968      	cbnz	r0, 8001822 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 8001806:	4603      	mov	r3, r0
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ffac 	bl	8001768 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8001810:	b938      	cbnz	r0, 8001822 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001812:	4632      	mov	r2, r6
 8001814:	2101      	movs	r1, #1
 8001816:	4620      	mov	r0, r4
 8001818:	f001 fb64 	bl	8002ee4 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800181c:	b908      	cbnz	r0, 8001822 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800181e:	f884 6130 	strb.w	r6, [r4, #304]	; 0x130

	}

	return Status;
}
 8001822:	b002      	add	sp, #8
 8001824:	bd70      	pop	{r4, r5, r6, pc}

08001826 <VL53L0X_perform_ref_spad_management>:
{
 8001826:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSpadIndex = 0;
 800182a:	2300      	movs	r3, #0
{
 800182c:	b093      	sub	sp, #76	; 0x4c
 800182e:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8001832:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
 8001836:	f8a0 3128 	strh.w	r3, [r0, #296]	; 0x128
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800183a:	2201      	movs	r2, #1
 800183c:	21ff      	movs	r1, #255	; 0xff
	int32_t nextGoodSpad = 0;
 800183e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8001842:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	uint8_t VhvSettings = 0;
 8001846:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
{
 800184a:	4605      	mov	r5, r0
	uint8_t PhaseCal = 0;
 800184c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001850:	f001 fb48 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8001854:	4604      	mov	r4, r0
 8001856:	2800      	cmp	r0, #0
 8001858:	f040 80e8 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 800185c:	4602      	mov	r2, r0
 800185e:	214f      	movs	r1, #79	; 0x4f
 8001860:	4628      	mov	r0, r5
 8001862:	f001 fb3f 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8001866:	4604      	mov	r4, r0
 8001868:	2800      	cmp	r0, #0
 800186a:	f040 80df 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 800186e:	222c      	movs	r2, #44	; 0x2c
 8001870:	214e      	movs	r1, #78	; 0x4e
 8001872:	4628      	mov	r0, r5
 8001874:	f001 fb36 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8001878:	4604      	mov	r4, r0
 800187a:	2800      	cmp	r0, #0
 800187c:	f040 80d6 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001880:	4602      	mov	r2, r0
 8001882:	21ff      	movs	r1, #255	; 0xff
 8001884:	4628      	mov	r0, r5
 8001886:	f001 fb2d 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800188a:	4604      	mov	r4, r0
 800188c:	2800      	cmp	r0, #0
 800188e:	f040 80cd 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 8001892:	22b4      	movs	r2, #180	; 0xb4
 8001894:	21b6      	movs	r1, #182	; 0xb6
 8001896:	4628      	mov	r0, r5
 8001898:	f001 fb24 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800189c:	4604      	mov	r4, r0
 800189e:	2800      	cmp	r0, #0
 80018a0:	f040 80c4 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_WrByte(Dev,
 80018a4:	4602      	mov	r2, r0
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4628      	mov	r0, r5
 80018aa:	f001 fb1b 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 80018ae:	4604      	mov	r4, r0
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f040 80bb 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80018b6:	4603      	mov	r3, r0
 80018b8:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 80018bc:	a90d      	add	r1, sp, #52	; 0x34
 80018be:	4628      	mov	r0, r5
 80018c0:	f7ff ff95 	bl	80017ee <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 80018c4:	4604      	mov	r4, r0
 80018c6:	2800      	cmp	r0, #0
 80018c8:	f040 80b0 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = enable_ref_spads(Dev,
 80018cc:	2303      	movs	r3, #3
 80018ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80018d2:	21b4      	movs	r1, #180	; 0xb4
 80018d4:	2306      	movs	r3, #6
					Dev->Data.SpadData.RefGoodSpadMap,
 80018d6:	f505 7a95 	add.w	sl, r5, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80018da:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80018de:	ae0e      	add	r6, sp, #56	; 0x38
 80018e0:	e9cd 3100 	strd	r3, r1, [sp]
		lastSpadIndex = currentSpadIndex;
 80018e4:	900e      	str	r0, [sp, #56]	; 0x38
		Status = enable_ref_spads(Dev,
 80018e6:	4601      	mov	r1, r0
 80018e8:	9604      	str	r6, [sp, #16]
 80018ea:	464b      	mov	r3, r9
 80018ec:	4652      	mov	r2, sl
 80018ee:	4628      	mov	r0, r5
 80018f0:	f7ff fdb4 	bl	800145c <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80018f4:	4604      	mov	r4, r0
 80018f6:	2800      	cmp	r0, #0
 80018f8:	f040 8098 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
		Status = perform_ref_signal_measurement(Dev,
 80018fc:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8001900:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 8001902:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 8001906:	f7ff fdef 	bl	80014e8 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 800190a:	4604      	mov	r4, r0
 800190c:	2800      	cmp	r0, #0
 800190e:	f040 808d 	bne.w	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
 8001912:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8001916:	4543      	cmp	r3, r8
 8001918:	f240 80aa 	bls.w	8001a70 <VL53L0X_perform_ref_spad_management+0x24a>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800191c:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
 8001920:	f8a5 0128 	strh.w	r0, [r5, #296]	; 0x128
			while ((is_aperture(startSelect + currentSpadIndex)
 8001924:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
 8001928:	f7ff fd70 	bl	800140c <is_aperture>
 800192c:	b180      	cbz	r0, 8001950 <VL53L0X_perform_ref_spad_management+0x12a>
			Status = enable_ref_spads(Dev,
 800192e:	2306      	movs	r3, #6
 8001930:	22b4      	movs	r2, #180	; 0xb4
 8001932:	2703      	movs	r7, #3
 8001934:	e9cd 3200 	strd	r3, r2, [sp]
 8001938:	e9cd b702 	strd	fp, r7, [sp, #8]
 800193c:	9604      	str	r6, [sp, #16]
 800193e:	464b      	mov	r3, r9
 8001940:	4652      	mov	r2, sl
 8001942:	2101      	movs	r1, #1
 8001944:	4628      	mov	r0, r5
 8001946:	f7ff fd89 	bl	800145c <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 800194a:	b138      	cbz	r0, 800195c <VL53L0X_perform_ref_spad_management+0x136>
 800194c:	4604      	mov	r4, r0
	return Status;
 800194e:	e06d      	b.n	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8001950:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8001954:	d8eb      	bhi.n	800192e <VL53L0X_perform_ref_spad_management+0x108>
				currentSpadIndex++;
 8001956:	f10b 0b01 	add.w	fp, fp, #1
 800195a:	e7e3      	b.n	8001924 <VL53L0X_perform_ref_spad_management+0xfe>
				Status = perform_ref_signal_measurement(Dev,
 800195c:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 8001960:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 8001962:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 8001966:	f7ff fdbf 	bl	80014e8 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 800196a:	2800      	cmp	r0, #0
 800196c:	d1ee      	bne.n	800194c <VL53L0X_perform_ref_spad_management+0x126>
 800196e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8001972:	4543      	cmp	r3, r8
 8001974:	d97f      	bls.n	8001a76 <VL53L0X_perform_ref_spad_management+0x250>
					isApertureSpads_int = 1;
 8001976:	2601      	movs	r6, #1
			needAptSpads = 0;
 8001978:	9607      	str	r6, [sp, #28]
		(peakSignalRateRef < targetRefRate)) {
 800197a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 800197e:	4543      	cmp	r3, r8
 8001980:	d263      	bcs.n	8001a4a <VL53L0X_perform_ref_spad_management+0x224>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8001982:	eba3 0308 	sub.w	r3, r3, r8
 8001986:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800198a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800198e:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8001992:	f8b9 1004 	ldrh.w	r1, [r9, #4]
		isApertureSpads_int = needAptSpads;
 8001996:	f89d 601c 	ldrb.w	r6, [sp, #28]
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800199a:	9010      	str	r0, [sp, #64]	; 0x40
		refSpadCount_int	= minimumSpadCount;
 800199c:	2303      	movs	r3, #3
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800199e:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 80019a2:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 80019a4:	9308      	str	r3, [sp, #32]
			get_next_good_spad(
 80019a6:	465a      	mov	r2, fp
 80019a8:	ab0f      	add	r3, sp, #60	; 0x3c
 80019aa:	2106      	movs	r1, #6
 80019ac:	4650      	mov	r0, sl
 80019ae:	f7ff fd0a 	bl	80013c6 <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80019b2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80019b6:	f1bb 3fff 	cmp.w	fp, #4294967295
 80019ba:	d056      	beq.n	8001a6a <VL53L0X_perform_ref_spad_management+0x244>
			(refSpadCount_int)++;
 80019bc:	9b08      	ldr	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80019be:	f10b 00b4 	add.w	r0, fp, #180	; 0xb4
			(refSpadCount_int)++;
 80019c2:	1c5f      	adds	r7, r3, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80019c4:	f7ff fd22 	bl	800140c <is_aperture>
 80019c8:	9b07      	ldr	r3, [sp, #28]
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d14d      	bne.n	8001a6a <VL53L0X_perform_ref_spad_management+0x244>
			Status = enable_spad_bit(
 80019ce:	465a      	mov	r2, fp
 80019d0:	4648      	mov	r0, r9
 80019d2:	f7ff fd25 	bl	8001420 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d1b8      	bne.n	800194c <VL53L0X_perform_ref_spad_management+0x126>
				Status = set_ref_spad_map(Dev,
 80019da:	4649      	mov	r1, r9
 80019dc:	4628      	mov	r0, r5
				currentSpadIndex++;
 80019de:	f10b 0b01 	add.w	fp, fp, #1
				Status = set_ref_spad_map(Dev,
 80019e2:	f7ff fd31 	bl	8001448 <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d1b0      	bne.n	800194c <VL53L0X_perform_ref_spad_management+0x126>
			Status = perform_ref_signal_measurement(Dev,
 80019ea:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff fd7a 	bl	80014e8 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d1a9      	bne.n	800194c <VL53L0X_perform_ref_spad_management+0x126>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80019f8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80019fc:	eba1 0308 	sub.w	r3, r1, r8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bfb8      	it	lt
 8001a04:	425b      	neglt	r3, r3
			if (peakSignalRateRef > targetRefRate) {
 8001a06:	4541      	cmp	r1, r8
 8001a08:	d914      	bls.n	8001a34 <VL53L0X_perform_ref_spad_management+0x20e>
				if (signalRateDiff > lastSignalRateDiff) {
 8001a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d91c      	bls.n	8001a4a <VL53L0X_perform_ref_spad_management+0x224>
					Status = set_ref_spad_map(Dev,
 8001a10:	a910      	add	r1, sp, #64	; 0x40
 8001a12:	4628      	mov	r0, r5
 8001a14:	f7ff fd18 	bl	8001448 <set_ref_spad_map>
					memcpy(
 8001a18:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 8001a1c:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8001a20:	4603      	mov	r3, r0
					memcpy(
 8001a22:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001a24:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8001a28:	b173      	cbz	r3, 8001a48 <VL53L0X_perform_ref_spad_management+0x222>
 8001a2a:	461c      	mov	r4, r3
}
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	b013      	add	sp, #76	; 0x4c
 8001a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				memcpy(lastSpadArray,
 8001a34:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 8001a38:	f8b5 1128 	ldrh.w	r1, [r5, #296]	; 0x128
 8001a3c:	9010      	str	r0, [sp, #64]	; 0x40
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8001a3e:	e9cd 7308 	strd	r7, r3, [sp, #32]
				memcpy(lastSpadArray,
 8001a42:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
		while (!complete) {
 8001a46:	e7ae      	b.n	80019a6 <VL53L0X_perform_ref_spad_management+0x180>
 8001a48:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 8001a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a4c:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8001a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a50:	701e      	strb	r6, [r3, #0]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8001a52:	2301      	movs	r3, #1
 8001a54:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8001a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8001a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 8001a68:	e7e0      	b.n	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8001a6a:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8001a6e:	e7dd      	b.n	8001a2c <VL53L0X_perform_ref_spad_management+0x206>
	uint8_t	 isApertureSpads_int = 0;
 8001a70:	2600      	movs	r6, #0
	uint32_t refSpadCount_int = 0;
 8001a72:	4637      	mov	r7, r6
 8001a74:	e780      	b.n	8001978 <VL53L0X_perform_ref_spad_management+0x152>
			needAptSpads = 1;
 8001a76:	2301      	movs	r3, #1
	uint8_t	 isApertureSpads_int = 0;
 8001a78:	4606      	mov	r6, r0
	uint32_t refSpadCount_int = 0;
 8001a7a:	4607      	mov	r7, r0
			needAptSpads = 1;
 8001a7c:	9307      	str	r3, [sp, #28]
 8001a7e:	e77c      	b.n	800197a <VL53L0X_perform_ref_spad_management+0x154>

08001a80 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8001a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8001a82:	2300      	movs	r3, #0
{
 8001a84:	4604      	mov	r4, r0
	uint8_t NewDataReady = 0;
 8001a86:	f88d 3007 	strb.w	r3, [sp, #7]
 8001a8a:	25c8      	movs	r5, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8001a8c:	f10d 0107 	add.w	r1, sp, #7
 8001a90:	4620      	mov	r0, r4
 8001a92:	f7ff fc5e 	bl	8001352 <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 8001a96:	b958      	cbnz	r0, 8001ab0 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 8001a98:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d007      	beq.n	8001ab0 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8001aa0:	3d01      	subs	r5, #1
 8001aa2:	d003      	beq.n	8001aac <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f001 fa55 	bl	8002f54 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8001aaa:	e7ef      	b.n	8001a8c <VL53L0X_measurement_poll_for_completion+0xc>
			Status = VL53L0X_ERROR_TIME_OUT;
 8001aac:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bd30      	pop	{r4, r5, pc}

08001ab4 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8001ab4:	4602      	mov	r2, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 8001ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d802      	bhi.n	8001ac4 <VL53L0X_isqrt+0x10>
	uint32_t  res = 0;
 8001abe:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8001ac0:	b913      	cbnz	r3, 8001ac8 <VL53L0X_isqrt+0x14>

		bit >>= 2;
	}

	return res;
}
 8001ac2:	4770      	bx	lr
		bit >>= 2;
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	e7f8      	b.n	8001aba <VL53L0X_isqrt+0x6>
		if (num >= res + bit) {
 8001ac8:	18c1      	adds	r1, r0, r3
 8001aca:	4291      	cmp	r1, r2
			res = (res >> 1) + bit;
 8001acc:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8001ad0:	bf9c      	itt	ls
 8001ad2:	18c0      	addls	r0, r0, r3
			num -= res + bit;
 8001ad4:	1a52      	subls	r2, r2, r1
		bit >>= 2;
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	e7f2      	b.n	8001ac0 <VL53L0X_isqrt+0xc>

08001ada <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8001ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2183      	movs	r1, #131	; 0x83
{
 8001ae0:	4605      	mov	r5, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8001ae2:	f001 f9ff 	bl	8002ee4 <VL53L0X_WrByte>
 8001ae6:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8001ae8:	b980      	cbnz	r0, 8001b0c <VL53L0X_device_read_strobe+0x32>
 8001aea:	26c8      	movs	r6, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8001aec:	f10d 0207 	add.w	r2, sp, #7
 8001af0:	2183      	movs	r1, #131	; 0x83
 8001af2:	4628      	mov	r0, r5
 8001af4:	f001 f967 	bl	8002dc6 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8001af8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001afc:	4303      	orrs	r3, r0
 8001afe:	b2db      	uxtb	r3, r3
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8001b00:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8001b02:	b91b      	cbnz	r3, 8001b0c <VL53L0X_device_read_strobe+0x32>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8001b04:	3e01      	subs	r6, #1
 8001b06:	d1f1      	bne.n	8001aec <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 8001b08:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2183      	movs	r1, #131	; 0x83
 8001b10:	4628      	mov	r0, r5
 8001b12:	f001 f9e7 	bl	8002ee4 <VL53L0X_WrByte>
 8001b16:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 8001b18:	b240      	sxtb	r0, r0
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd70      	pop	{r4, r5, r6, pc}

08001b1e <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8001b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001b22:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 8001b26:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 8001b28:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8001b2c:	2e07      	cmp	r6, #7
	uint32_t PartUIDLower = 0;
 8001b2e:	e9cd 9907 	strd	r9, r9, [sp, #28]
{
 8001b32:	4604      	mov	r4, r0
 8001b34:	460f      	mov	r7, r1
	if (ReadDataFromDeviceDone != 7) {
 8001b36:	f000 82b4 	beq.w	80020a2 <VL53L0X_get_info_from_device+0x584>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2180      	movs	r1, #128	; 0x80
 8001b3e:	f001 f9d1 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001b42:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001b44:	4683      	mov	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001b46:	21ff      	movs	r1, #255	; 0xff
 8001b48:	4620      	mov	r0, r4
 8001b4a:	f001 f9cb 	bl	8002ee4 <VL53L0X_WrByte>
 8001b4e:	ea4b 0000 	orr.w	r0, fp, r0
 8001b52:	fa4f fb80 	sxtb.w	fp, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001b56:	464a      	mov	r2, r9
 8001b58:	4649      	mov	r1, r9
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f001 f9c2 	bl	8002ee4 <VL53L0X_WrByte>
 8001b60:	ea4b 0000 	orr.w	r0, fp, r0
 8001b64:	fa4f fa80 	sxtb.w	sl, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8001b68:	2206      	movs	r2, #6
 8001b6a:	21ff      	movs	r1, #255	; 0xff
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f001 f9b9 	bl	8002ee4 <VL53L0X_WrByte>
 8001b72:	ea4a 0000 	orr.w	r0, sl, r0
 8001b76:	b245      	sxtb	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8001b78:	f10d 0215 	add.w	r2, sp, #21
 8001b7c:	2183      	movs	r1, #131	; 0x83
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f001 f921 	bl	8002dc6 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8001b84:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8001b88:	4328      	orrs	r0, r5
 8001b8a:	fa4f f880 	sxtb.w	r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8001b8e:	f042 0204 	orr.w	r2, r2, #4
 8001b92:	2183      	movs	r1, #131	; 0x83
 8001b94:	4620      	mov	r0, r4
 8001b96:	f001 f9a5 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8001b9a:	2207      	movs	r2, #7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8001b9c:	ea48 0800 	orr.w	r8, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8001ba0:	21ff      	movs	r1, #255	; 0xff
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f001 f99e 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8001ba8:	fa4f f888 	sxtb.w	r8, r8
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8001bac:	ea48 0000 	orr.w	r0, r8, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8001bb4:	fa4f fa80 	sxtb.w	sl, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8001bb8:	4620      	mov	r0, r4
 8001bba:	f001 f993 	bl	8002ee4 <VL53L0X_WrByte>
 8001bbe:	ea4a 0a00 	orr.w	sl, sl, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f001 f9c6 	bl	8002f54 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8001bc8:	fa4f fa8a 	sxtb.w	sl, sl
		Status |= VL53L0X_PollingDelay(Dev);
 8001bcc:	ea4a 0000 	orr.w	r0, sl, r0
 8001bd0:	fa4f f880 	sxtb.w	r8, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f001 f983 	bl	8002ee4 <VL53L0X_WrByte>

		if (((option & 1) == 1) &&
 8001bde:	f017 0b01 	ands.w	fp, r7, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001be2:	ea48 0000 	orr.w	r0, r8, r0
 8001be6:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8001be8:	f000 8232 	beq.w	8002050 <VL53L0X_get_info_from_device+0x532>
 8001bec:	07f2      	lsls	r2, r6, #31
 8001bee:	f100 8232 	bmi.w	8002056 <VL53L0X_get_info_from_device+0x538>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8001bf2:	226b      	movs	r2, #107	; 0x6b
 8001bf4:	2194      	movs	r1, #148	; 0x94
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f001 f974 	bl	8002ee4 <VL53L0X_WrByte>
 8001bfc:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff ff6b 	bl	8001ada <VL53L0X_device_read_strobe>
 8001c04:	ea48 0000 	orr.w	r0, r8, r0
 8001c08:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c0a:	aa06      	add	r2, sp, #24
 8001c0c:	2190      	movs	r1, #144	; 0x90
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f001 f942 	bl	8002e98 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001c14:	b26d      	sxtb	r5, r5

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8001c16:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c18:	4328      	orrs	r0, r5
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c1e:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8001c22:	4620      	mov	r0, r4
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8001c24:	f3c3 2a06 	ubfx	sl, r3, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8001c28:	f3c3 39c0 	ubfx	r9, r3, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8001c2c:	f001 f95a 	bl	8002ee4 <VL53L0X_WrByte>
 8001c30:	ea48 0800 	orr.w	r8, r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001c34:	4620      	mov	r0, r4
 8001c36:	f7ff ff50 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8001c3a:	fa4f f888 	sxtb.w	r8, r8
			Status |= VL53L0X_device_read_strobe(Dev);
 8001c3e:	ea48 0000 	orr.w	r0, r8, r0
 8001c42:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c44:	aa06      	add	r2, sp, #24
 8001c46:	2190      	movs	r1, #144	; 0x90
 8001c48:	4620      	mov	r0, r4
 8001c4a:	f001 f925 	bl	8002e98 <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8001c4e:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8001c50:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8001c54:	0e1a      	lsrs	r2, r3, #24
 8001c56:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8001c5a:	0c1a      	lsrs	r2, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c5c:	4328      	orrs	r0, r5
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8001c5e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8001c62:	0a1a      	lsrs	r2, r3, #8
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c64:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8001c66:	2194      	movs	r1, #148	; 0x94
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8001c68:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	2225      	movs	r2, #37	; 0x25
 8001c70:	f001 f938 	bl	8002ee4 <VL53L0X_WrByte>
 8001c74:	4328      	orrs	r0, r5
 8001c76:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff ff2e 	bl	8001ada <VL53L0X_device_read_strobe>
 8001c7e:	4328      	orrs	r0, r5
 8001c80:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c84:	aa06      	add	r2, sp, #24
 8001c86:	2190      	movs	r1, #144	; 0x90
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f001 f905 	bl	8002e98 <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8001c8e:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c90:	ea48 0000 	orr.w	r0, r8, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8001c94:	0e1a      	lsrs	r2, r3, #24
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8001c96:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001c98:	b245      	sxtb	r5, r0
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8001c9a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8001c9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8001ca2:	f017 0302 	ands.w	r3, r7, #2
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	f000 80db 	beq.w	8001e62 <VL53L0X_get_info_from_device+0x344>
 8001cac:	f016 0802 	ands.w	r8, r6, #2
 8001cb0:	f040 80d7 	bne.w	8001e62 <VL53L0X_get_info_from_device+0x344>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	2194      	movs	r1, #148	; 0x94
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f001 f913 	bl	8002ee4 <VL53L0X_WrByte>
 8001cbe:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff ff0a 	bl	8001ada <VL53L0X_device_read_strobe>
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	4318      	orrs	r0, r3
 8001cca:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8001ccc:	f10d 0216 	add.w	r2, sp, #22
 8001cd0:	2190      	movs	r1, #144	; 0x90
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f001 f877 	bl	8002dc6 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001cd8:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8001cda:	227b      	movs	r2, #123	; 0x7b
 8001cdc:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8001cde:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f001 f8ff 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8001ce6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8001ce8:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fef5 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8001cf0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001cf2:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8001cf4:	f10d 0217 	add.w	r2, sp, #23
 8001cf8:	2190      	movs	r1, #144	; 0x90
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f001 f863 	bl	8002dc6 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d00:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8001d02:	2277      	movs	r2, #119	; 0x77
 8001d04:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8001d06:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8001d08:	4620      	mov	r0, r4
 8001d0a:	f001 f8eb 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8001d0e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8001d10:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff fee1 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8001d18:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d1a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001d1c:	aa06      	add	r2, sp, #24
 8001d1e:	2190      	movs	r1, #144	; 0x90
 8001d20:	4620      	mov	r0, r4
 8001d22:	f001 f8b9 	bl	8002e98 <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8001d26:	9b06      	ldr	r3, [sp, #24]
 8001d28:	0e5a      	lsrs	r2, r3, #25
 8001d2a:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8001d2e:	f3c3 4286 	ubfx	r2, r3, #18, #7
 8001d32:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8001d36:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 8001d3a:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d3e:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8001d40:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8001d4a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001d4c:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8001d4e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8001d52:	4620      	mov	r0, r4
 8001d54:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8001d56:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8001d5a:	f001 f8c3 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001d5e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8001d60:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f7ff feb9 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8001d68:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001d6a:	4328      	orrs	r0, r5
 8001d6c:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001d6e:	aa06      	add	r2, sp, #24
 8001d70:	2190      	movs	r1, #144	; 0x90
 8001d72:	4620      	mov	r0, r4
 8001d74:	f001 f890 	bl	8002e98 <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8001d78:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8001d7a:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001d7e:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 8001d82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8001d86:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8001d8a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8001d8e:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 8001d92:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8001d96:	f3c3 2206 	ubfx	r2, r3, #8, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001d9a:	4328      	orrs	r0, r5
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8001d9c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8001da0:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8001daa:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001dac:	b245      	sxtb	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8001dae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8001db2:	4620      	mov	r0, r4
 8001db4:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8001db6:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8001dba:	f001 f893 	bl	8002ee4 <VL53L0X_WrByte>
 8001dbe:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fe8a 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8001dc6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001dc8:	4328      	orrs	r0, r5
 8001dca:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001dcc:	aa06      	add	r2, sp, #24
 8001dce:	2190      	movs	r1, #144	; 0x90
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f001 f861 	bl	8002e98 <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8001dd6:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8001dd8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8001ddc:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 8001de0:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8001de4:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8001de8:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8001dec:	f3c3 3206 	ubfx	r2, r3, #12, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001df0:	4328      	orrs	r0, r5
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8001df2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8001df6:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8001e00:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001e02:	b245      	sxtb	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8001e04:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8001e0c:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8001e10:	f001 f868 	bl	8002ee4 <VL53L0X_WrByte>
 8001e14:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fe5f 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8001e1c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001e1e:	4328      	orrs	r0, r5
 8001e20:	b245      	sxtb	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001e22:	aa06      	add	r2, sp, #24
 8001e24:	2190      	movs	r1, #144	; 0x90
 8001e26:	4620      	mov	r0, r4
 8001e28:	f001 f836 	bl	8002e98 <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8001e2c:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 8001e2e:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 8001e32:	f88d 803e 	strb.w	r8, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 8001e36:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 8001e3a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8001e3e:	f3c3 52c6 	ubfx	r2, r3, #23, #7
 8001e42:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8001e46:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001e4a:	4328      	orrs	r0, r5
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8001e4c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8001e50:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8001e54:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001e58:	b245      	sxtb	r5, r0
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8001e5a:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8001e5e:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 8001e62:	f017 0304 	ands.w	r3, r7, #4
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f000 80f7 	beq.w	800205a <VL53L0X_get_info_from_device+0x53c>
 8001e6c:	0773      	lsls	r3, r6, #29
 8001e6e:	f100 80f4 	bmi.w	800205a <VL53L0X_get_info_from_device+0x53c>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8001e72:	227b      	movs	r2, #123	; 0x7b
 8001e74:	2194      	movs	r1, #148	; 0x94
 8001e76:	4620      	mov	r0, r4
 8001e78:	f001 f834 	bl	8002ee4 <VL53L0X_WrByte>
 8001e7c:	4680      	mov	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff fe2b 	bl	8001ada <VL53L0X_device_read_strobe>
 8001e84:	ea48 0000 	orr.w	r0, r8, r0
 8001e88:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8001e8a:	aa07      	add	r2, sp, #28
 8001e8c:	2190      	movs	r1, #144	; 0x90
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f001 f802 	bl	8002e98 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001e94:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8001e96:	4328      	orrs	r0, r5
 8001e98:	b245      	sxtb	r5, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8001e9a:	227c      	movs	r2, #124	; 0x7c
 8001e9c:	2194      	movs	r1, #148	; 0x94
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f001 f820 	bl	8002ee4 <VL53L0X_WrByte>
 8001ea4:	4328      	orrs	r0, r5
 8001ea6:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f7ff fe15 	bl	8001ada <VL53L0X_device_read_strobe>
 8001eb0:	ea48 0000 	orr.w	r0, r8, r0
 8001eb4:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8001eb8:	aa08      	add	r2, sp, #32
 8001eba:	2190      	movs	r1, #144	; 0x90
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	f000 ffeb 	bl	8002e98 <VL53L0X_RdDWord>
 8001ec2:	ea48 0000 	orr.w	r0, r8, r0
 8001ec6:	fa4f f880 	sxtb.w	r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8001eca:	2273      	movs	r2, #115	; 0x73
 8001ecc:	2194      	movs	r1, #148	; 0x94
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f001 f808 	bl	8002ee4 <VL53L0X_WrByte>
 8001ed4:	ea48 0000 	orr.w	r0, r8, r0
 8001ed8:	b245      	sxtb	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001eda:	4620      	mov	r0, r4
 8001edc:	f7ff fdfd 	bl	8001ada <VL53L0X_device_read_strobe>
 8001ee0:	4328      	orrs	r0, r5
 8001ee2:	fa4f f880 	sxtb.w	r8, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001ee6:	aa06      	add	r2, sp, #24
 8001ee8:	2190      	movs	r1, #144	; 0x90
 8001eea:	4620      	mov	r0, r4
 8001eec:	f000 ffd4 	bl	8002e98 <VL53L0X_RdDWord>

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8001ef0:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001ef2:	ea48 0000 	orr.w	r0, r8, r0

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8001ef6:	2274      	movs	r2, #116	; 0x74
 8001ef8:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001efa:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8001efc:	4620      	mov	r0, r4
				0x000000ff) << 8;
 8001efe:	ea4f 2803 	mov.w	r8, r3, lsl #8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8001f02:	f000 ffef 	bl	8002ee4 <VL53L0X_WrByte>
 8001f06:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff fde6 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8001f0e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f10:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f12:	aa06      	add	r2, sp, #24
 8001f14:	2190      	movs	r1, #144	; 0x90
 8001f16:	4620      	mov	r0, r4
 8001f18:	f000 ffbe 	bl	8002e98 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f1c:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8001f1e:	f89d 301b 	ldrb.w	r3, [sp, #27]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8001f22:	2275      	movs	r2, #117	; 0x75
 8001f24:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f26:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8001f28:	fa1f f888 	uxth.w	r8, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8001f2c:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8001f2e:	ea43 0808 	orr.w	r8, r3, r8
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8001f32:	f000 ffd7 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f36:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8001f38:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff fdcd 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8001f40:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f42:	4328      	orrs	r0, r5
 8001f44:	b245      	sxtb	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f46:	aa06      	add	r2, sp, #24
 8001f48:	2190      	movs	r1, #144	; 0x90
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f000 ffa4 	bl	8002e98 <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8001f50:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f52:	4328      	orrs	r0, r5
							<< 8;
 8001f54:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8001f56:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8001f58:	2276      	movs	r2, #118	; 0x76
 8001f5a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f5c:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8001f5e:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8001f60:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8001f62:	f000 ffbf 	bl	8002ee4 <VL53L0X_WrByte>
 8001f66:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f7ff fdb6 	bl	8001ada <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8001f6e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f70:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f72:	aa06      	add	r2, sp, #24
 8001f74:	2190      	movs	r1, #144	; 0x90
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 ff8e 	bl	8002e98 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8001f7c:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8001f7e:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8001f82:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8001f84:	4328      	orrs	r0, r5
 8001f86:	b245      	sxtb	r5, r0
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8001f88:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2181      	movs	r1, #129	; 0x81
 8001f8e:	4620      	mov	r0, r4
 8001f90:	9303      	str	r3, [sp, #12]
 8001f92:	f000 ffa7 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8001f96:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8001f98:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8001f9a:	21ff      	movs	r1, #255	; 0xff
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f000 ffa1 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8001fa2:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8001fa4:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8001fa6:	f10d 0215 	add.w	r2, sp, #21
 8001faa:	2183      	movs	r1, #131	; 0x83
 8001fac:	4620      	mov	r0, r4
 8001fae:	f000 ff0a 	bl	8002dc6 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8001fb2:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8001fb6:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8001fb8:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8001fba:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8001fbe:	2183      	movs	r1, #131	; 0x83
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f000 ff8f 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8001fc6:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8001fc8:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	21ff      	movs	r1, #255	; 0xff
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f000 ff88 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8001fd4:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001fd6:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f000 ff81 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001fe2:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001fe4:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	21ff      	movs	r1, #255	; 0xff
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 ff7a 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001ff0:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001ff2:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 ff73 	bl	8002ee4 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001ffe:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002000:	4305      	orrs	r5, r0
 8002002:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002004:	9b03      	ldr	r3, [sp, #12]
 8002006:	b9fd      	cbnz	r5, 8002048 <VL53L0X_get_info_from_device+0x52a>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8002008:	f1bb 0f00 	cmp.w	fp, #0
 800200c:	d129      	bne.n	8002062 <VL53L0X_get_info_from_device+0x544>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 800200e:	9a02      	ldr	r2, [sp, #8]
 8002010:	bbaa      	cbnz	r2, 800207e <VL53L0X_get_info_from_device+0x560>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8002012:	9a01      	ldr	r2, [sp, #4]
 8002014:	b1aa      	cbz	r2, 8002042 <VL53L0X_get_info_from_device+0x524>
 8002016:	0772      	lsls	r2, r6, #29
 8002018:	d413      	bmi.n	8002042 <VL53L0X_get_info_from_device+0x524>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800201a:	9a07      	ldr	r2, [sp, #28]
 800201c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002020:	9a08      	ldr	r2, [sp, #32]
 8002022:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8002026:	ea4f 2248 	mov.w	r2, r8, lsl #9
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800202a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 800202e:	b13b      	cbz	r3, 8002040 <VL53L0X_get_info_from_device+0x522>
					OffsetFixed1104_mm =
 8002030:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8002034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002038:	4353      	muls	r3, r2
 800203a:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 800203c:	425b      	negs	r3, r3
 800203e:	b21b      	sxth	r3, r3
			}

			PALDevDataSet(Dev,
 8002040:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8002042:	433e      	orrs	r6, r7
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8002044:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002048:	4628      	mov	r0, r5
 800204a:	b011      	add	sp, #68	; 0x44
 800204c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8002050:	46d9      	mov	r9, fp
	uint8_t ReferenceSpadCount = 0;
 8002052:	46da      	mov	sl, fp
 8002054:	e625      	b.n	8001ca2 <VL53L0X_get_info_from_device+0x184>
 8002056:	46ca      	mov	sl, r9
 8002058:	e623      	b.n	8001ca2 <VL53L0X_get_info_from_device+0x184>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800205a:	f04f 0800 	mov.w	r8, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 800205e:	4643      	mov	r3, r8
 8002060:	e793      	b.n	8001f8a <VL53L0X_get_info_from_device+0x46c>
		if (((option & 1) == 1) &&
 8002062:	07f0      	lsls	r0, r6, #31
 8002064:	d4d3      	bmi.n	800200e <VL53L0X_get_info_from_device+0x4f0>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8002066:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002068:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800206c:	f884 a113 	strb.w	sl, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002070:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8002074:	f8c4 012a 	str.w	r0, [r4, #298]	; 0x12a
 8002078:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 800207c:	e7c7      	b.n	800200e <VL53L0X_get_info_from_device+0x4f0>
		if (((option & 2) == 2) &&
 800207e:	07b1      	lsls	r1, r6, #30
 8002080:	d4c7      	bmi.n	8002012 <VL53L0X_get_info_from_device+0x4f4>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002082:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002086:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800208a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800208e:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8002092:	a90b      	add	r1, sp, #44	; 0x2c
 8002094:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	f002 fdab 	bl	8004bf4 <strcpy>
 800209e:	9b02      	ldr	r3, [sp, #8]
 80020a0:	e7b7      	b.n	8002012 <VL53L0X_get_info_from_device+0x4f4>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80020a2:	464d      	mov	r5, r9
 80020a4:	e7d0      	b.n	8002048 <VL53L0X_get_info_from_device+0x52a>

080020a6 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 80020a6:	b150      	cbz	r0, 80020be <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 80020a8:	3801      	subs	r0, #1

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80020aa:	2300      	movs	r3, #0
 80020ac:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f103 0301 	add.w	r3, r3, #1
 80020b6:	d103      	bne.n	80020c0 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 80020b8:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80020bc:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 80020be:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 80020c0:	0840      	lsrs	r0, r0, #1
			ms_byte++;
 80020c2:	e7f3      	b.n	80020ac <VL53L0X_encode_timeout+0x6>

080020c4 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80020c4:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80020c6:	0a00      	lsrs	r0, r0, #8
 80020c8:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 80020cc:	3001      	adds	r0, #1
 80020ce:	4770      	bx	lr

080020d0 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 80020d6:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80020d8:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 80020dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020e0:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80020e4:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80020e8:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 80020ec:	fbb0 f0f2 	udiv	r0, r0, r2
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	003a2f00 	.word	0x003a2f00

080020f8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80020f8:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 80020fa:	4808      	ldr	r0, [pc, #32]	; (800211c <VL53L0X_calc_timeout_us+0x24>)
 80020fc:	4342      	muls	r2, r0
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80020fe:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8002102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 8002106:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800210a:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 800210e:	fbb2 f2f4 	udiv	r2, r2, r4
 8002112:	fb01 2203 	mla	r2, r1, r3, r2

	return actual_timeout_period_us;
}
 8002116:	fbb2 f0f0 	udiv	r0, r2, r0
 800211a:	bd10      	pop	{r4, pc}
 800211c:	003a2f00 	.word	0x003a2f00

08002120 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8002120:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002124:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 8002126:	f04f 0500 	mov.w	r5, #0
{
 800212a:	4607      	mov	r7, r0
 800212c:	4616      	mov	r6, r2
	uint8_t EncodedTimeOutByte = 0;
 800212e:	f88d 5003 	strb.w	r5, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8002132:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002136:	d81c      	bhi.n	8002172 <get_sequence_step_timeout+0x52>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002138:	f10d 0202 	add.w	r2, sp, #2
 800213c:	4629      	mov	r1, r5
 800213e:	f7fe fbcd 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8002142:	4604      	mov	r4, r0
 8002144:	b930      	cbnz	r0, 8002154 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 8002146:	f10d 0203 	add.w	r2, sp, #3
 800214a:	2146      	movs	r1, #70	; 0x46
 800214c:	4638      	mov	r0, r7
 800214e:	f000 fe3a 	bl	8002dc6 <VL53L0X_RdByte>
 8002152:	4604      	mov	r4, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8002154:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002158:	f7ff ffb4 	bl	80020c4 <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800215c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002160:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002162:	4638      	mov	r0, r7
 8002164:	f7ff ffc8 	bl	80020f8 <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8002168:	6030      	str	r0, [r6, #0]

	return Status;
}
 800216a:	4620      	mov	r0, r4
 800216c:	b004      	add	sp, #16
 800216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8002172:	2903      	cmp	r1, #3
 8002174:	d118      	bne.n	80021a8 <get_sequence_step_timeout+0x88>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002176:	f10d 0202 	add.w	r2, sp, #2
 800217a:	4629      	mov	r1, r5
 800217c:	f7fe fbae 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8002180:	4604      	mov	r4, r0
 8002182:	2800      	cmp	r0, #0
 8002184:	d149      	bne.n	800221a <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002186:	4601      	mov	r1, r0
 8002188:	f10d 0202 	add.w	r2, sp, #2
 800218c:	4638      	mov	r0, r7
 800218e:	f7fe fba5 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8002192:	4604      	mov	r4, r0
 8002194:	b928      	cbnz	r0, 80021a2 <get_sequence_step_timeout+0x82>
				Status = VL53L0X_RdWord(Dev,
 8002196:	aa01      	add	r2, sp, #4
 8002198:	2151      	movs	r1, #81	; 0x51
 800219a:	4638      	mov	r0, r7
 800219c:	f000 fe5c 	bl	8002e58 <VL53L0X_RdWord>
 80021a0:	4604      	mov	r4, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80021a2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80021a6:	e7d7      	b.n	8002158 <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80021a8:	2904      	cmp	r1, #4
 80021aa:	d138      	bne.n	800221e <get_sequence_step_timeout+0xfe>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80021ac:	a902      	add	r1, sp, #8
 80021ae:	f7fe fbe9 	bl	8000984 <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80021b2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80021b6:	b1a8      	cbz	r0, 80021e4 <get_sequence_step_timeout+0xc4>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80021b8:	f10d 0202 	add.w	r2, sp, #2
 80021bc:	4629      	mov	r1, r5
 80021be:	4638      	mov	r0, r7
 80021c0:	f7fe fb8c 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
 80021c4:	4604      	mov	r4, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80021c6:	b958      	cbnz	r0, 80021e0 <get_sequence_step_timeout+0xc0>
				Status = VL53L0X_RdWord(Dev,
 80021c8:	aa01      	add	r2, sp, #4
 80021ca:	2151      	movs	r1, #81	; 0x51
 80021cc:	4638      	mov	r0, r7
 80021ce:	f000 fe43 	bl	8002e58 <VL53L0X_RdWord>
 80021d2:	4604      	mov	r4, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80021d4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80021d8:	f7ff ff74 	bl	80020c4 <VL53L0X_decode_timeout>
 80021dc:	b285      	uxth	r5, r0
		if (Status == VL53L0X_ERROR_NONE) {
 80021de:	b114      	cbz	r4, 80021e6 <get_sequence_step_timeout+0xc6>
	uint16_t FinalRangeTimeOutMClks = 0;
 80021e0:	2000      	movs	r0, #0
 80021e2:	e015      	b.n	8002210 <get_sequence_step_timeout+0xf0>
		PreRangeTimeOutMClks = 0;
 80021e4:	4605      	mov	r5, r0
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80021e6:	f10d 0202 	add.w	r2, sp, #2
 80021ea:	2101      	movs	r1, #1
 80021ec:	4638      	mov	r0, r7
 80021ee:	f7fe fb75 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 80021f2:	4604      	mov	r4, r0
 80021f4:	2800      	cmp	r0, #0
 80021f6:	d1f3      	bne.n	80021e0 <get_sequence_step_timeout+0xc0>
			Status = VL53L0X_RdWord(Dev,
 80021f8:	f10d 0206 	add.w	r2, sp, #6
 80021fc:	2171      	movs	r1, #113	; 0x71
 80021fe:	4638      	mov	r0, r7
 8002200:	f000 fe2a 	bl	8002e58 <VL53L0X_RdWord>
 8002204:	4604      	mov	r4, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002206:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800220a:	f7ff ff5b 	bl	80020c4 <VL53L0X_decode_timeout>
 800220e:	b280      	uxth	r0, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8002210:	1b45      	subs	r5, r0, r5
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002212:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002216:	b2a9      	uxth	r1, r5
 8002218:	e7a3      	b.n	8002162 <get_sequence_step_timeout+0x42>
	uint32_t TimeoutMicroSeconds = 0;
 800221a:	4628      	mov	r0, r5
 800221c:	e7a4      	b.n	8002168 <get_sequence_step_timeout+0x48>
 800221e:	4628      	mov	r0, r5
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002220:	462c      	mov	r4, r5
 8002222:	e7a1      	b.n	8002168 <get_sequence_step_timeout+0x48>

08002224 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8002224:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002226:	2902      	cmp	r1, #2
{
 8002228:	b085      	sub	sp, #20
 800222a:	4605      	mov	r5, r0
 800222c:	4616      	mov	r6, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800222e:	d81e      	bhi.n	800226e <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002230:	f10d 0205 	add.w	r2, sp, #5
 8002234:	2100      	movs	r1, #0
 8002236:	f7fe fb51 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800223a:	4604      	mov	r4, r0
 800223c:	b9a0      	cbnz	r0, 8002268 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800223e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002242:	4631      	mov	r1, r6
 8002244:	4628      	mov	r0, r5
 8002246:	f7ff ff43 	bl	80020d0 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800224a:	b283      	uxth	r3, r0
 800224c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 8002250:	bf9a      	itte	ls
 8002252:	f100 32ff 	addls.w	r2, r0, #4294967295
 8002256:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8002258:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800225a:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 800225e:	2146      	movs	r1, #70	; 0x46
 8002260:	4628      	mov	r0, r5
 8002262:	f000 fe3f 	bl	8002ee4 <VL53L0X_WrByte>
 8002266:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8002268:	4620      	mov	r0, r4
 800226a:	b005      	add	sp, #20
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800226e:	2903      	cmp	r1, #3
 8002270:	d11f      	bne.n	80022b2 <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002272:	f10d 0205 	add.w	r2, sp, #5
 8002276:	2100      	movs	r1, #0
 8002278:	f7fe fb30 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 800227c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002280:	4631      	mov	r1, r6
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002282:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8002284:	4628      	mov	r0, r5
 8002286:	f7ff ff23 	bl	80020d0 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800228a:	b280      	uxth	r0, r0
 800228c:	f7ff ff0b 	bl	80020a6 <VL53L0X_encode_timeout>
 8002290:	4602      	mov	r2, r0
 8002292:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002296:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 800229a:	2c00      	cmp	r4, #0
 800229c:	d1e4      	bne.n	8002268 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 800229e:	2151      	movs	r1, #81	; 0x51
 80022a0:	4628      	mov	r0, r5
 80022a2:	f000 fe2f 	bl	8002f04 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 80022a6:	4604      	mov	r4, r0
 80022a8:	2800      	cmp	r0, #0
 80022aa:	d1dd      	bne.n	8002268 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80022ac:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
 80022b0:	e7da      	b.n	8002268 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80022b2:	2904      	cmp	r1, #4
 80022b4:	d13b      	bne.n	800232e <set_sequence_step_timeout+0x10a>
			VL53L0X_GetSequenceStepEnables(Dev,
 80022b6:	a902      	add	r1, sp, #8
 80022b8:	f7fe fb64 	bl	8000984 <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 80022bc:	f89d 700b 	ldrb.w	r7, [sp, #11]
 80022c0:	b1b7      	cbz	r7, 80022f0 <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80022c2:	f10d 0205 	add.w	r2, sp, #5
 80022c6:	2100      	movs	r1, #0
 80022c8:	4628      	mov	r0, r5
 80022ca:	f7fe fb07 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 80022ce:	4604      	mov	r4, r0
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d1c9      	bne.n	8002268 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80022d4:	f10d 0206 	add.w	r2, sp, #6
 80022d8:	2151      	movs	r1, #81	; 0x51
 80022da:	4628      	mov	r0, r5
 80022dc:	f000 fdbc 	bl	8002e58 <VL53L0X_RdWord>
 80022e0:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 80022e2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80022e6:	f7ff feed 	bl	80020c4 <VL53L0X_decode_timeout>
					PreRangeTimeOutMClks =
 80022ea:	b287      	uxth	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 80022ec:	2c00      	cmp	r4, #0
 80022ee:	d1bb      	bne.n	8002268 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80022f0:	f10d 0205 	add.w	r2, sp, #5
 80022f4:	2101      	movs	r1, #1
 80022f6:	4628      	mov	r0, r5
 80022f8:	f7fe faf0 	bl	80008dc <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 80022fc:	4604      	mov	r4, r0
 80022fe:	2800      	cmp	r0, #0
 8002300:	d1b2      	bne.n	8002268 <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8002302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002306:	4631      	mov	r1, r6
 8002308:	4628      	mov	r0, r5
 800230a:	f7ff fee1 	bl	80020d0 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800230e:	fa17 f080 	uxtah	r0, r7, r0
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8002312:	b280      	uxth	r0, r0
 8002314:	f7ff fec7 	bl	80020a6 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8002318:	2171      	movs	r1, #113	; 0x71
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800231a:	4602      	mov	r2, r0
					Status = VL53L0X_WrWord(Dev, 0x71,
 800231c:	4628      	mov	r0, r5
 800231e:	f000 fdf1 	bl	8002f04 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8002322:	4604      	mov	r4, r0
 8002324:	2800      	cmp	r0, #0
 8002326:	d19f      	bne.n	8002268 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002328:	f8c5 60dc 	str.w	r6, [r5, #220]	; 0xdc
 800232c:	e79c      	b.n	8002268 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800232e:	f06f 0403 	mvn.w	r4, #3
 8002332:	e799      	b.n	8002268 <set_sequence_step_timeout+0x44>

08002334 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002338:	b085      	sub	sp, #20
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800233a:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800233c:	f012 0b01 	ands.w	fp, r2, #1
{
 8002340:	4680      	mov	r8, r0
 8002342:	468a      	mov	sl, r1
 8002344:	4691      	mov	r9, r2
	uint8_t PhaseCalInt = 0;
 8002346:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800234a:	d104      	bne.n	8002356 <VL53L0X_set_vcsel_pulse_period+0x22>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800234c:	b931      	cbnz	r1, 800235c <VL53L0X_set_vcsel_pulse_period+0x28>
 800234e:	f1a2 030c 	sub.w	r3, r2, #12
 8002352:	2b06      	cmp	r3, #6
 8002354:	d957      	bls.n	8002406 <VL53L0X_set_vcsel_pulse_period+0xd2>
 8002356:	f06f 0003 	mvn.w	r0, #3
 800235a:	e061      	b.n	8002420 <VL53L0X_set_vcsel_pulse_period+0xec>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800235c:	2901      	cmp	r1, #1
 800235e:	d01e      	beq.n	800239e <VL53L0X_set_vcsel_pulse_period+0x6a>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8002360:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8002364:	3c01      	subs	r4, #1
 8002366:	b2e4      	uxtb	r4, r4
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8002368:	f1ba 0f00 	cmp.w	sl, #0
 800236c:	f000 80b5 	beq.w	80024da <VL53L0X_set_vcsel_pulse_period+0x1a6>
 8002370:	f1ba 0f01 	cmp.w	sl, #1
 8002374:	d1ef      	bne.n	8002356 <VL53L0X_set_vcsel_pulse_period+0x22>
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8002376:	aa01      	add	r2, sp, #4
 8002378:	2104      	movs	r1, #4
 800237a:	4640      	mov	r0, r8
 800237c:	f7ff fed0 	bl	8002120 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8002380:	b950      	cbnz	r0, 8002398 <VL53L0X_set_vcsel_pulse_period+0x64>
				Status = VL53L0X_WrByte(Dev,
 8002382:	4622      	mov	r2, r4
 8002384:	2170      	movs	r1, #112	; 0x70
 8002386:	4640      	mov	r0, r8
 8002388:	f000 fdac 	bl	8002ee4 <VL53L0X_WrByte>
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800238c:	b920      	cbnz	r0, 8002398 <VL53L0X_set_vcsel_pulse_period+0x64>
				Status = set_sequence_step_timeout(Dev,
 800238e:	9a01      	ldr	r2, [sp, #4]
 8002390:	2104      	movs	r1, #4
 8002392:	4640      	mov	r0, r8
 8002394:	f7ff ff46 	bl	8002224 <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002398:	f888 90e0 	strb.w	r9, [r8, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800239c:	e0bc      	b.n	8002518 <VL53L0X_set_vcsel_pulse_period+0x1e4>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800239e:	f1a2 0308 	sub.w	r3, r2, #8
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d8d7      	bhi.n	8002356 <VL53L0X_set_vcsel_pulse_period+0x22>
		if (VCSELPulsePeriodPCLK == 8) {
 80023a6:	2a08      	cmp	r2, #8
 80023a8:	d149      	bne.n	800243e <VL53L0X_set_vcsel_pulse_period+0x10a>
			Status = VL53L0X_WrByte(Dev,
 80023aa:	2210      	movs	r2, #16
 80023ac:	2148      	movs	r1, #72	; 0x48
 80023ae:	f000 fd99 	bl	8002ee4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80023b2:	464a      	mov	r2, r9
 80023b4:	2147      	movs	r1, #71	; 0x47
 80023b6:	4640      	mov	r0, r8
 80023b8:	f000 fd94 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80023bc:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 80023be:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80023c0:	2132      	movs	r1, #50	; 0x32
 80023c2:	4640      	mov	r0, r8
 80023c4:	f000 fd8e 	bl	8002ee4 <VL53L0X_WrByte>
 80023c8:	4338      	orrs	r0, r7
 80023ca:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80023cc:	220c      	movs	r2, #12
 80023ce:	2130      	movs	r1, #48	; 0x30
 80023d0:	4640      	mov	r0, r8
 80023d2:	f000 fd87 	bl	8002ee4 <VL53L0X_WrByte>
 80023d6:	4338      	orrs	r0, r7
 80023d8:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80023da:	4652      	mov	r2, sl
 80023dc:	21ff      	movs	r1, #255	; 0xff
 80023de:	4640      	mov	r0, r8
 80023e0:	f000 fd80 	bl	8002ee4 <VL53L0X_WrByte>
 80023e4:	4330      	orrs	r0, r6
 80023e6:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 80023e8:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 80023ea:	2130      	movs	r1, #48	; 0x30
 80023ec:	4640      	mov	r0, r8
 80023ee:	f000 fd79 	bl	8002ee4 <VL53L0X_WrByte>
 80023f2:	4328      	orrs	r0, r5
 80023f4:	b244      	sxtb	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80023f6:	465a      	mov	r2, fp
 80023f8:	21ff      	movs	r1, #255	; 0xff
 80023fa:	4640      	mov	r0, r8
 80023fc:	f000 fd72 	bl	8002ee4 <VL53L0X_WrByte>
 8002400:	4320      	orrs	r0, r4
 8002402:	b240      	sxtb	r0, r0
 8002404:	e00a      	b.n	800241c <VL53L0X_set_vcsel_pulse_period+0xe8>
		if (VCSELPulsePeriodPCLK == 12) {
 8002406:	2a0c      	cmp	r2, #12
 8002408:	d10d      	bne.n	8002426 <VL53L0X_set_vcsel_pulse_period+0xf2>
			Status = VL53L0X_WrByte(Dev,
 800240a:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
 800240c:	2157      	movs	r1, #87	; 0x57
 800240e:	f000 fd69 	bl	8002ee4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002412:	2208      	movs	r2, #8
 8002414:	2156      	movs	r1, #86	; 0x56
 8002416:	4640      	mov	r0, r8
 8002418:	f000 fd64 	bl	8002ee4 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE) {
 800241c:	2800      	cmp	r0, #0
 800241e:	d09f      	beq.n	8002360 <VL53L0X_set_vcsel_pulse_period+0x2c>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 8002420:	b005      	add	sp, #20
 8002422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 8002426:	2a0e      	cmp	r2, #14
 8002428:	d101      	bne.n	800242e <VL53L0X_set_vcsel_pulse_period+0xfa>
			Status = VL53L0X_WrByte(Dev,
 800242a:	2230      	movs	r2, #48	; 0x30
 800242c:	e7ee      	b.n	800240c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 16) {
 800242e:	2a10      	cmp	r2, #16
 8002430:	d101      	bne.n	8002436 <VL53L0X_set_vcsel_pulse_period+0x102>
			Status = VL53L0X_WrByte(Dev,
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	e7ea      	b.n	800240c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 18) {
 8002436:	2a12      	cmp	r2, #18
 8002438:	d192      	bne.n	8002360 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 800243a:	2250      	movs	r2, #80	; 0x50
 800243c:	e7e6      	b.n	800240c <VL53L0X_set_vcsel_pulse_period+0xd8>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800243e:	2a0a      	cmp	r2, #10
 8002440:	d120      	bne.n	8002484 <VL53L0X_set_vcsel_pulse_period+0x150>
			Status = VL53L0X_WrByte(Dev,
 8002442:	2228      	movs	r2, #40	; 0x28
 8002444:	2148      	movs	r1, #72	; 0x48
 8002446:	f000 fd4d 	bl	8002ee4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 800244a:	2208      	movs	r2, #8
 800244c:	2147      	movs	r1, #71	; 0x47
 800244e:	4640      	mov	r0, r8
 8002450:	f000 fd48 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002454:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8002456:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8002458:	2132      	movs	r1, #50	; 0x32
 800245a:	4640      	mov	r0, r8
 800245c:	f000 fd42 	bl	8002ee4 <VL53L0X_WrByte>
 8002460:	4338      	orrs	r0, r7
 8002462:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 8002464:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8002466:	2130      	movs	r1, #48	; 0x30
 8002468:	4640      	mov	r0, r8
 800246a:	f000 fd3b 	bl	8002ee4 <VL53L0X_WrByte>
 800246e:	4338      	orrs	r0, r7
 8002470:	b246      	sxtb	r6, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002472:	4652      	mov	r2, sl
 8002474:	21ff      	movs	r1, #255	; 0xff
 8002476:	4640      	mov	r0, r8
 8002478:	f000 fd34 	bl	8002ee4 <VL53L0X_WrByte>
 800247c:	4330      	orrs	r0, r6
 800247e:	b245      	sxtb	r5, r0
			Status |= VL53L0X_WrByte(Dev,
 8002480:	2220      	movs	r2, #32
 8002482:	e7b2      	b.n	80023ea <VL53L0X_set_vcsel_pulse_period+0xb6>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8002484:	2a0c      	cmp	r2, #12
 8002486:	d112      	bne.n	80024ae <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 8002488:	2238      	movs	r2, #56	; 0x38
 800248a:	2148      	movs	r1, #72	; 0x48
 800248c:	f000 fd2a 	bl	8002ee4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002490:	2208      	movs	r2, #8
 8002492:	2147      	movs	r1, #71	; 0x47
 8002494:	4640      	mov	r0, r8
 8002496:	f000 fd25 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 800249a:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 800249c:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 800249e:	2132      	movs	r1, #50	; 0x32
 80024a0:	4640      	mov	r0, r8
 80024a2:	f000 fd1f 	bl	8002ee4 <VL53L0X_WrByte>
 80024a6:	4338      	orrs	r0, r7
 80024a8:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80024aa:	2208      	movs	r2, #8
 80024ac:	e7db      	b.n	8002466 <VL53L0X_set_vcsel_pulse_period+0x132>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80024ae:	2a0e      	cmp	r2, #14
 80024b0:	f47f af56 	bne.w	8002360 <VL53L0X_set_vcsel_pulse_period+0x2c>
			Status = VL53L0X_WrByte(Dev,
 80024b4:	2248      	movs	r2, #72	; 0x48
 80024b6:	4611      	mov	r1, r2
 80024b8:	f000 fd14 	bl	8002ee4 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 80024bc:	2208      	movs	r2, #8
 80024be:	2147      	movs	r1, #71	; 0x47
 80024c0:	4640      	mov	r0, r8
 80024c2:	f000 fd0f 	bl	8002ee4 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 80024c6:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 80024c8:	4607      	mov	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80024ca:	2132      	movs	r1, #50	; 0x32
 80024cc:	4640      	mov	r0, r8
 80024ce:	f000 fd09 	bl	8002ee4 <VL53L0X_WrByte>
 80024d2:	4338      	orrs	r0, r7
 80024d4:	b247      	sxtb	r7, r0
			Status |= VL53L0X_WrByte(Dev,
 80024d6:	2207      	movs	r2, #7
 80024d8:	e7c5      	b.n	8002466 <VL53L0X_set_vcsel_pulse_period+0x132>
			Status = get_sequence_step_timeout(Dev,
 80024da:	aa02      	add	r2, sp, #8
 80024dc:	2103      	movs	r1, #3
 80024de:	4640      	mov	r0, r8
 80024e0:	f7ff fe1e 	bl	8002120 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80024e4:	b9b0      	cbnz	r0, 8002514 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = get_sequence_step_timeout(Dev,
 80024e6:	aa03      	add	r2, sp, #12
 80024e8:	2102      	movs	r1, #2
 80024ea:	4640      	mov	r0, r8
 80024ec:	f7ff fe18 	bl	8002120 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 80024f0:	b980      	cbnz	r0, 8002514 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = VL53L0X_WrByte(Dev,
 80024f2:	4622      	mov	r2, r4
 80024f4:	2150      	movs	r1, #80	; 0x50
 80024f6:	4640      	mov	r0, r8
 80024f8:	f000 fcf4 	bl	8002ee4 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 80024fc:	b950      	cbnz	r0, 8002514 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = set_sequence_step_timeout(Dev,
 80024fe:	9a02      	ldr	r2, [sp, #8]
 8002500:	2103      	movs	r1, #3
 8002502:	4640      	mov	r0, r8
 8002504:	f7ff fe8e 	bl	8002224 <set_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8002508:	b920      	cbnz	r0, 8002514 <VL53L0X_set_vcsel_pulse_period+0x1e0>
				Status = set_sequence_step_timeout(Dev,
 800250a:	9a03      	ldr	r2, [sp, #12]
 800250c:	2102      	movs	r1, #2
 800250e:	4640      	mov	r0, r8
 8002510:	f7ff fe88 	bl	8002224 <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002514:	f888 90e8 	strb.w	r9, [r8, #232]	; 0xe8
	if (Status == VL53L0X_ERROR_NONE) {
 8002518:	2800      	cmp	r0, #0
 800251a:	d181      	bne.n	8002420 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800251c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8002520:	4640      	mov	r0, r8
 8002522:	f7fe f9d7 	bl	80008d4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 8002526:	2800      	cmp	r0, #0
 8002528:	f47f af7a 	bne.w	8002420 <VL53L0X_set_vcsel_pulse_period+0xec>
		Status = VL53L0X_perform_phase_calibration(
 800252c:	4602      	mov	r2, r0
 800252e:	2301      	movs	r3, #1
 8002530:	f10d 0103 	add.w	r1, sp, #3
 8002534:	4640      	mov	r0, r8
 8002536:	f7ff f917 	bl	8001768 <VL53L0X_perform_phase_calibration>
 800253a:	e771      	b.n	8002420 <VL53L0X_set_vcsel_pulse_period+0xec>

0800253c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800253c:	b513      	push	{r0, r1, r4, lr}
 800253e:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8002540:	b129      	cbz	r1, 800254e <VL53L0X_get_vcsel_pulse_period+0x12>
 8002542:	2901      	cmp	r1, #1
 8002544:	d010      	beq.n	8002568 <VL53L0X_get_vcsel_pulse_period+0x2c>
 8002546:	f06f 0003 	mvn.w	r0, #3
	if (Status == VL53L0X_ERROR_NONE)
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 800254a:	b002      	add	sp, #8
 800254c:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 800254e:	f10d 0207 	add.w	r2, sp, #7
 8002552:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 8002554:	f000 fc37 	bl	8002dc6 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002558:	2800      	cmp	r0, #0
 800255a:	d1f6      	bne.n	800254a <VL53L0X_get_vcsel_pulse_period+0xe>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800255c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002560:	3301      	adds	r3, #1
 8002562:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8002564:	7023      	strb	r3, [r4, #0]
 8002566:	e7f0      	b.n	800254a <VL53L0X_get_vcsel_pulse_period+0xe>
		Status = VL53L0X_RdByte(Dev,
 8002568:	f10d 0207 	add.w	r2, sp, #7
 800256c:	2170      	movs	r1, #112	; 0x70
 800256e:	e7f1      	b.n	8002554 <VL53L0X_get_vcsel_pulse_period+0x18>

08002570 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8002572:	2300      	movs	r3, #0
{
 8002574:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8002576:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800257a:	e9cd 2300 	strd	r2, r3, [sp]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800257e:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8002582:	4299      	cmp	r1, r3
{
 8002584:	4606      	mov	r6, r0
 8002586:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 8002588:	d804      	bhi.n	8002594 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 800258a:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800258e:	4628      	mov	r0, r5
 8002590:	b005      	add	sp, #20
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8002594:	a902      	add	r1, sp, #8
 8002596:	f7fe f9f5 	bl	8000984 <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 800259a:	4605      	mov	r5, r0
 800259c:	2800      	cmp	r0, #0
 800259e:	d1f6      	bne.n	800258e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		SchedulerSequenceSteps.MsrcOn ||
 80025a0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80025a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f89d 200a 	ldrb.w	r2, [sp, #10]
 80025ae:	4313      	orrs	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80025b0:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
		SchedulerSequenceSteps.MsrcOn ||
 80025b4:	d01b      	beq.n	80025ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
		Status = get_sequence_step_timeout(Dev,
 80025b6:	466a      	mov	r2, sp
 80025b8:	2102      	movs	r1, #2
 80025ba:	4630      	mov	r0, r6
 80025bc:	f7ff fdb0 	bl	8002120 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d13b      	bne.n	800263c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
		if (SchedulerSequenceSteps.TccOn) {
 80025c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80025c8:	b12b      	cbz	r3, 80025d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x66>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80025ca:	9b00      	ldr	r3, [sp, #0]
 80025cc:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 80025d0:	429c      	cmp	r4, r3
 80025d2:	d9da      	bls.n	800258a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 80025d4:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 80025d6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80025da:	b323      	cbz	r3, 8002626 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xb6>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80025dc:	9b00      	ldr	r3, [sp, #0]
 80025de:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80025e2:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 80025e6:	ea4f 0243 	mov.w	r2, r3, lsl #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80025ea:	d9ce      	bls.n	800258a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 80025ec:	1aa4      	subs	r4, r4, r2
	if (SchedulerSequenceSteps.PreRangeOn) {
 80025ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80025f2:	b15b      	cbz	r3, 800260c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9c>
		Status = get_sequence_step_timeout(Dev,
 80025f4:	aa01      	add	r2, sp, #4
 80025f6:	2103      	movs	r1, #3
 80025f8:	4630      	mov	r0, r6
 80025fa:	f7ff fd91 	bl	8002120 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8002604:	42a3      	cmp	r3, r4
 8002606:	d2c0      	bcs.n	800258a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 8002608:	b9c0      	cbnz	r0, 800263c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800260a:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 800260c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0bc      	beq.n	800258e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 8002614:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 8002618:	2104      	movs	r1, #4
 800261a:	4630      	mov	r0, r6
 800261c:	f7ff fe02 	bl	8002224 <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002620:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 8002622:	4605      	mov	r5, r0
		VL53L0X_SETPARAMETERFIELD(Dev,
 8002624:	e7b3      	b.n	800258e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8002626:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0df      	beq.n	80025ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800262e:	9b00      	ldr	r3, [sp, #0]
 8002630:	f503 7325 	add.w	r3, r3, #660	; 0x294
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8002634:	429c      	cmp	r4, r3
 8002636:	d9a8      	bls.n	800258a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8002638:	1ae4      	subs	r4, r4, r3
	if (Status != VL53L0X_ERROR_NONE) {
 800263a:	e7d8      	b.n	80025ee <VL53L0X_set_measurement_timing_budget_micro_seconds+0x7e>
 800263c:	4605      	mov	r5, r0
 800263e:	e7a6      	b.n	800258e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

08002640 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002640:	b570      	push	{r4, r5, r6, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8002642:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
{
 8002646:	b086      	sub	sp, #24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8002648:	2300      	movs	r3, #0
 800264a:	e9cd 2302 	strd	r2, r3, [sp, #8]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800264e:	f640 3336 	movw	r3, #2870	; 0xb36
 8002652:	600b      	str	r3, [r1, #0]
{
 8002654:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8002656:	a904      	add	r1, sp, #16
{
 8002658:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800265a:	f7fe f993 	bl	8000984 <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 800265e:	4605      	mov	r5, r0
 8002660:	2800      	cmp	r0, #0
 8002662:	d136      	bne.n	80026d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
 8002664:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002668:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8002672:	4313      	orrs	r3, r2
 8002674:	d019      	beq.n	80026aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 8002676:	aa02      	add	r2, sp, #8
 8002678:	2102      	movs	r1, #2
 800267a:	4630      	mov	r0, r6
 800267c:	f7ff fd50 	bl	8002120 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8002680:	2800      	cmp	r0, #0
 8002682:	d140      	bne.n	8002706 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 8002684:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002688:	b12b      	cbz	r3, 8002696 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 800268a:	9b02      	ldr	r3, [sp, #8]
 800268c:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	4413      	add	r3, r2
 8002694:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8002696:	f89d 3012 	ldrb.w	r3, [sp, #18]
 800269a:	b1eb      	cbz	r3, 80026d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800269c:	9b02      	ldr	r3, [sp, #8]
 800269e:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 80026a8:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 80026aa:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80026ae:	b9eb      	cbnz	r3, 80026ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80026b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80026b4:	b15b      	cbz	r3, 80026ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
			Status = get_sequence_step_timeout(Dev,
 80026b6:	aa01      	add	r2, sp, #4
 80026b8:	2104      	movs	r1, #4
 80026ba:	4630      	mov	r0, r6
 80026bc:	f7ff fd30 	bl	8002120 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				(FinalRangeTimeoutMicroSeconds +
 80026c0:	9b01      	ldr	r3, [sp, #4]
 80026c2:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	6023      	str	r3, [r4, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80026cc:	b9d8      	cbnz	r0, 8002706 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80026d2:	4628      	mov	r0, r5
 80026d4:	b006      	add	sp, #24
 80026d6:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80026d8:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0e4      	beq.n	80026aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 80026e0:	9b02      	ldr	r3, [sp, #8]
 80026e2:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	e7dd      	b.n	80026a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 80026ec:	aa03      	add	r2, sp, #12
 80026ee:	2103      	movs	r1, #3
 80026f0:	4630      	mov	r0, r6
 80026f2:	f7ff fd15 	bl	8002120 <get_sequence_step_timeout>
				PreRangeTimeoutMicroSeconds +
 80026f6:	9b03      	ldr	r3, [sp, #12]
 80026f8:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8002702:	2800      	cmp	r0, #0
 8002704:	d0d4      	beq.n	80026b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x70>
 8002706:	4605      	mov	r5, r0
 8002708:	e7e3      	b.n	80026d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

0800270a <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800270a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800270e:	2400      	movs	r4, #0
{
 8002710:	4606      	mov	r6, r0
 8002712:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002714:	4620      	mov	r0, r4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8002716:	f815 8004 	ldrb.w	r8, [r5, r4]
 800271a:	f1b8 0f00 	cmp.w	r8, #0
 800271e:	d000      	beq.n	8002722 <VL53L0X_load_tuning_settings+0x18>
 8002720:	b110      	cbz	r0, 8002728 <VL53L0X_load_tuning_settings+0x1e>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002722:	b003      	add	sp, #12
 8002724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		Index++;
 8002728:	1c67      	adds	r7, r4, #1
		if (NumberOfWrites == 0xFF) {
 800272a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
			SelectParam = *(pTuningSettingBuffer + Index);
 800272e:	f815 9007 	ldrb.w	r9, [r5, r7]
		if (NumberOfWrites == 0xFF) {
 8002732:	d129      	bne.n	8002788 <VL53L0X_load_tuning_settings+0x7e>
			Index++;
 8002734:	1ca7      	adds	r7, r4, #2
				msb = *(pTuningSettingBuffer + Index);
 8002736:	5deb      	ldrb	r3, [r5, r7]
			switch (SelectParam) {
 8002738:	f1b9 0f03 	cmp.w	r9, #3
 800273c:	d836      	bhi.n	80027ac <VL53L0X_load_tuning_settings+0xa2>
 800273e:	e8df f009 	tbb	[pc, r9]
 8002742:	0b02      	.short	0x0b02
 8002744:	1b13      	.short	0x1b13
				Index++;
 8002746:	1d27      	adds	r7, r4, #4
				lsb = *(pTuningSettingBuffer + Index);
 8002748:	442c      	add	r4, r5
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800274a:	78e2      	ldrb	r2, [r4, #3]
 800274c:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8002750:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002754:	463c      	mov	r4, r7
 8002756:	e7de      	b.n	8002716 <VL53L0X_load_tuning_settings+0xc>
				Index++;
 8002758:	1d27      	adds	r7, r4, #4
				lsb = *(pTuningSettingBuffer + Index);
 800275a:	442c      	add	r4, r5
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800275c:	78e2      	ldrb	r2, [r4, #3]
 800275e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8002762:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 8002766:	e7f5      	b.n	8002754 <VL53L0X_load_tuning_settings+0x4a>
				Index++;
 8002768:	1d27      	adds	r7, r4, #4
				lsb = *(pTuningSettingBuffer + Index);
 800276a:	442c      	add	r4, r5
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800276c:	78e2      	ldrb	r2, [r4, #3]
 800276e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8002772:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 8002776:	e7ed      	b.n	8002754 <VL53L0X_load_tuning_settings+0x4a>
				Index++;
 8002778:	1d27      	adds	r7, r4, #4
				lsb = *(pTuningSettingBuffer + Index);
 800277a:	442c      	add	r4, r5
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800277c:	78e2      	ldrb	r2, [r4, #3]
 800277e:	eb02 2303 	add.w	r3, r2, r3, lsl #8
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8002782:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 8002786:	e7e5      	b.n	8002754 <VL53L0X_load_tuning_settings+0x4a>
		} else if (NumberOfWrites <= 4) {
 8002788:	f1b8 0f04 	cmp.w	r8, #4
 800278c:	d80e      	bhi.n	80027ac <VL53L0X_load_tuning_settings+0xa2>
			Index++;
 800278e:	3402      	adds	r4, #2
				localBuffer[i] = *(pTuningSettingBuffer +
 8002790:	4642      	mov	r2, r8
 8002792:	1929      	adds	r1, r5, r4
 8002794:	a801      	add	r0, sp, #4
 8002796:	f002 f989 	bl	8004aac <memcpy>
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800279a:	4643      	mov	r3, r8
 800279c:	aa01      	add	r2, sp, #4
 800279e:	4649      	mov	r1, r9
 80027a0:	4630      	mov	r0, r6
				Index++;
 80027a2:	eb04 0708 	add.w	r7, r4, r8
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80027a6:	f000 fb23 	bl	8002df0 <VL53L0X_WriteMulti>
 80027aa:	e7d3      	b.n	8002754 <VL53L0X_load_tuning_settings+0x4a>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80027ac:	f06f 0003 	mvn.w	r0, #3
 80027b0:	e7d0      	b.n	8002754 <VL53L0X_load_tuning_settings+0x4a>

080027b2 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80027b2:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80027b4:	2300      	movs	r3, #0
{
 80027b6:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 80027b8:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80027ba:	f10d 0107 	add.w	r1, sp, #7
{
 80027be:	4605      	mov	r5, r0
 80027c0:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80027c2:	f7fe f92e 	bl	8000a22 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 80027c6:	b940      	cbnz	r0, 80027da <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 80027c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027cc:	b12b      	cbz	r3, 80027da <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80027ce:	8ab3      	ldrh	r3, [r6, #20]
			totalXtalkMegaCps =
 80027d0:	6a2a      	ldr	r2, [r5, #32]
 80027d2:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80027d4:	3380      	adds	r3, #128	; 0x80
 80027d6:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 80027d8:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 80027da:	b002      	add	sp, #8
 80027dc:	bd70      	pop	{r4, r5, r6, pc}

080027de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80027de:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80027e0:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 80027e2:	6013      	str	r3, [r2, #0]
{
 80027e4:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 80027e6:	aa01      	add	r2, sp, #4
 80027e8:	f7ff ffe3 	bl	80027b2 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80027ec:	b918      	cbnz	r0, 80027f6 <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	9a01      	ldr	r2, [sp, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	6023      	str	r3, [r4, #0]

	return Status;
}
 80027f6:	b002      	add	sp, #8
 80027f8:	bd10      	pop	{r4, pc}
	...

080027fc <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80027fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 80027fe:	f8b0 5150 	ldrh.w	r5, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8002802:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8002806:	4368      	muls	r0, r5

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8002808:	3080      	adds	r0, #128	; 0x80
 800280a:	0a00      	lsrs	r0, r0, #8
{
 800280c:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
	SignalAt0mm *= dmaxCalRange_mm;
 8002810:	4345      	muls	r5, r0

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8002812:	b152      	cbz	r2, 800282a <VL53L0X_calc_dmax+0x2e>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8002814:	0289      	lsls	r1, r1, #10

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8002816:	eb01 0152 	add.w	r1, r1, r2, lsr #1
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800281a:	fbb1 f4f2 	udiv	r4, r1, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800281e:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8002822:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8002824:	f504 4200 	add.w	r2, r4, #32768	; 0x8000
 8002828:	0c12      	lsrs	r2, r2, #16
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800282a:	f507 4000 	add.w	r0, r7, #32768	; 0x8000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800282e:	9906      	ldr	r1, [sp, #24]
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8002830:	0c00      	lsrs	r0, r0, #16
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8002832:	2406      	movs	r4, #6
 8002834:	3003      	adds	r0, #3
 8002836:	fbb0 f0f4 	udiv	r0, r0, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800283a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 800283e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8002842:	fb01 f303 	mul.w	r3, r1, r3
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8002846:	f503 4100 	add.w	r1, r3, #32768	; 0x8000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800284a:	bf3f      	itttt	cc
 800284c:	1cfb      	addcc	r3, r7, #3
 800284e:	fbb3 f3f4 	udivcc	r3, r3, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8002852:	ebc3 03c3 	rsbcc	r3, r3, r3, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8002856:	f503 4300 	addcc.w	r3, r3, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800285a:	ea4f 4111 	mov.w	r1, r1, lsr #16
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800285e:	bf34      	ite	cc
 8002860:	0c1b      	lsrcc	r3, r3, #16
		minSignalNeeded_p3 = 0xfff00000;
 8002862:	4b1b      	ldrcs	r3, [pc, #108]	; (80028d0 <VL53L0X_calc_dmax+0xd4>)
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8002864:	fb01 f101 	mul.w	r1, r1, r1

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8002868:	eb01 0156 	add.w	r1, r1, r6, lsr #1
		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800286c:	bf38      	it	cc
 800286e:	435b      	mulcc	r3, r3
	minSignalNeeded += (peakVcselDuration_us/2);
 8002870:	440b      	add	r3, r1
	minSignalNeeded /= peakVcselDuration_us;
 8002872:	fbb3 f6f6 	udiv	r6, r3, r6

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8002876:	03b6      	lsls	r6, r6, #14
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8002878:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded /= minSignalNeeded_p4;
 800287c:	24fe      	movs	r4, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 800287e:	367f      	adds	r6, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8002880:	fbb6 f6f4 	udiv	r6, r6, r4
	minSignalNeeded *= minSignalNeeded_p1;
 8002884:	fb06 f402 	mul.w	r4, r6, r2
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8002888:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800288c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8002890:	0980      	lsrs	r0, r0, #6
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8002892:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 4;
 8002896:	0124      	lsls	r4, r4, #4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8002898:	f7ff f90c 	bl	8001ab4 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800289c:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80028a0:	42bc      	cmp	r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80028a2:	bf28      	it	cs
 80028a4:	f44f 63fa 	movcs.w	r3, #2000	; 0x7d0
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80028a8:	4606      	mov	r6, r0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80028aa:	bf29      	itett	cs
 80028ac:	fbb4 f3f3 	udivcs	r3, r4, r3
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80028b0:	2000      	movcc	r0, #0
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80028b2:	18ed      	addcs	r5, r5, r3
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80028b4:	fbb4 f4f7 	udivcs	r4, r4, r7
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80028b8:	bf28      	it	cs
 80028ba:	fbb5 f0f4 	udivcs	r0, r5, r4

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80028be:	f7ff f8f9 	bl	8001ab4 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
 80028c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c4:	4286      	cmp	r6, r0
 80028c6:	bf94      	ite	ls
 80028c8:	601e      	strls	r6, [r3, #0]
 80028ca:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 80028cc:	2000      	movs	r0, #0
 80028ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028d0:	fff00000 	.word	0xfff00000

080028d4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80028d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d8:	ed2d 8b02 	vpush	{d8}
 80028dc:	b08f      	sub	sp, #60	; 0x3c
 80028de:	4604      	mov	r4, r0
 80028e0:	9307      	str	r3, [sp, #28]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80028e2:	6a03      	ldr	r3, [r0, #32]
 80028e4:	930c      	str	r3, [sp, #48]	; 0x30
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80028e6:	690b      	ldr	r3, [r1, #16]
 80028e8:	9308      	str	r3, [sp, #32]

	correctedSignalRate_mcps =
 80028ea:	68cb      	ldr	r3, [r1, #12]
{
 80028ec:	460e      	mov	r6, r1
 80028ee:	4693      	mov	fp, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80028f0:	aa0d      	add	r2, sp, #52	; 0x34
	correctedSignalRate_mcps =
 80028f2:	ee08 3a10 	vmov	s16, r3
	Status = VL53L0X_get_total_signal_rate(
 80028f6:	f7ff ff72 	bl	80027de <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80028fa:	aa0c      	add	r2, sp, #48	; 0x30
 80028fc:	4631      	mov	r1, r6
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff ff57 	bl	80027b2 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8002904:	bb48      	cbnz	r0, 800295a <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8002906:	f894 a0e0 	ldrb.w	sl, [r4, #224]	; 0xe0
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800290a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800290c:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8002910:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8002914:	f894 e0e8 	ldrb.w	lr, [r4, #232]	; 0xe8
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8002918:	f1ba 0f08 	cmp.w	sl, #8
 800291c:	bf0c      	ite	eq
 800291e:	2502      	moveq	r5, #2
 8002920:	2503      	movne	r5, #3
 8002922:	9509      	str	r5, [sp, #36]	; 0x24
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8002924:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8002928:	fb05 fc07 	mul.w	ip, r5, r7
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800292c:	f50c 4200 	add.w	r2, ip, #32768	; 0x8000
 8002930:	9204      	str	r2, [sp, #16]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8002932:	f107 0280 	add.w	r2, r7, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8002936:	f022 09ff 	bic.w	r9, r2, #255	; 0xff
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800293a:	9205      	str	r2, [sp, #20]
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 800293c:	9a04      	ldr	r2, [sp, #16]
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800293e:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
		totalSignalRate_mcps <<= 8;
 8002942:	4f62      	ldr	r7, [pc, #392]	; (8002acc <VL53L0X_calc_sigma_estimate+0x1f8>)
 8002944:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
	if (peakSignalRate_kcps == 0) {
 8002948:	0c12      	lsrs	r2, r2, #16
 800294a:	920a      	str	r2, [sp, #40]	; 0x28
 800294c:	d10a      	bne.n	8002964 <VL53L0X_calc_sigma_estimate+0x90>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 800294e:	9b07      	ldr	r3, [sp, #28]
		*pSigmaEstimate = cSigmaEstMax;
 8002950:	f8cb 7000 	str.w	r7, [fp]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8002954:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		*pDmax_mm = 0;
 8002958:	6018      	str	r0, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800295a:	b00f      	add	sp, #60	; 0x3c
 800295c:	ecbd 8b02 	vpop	{d8}
 8002960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8002964:	fb05 fc0c 	mul.w	ip, r5, ip
 8002968:	f5bc 1f48 	cmp.w	ip, #3276800	; 0x320000
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800296c:	4672      	mov	r2, lr
 800296e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002970:	4620      	mov	r0, r4
 8002972:	4663      	mov	r3, ip
 8002974:	bf28      	it	cs
 8002976:	f44f 1348 	movcs.w	r3, #3276800	; 0x320000
 800297a:	9306      	str	r3, [sp, #24]
 800297c:	f7ff fba8 	bl	80020d0 <VL53L0X_calc_timeout_mclks>
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8002980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002982:	4652      	mov	r2, sl
 8002984:	4619      	mov	r1, r3
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8002986:	4680      	mov	r8, r0
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fba1 	bl	80020d0 <VL53L0X_calc_timeout_mclks>
		peakVcselDuration_us = vcselWidth * 2048 *
 800298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <VL53L0X_calc_sigma_estimate+0x1fc>)
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8002992:	4480      	add	r8, r0
		peakVcselDuration_us = vcselWidth * 2048 *
 8002994:	fb03 f808 	mul.w	r8, r3, r8
 8002998:	ea4f 28c8 	mov.w	r8, r8, lsl #11
		peakVcselDuration_us *= cPllPeriod_ps;
 800299c:	f240 6377 	movw	r3, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80029a0:	f508 78fa 	add.w	r8, r8, #500	; 0x1f4
 80029a4:	fbb8 f8f5 	udiv	r8, r8, r5
		peakVcselDuration_us *= cPllPeriod_ps;
 80029a8:	fb03 f808 	mul.w	r8, r3, r8
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80029ac:	9b05      	ldr	r3, [sp, #20]
 80029ae:	0a18      	lsrs	r0, r3, #8
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80029b0:	9b08      	ldr	r3, [sp, #32]
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80029b2:	f508 78fa 	add.w	r8, r8, #500	; 0x1f4
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80029b6:	fb05 fa03 	mul.w	sl, r5, r3
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80029ba:	fbb8 f8f5 	udiv	r8, r8, r5
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80029be:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <VL53L0X_calc_sigma_estimate+0x200>)
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80029c0:	fb08 f000 	mul.w	r0, r8, r0
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80029c4:	3080      	adds	r0, #128	; 0x80
 80029c6:	0a00      	lsrs	r0, r0, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80029c8:	ea0a 0a03 	and.w	sl, sl, r3
 80029cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029ce:	fbba faf3 	udiv	sl, sl, r3
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80029d2:	4592      	cmp	sl, r2
 80029d4:	bf28      	it	cs
 80029d6:	4692      	movcs	sl, r2
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80029d8:	2801      	cmp	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80029da:	f44f 7216 	mov.w	r2, #600	; 0x258
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80029de:	bf38      	it	cc
 80029e0:	2001      	movcc	r0, #1
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80029e2:	fb02 fa0a 	mul.w	sl, r2, sl
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80029e6:	220c      	movs	r2, #12
 80029e8:	4350      	muls	r0, r2
 80029ea:	f7ff f863 	bl	8001ab4 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80029ee:	9a04      	ldr	r2, [sp, #16]
 80029f0:	4b38      	ldr	r3, [pc, #224]	; (8002ad4 <VL53L0X_calc_sigma_estimate+0x200>)
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80029f2:	9005      	str	r0, [sp, #20]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80029f4:	ea02 0c03 	and.w	ip, r2, r3
 80029f8:	9b06      	ldr	r3, [sp, #24]
			xTalkCompRate_kcps) + 500)/1000;
 80029fa:	9a06      	ldr	r2, [sp, #24]
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80029fc:	4836      	ldr	r0, [pc, #216]	; (8002ad8 <VL53L0X_calc_sigma_estimate+0x204>)
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80029fe:	ebac 0103 	sub.w	r1, ip, r3
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8002a02:	8933      	ldrh	r3, [r6, #8]
 8002a04:	4343      	muls	r3, r0
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8002a06:	f241 205c 	movw	r0, #4700	; 0x125c
 8002a0a:	fbb3 f3f0 	udiv	r3, r3, r0
			xTalkCompRate_kcps) + 500)/1000;
 8002a0e:	f502 70fa 	add.w	r0, r2, #500	; 0x1f4
 8002a12:	4460      	add	r0, ip
			xTalkCompRate_kcps) + 500)/1000;
 8002a14:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8002a18:	fbb1 f1f5 	udiv	r1, r1, r5
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8002a1c:	fbb0 f5f5 	udiv	r5, r0, r5
		diff1_mcps <<= 8;
 8002a20:	0209      	lsls	r1, r1, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8002a22:	fbb1 f5f5 	udiv	r5, r1, r5
		xTalkCorrection <<= 8;
 8002a26:	022d      	lsls	r5, r5, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8002a28:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
 8002a2c:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8002a2e:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 8002a32:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 8002a34:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8002a38:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8002a3a:	436d      	muls	r5, r5
		pwMult >>= 14;
 8002a3c:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8002a3e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002a42:	4368      	muls	r0, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8002a44:	f50a 4300 	add.w	r3, sl, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8002a48:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8002a4c:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 8002a4e:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 8002a50:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8002a52:	fb00 3000 	mla	r0, r0, r0, r3
 8002a56:	f7ff f82d 	bl	8001ab4 <VL53L0X_isqrt>
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8002a5a:	9a05      	ldr	r2, [sp, #20]
		sqrtResult_centi_ns <<= 16;
 8002a5c:	0403      	lsls	r3, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8002a5e:	3332      	adds	r3, #50	; 0x32
 8002a60:	2064      	movs	r0, #100	; 0x64
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8002a62:	0052      	lsls	r2, r2, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8002a64:	fbb3 f3f0 	udiv	r3, r3, r0
		sigmaEstRtn		 += 5000;
 8002a68:	f241 3088 	movw	r0, #5000	; 0x1388
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8002a6c:	fbb3 f2f2 	udiv	r2, r3, r2
		sigmaEstRtn		 += 5000;
 8002a70:	f640 33b5 	movw	r3, #2997	; 0xbb5
 8002a74:	fb03 0202 	mla	r2, r3, r2, r0
		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <VL53L0X_calc_sigma_estimate+0x208>)
 8002a7a:	429a      	cmp	r2, r3
		sigmaEstRtn		 /= 10000;
 8002a7c:	bf94      	ite	ls
 8002a7e:	f242 7010 	movwls	r0, #10000	; 0x2710
			sigmaEstRtn = cSigmaEstRtnMax;
 8002a82:	f44f 4070 	movhi.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8002a86:	f241 1304 	movw	r3, #4356	; 0x1104
		sigmaEstRtn		 /= 10000;
 8002a8a:	bf98      	it	ls
 8002a8c:	fbb2 f0f0 	udivls	r0, r2, r0
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8002a90:	fb00 3000 	mla	r0, r0, r0, r3
 8002a94:	f7ff f80e 	bl	8001ab4 <VL53L0X_isqrt>
		sigmaEstimate	 = 1000 * sqrtResult;
 8002a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9c:	4358      	muls	r0, r3
		Status = VL53L0X_calc_dmax(
 8002a9e:	9b07      	ldr	r3, [sp, #28]
 8002aa0:	f8cd a004 	str.w	sl, [sp, #4]
 8002aa4:	4287      	cmp	r7, r0
 8002aa6:	bf28      	it	cs
 8002aa8:	4607      	movcs	r7, r0
 8002aaa:	e9cd 8302 	strd	r8, r3, [sp, #8]
 8002aae:	f44f 7348 	mov.w	r3, #800	; 0x320
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8002ab2:	f8cb 7000 	str.w	r7, [fp]
		Status = VL53L0X_calc_dmax(
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	ee18 2a10 	vmov	r2, s16
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8002abc:	f8c4 713c 	str.w	r7, [r4, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 8002ac0:	462b      	mov	r3, r5
 8002ac2:	4649      	mov	r1, r9
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f7ff fe99 	bl	80027fc <VL53L0X_calc_dmax>
 8002aca:	e746      	b.n	800295a <VL53L0X_calc_sigma_estimate+0x86>
 8002acc:	028f87ae 	.word	0x028f87ae
 8002ad0:	00666666 	.word	0x00666666
 8002ad4:	ffff0000 	.word	0xffff0000
 8002ad8:	0006999a 	.word	0x0006999a
 8002adc:	249f270f 	.word	0x249f270f

08002ae0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8002ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ae4:	b08b      	sub	sp, #44	; 0x2c
 8002ae6:	4699      	mov	r9, r3
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
 8002ae8:	2300      	movs	r3, #0
{
 8002aea:	4690      	mov	r8, r2
	uint8_t SigmaLimitCheckEnable = 0;
 8002aec:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8002af0:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8002af4:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8002af8:	f88d 3011 	strb.w	r3, [sp, #17]
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
 8002afc:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8002b00:	9309      	str	r3, [sp, #36]	; 0x24
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8002b02:	f3c1 06c3 	ubfx	r6, r1, #3, #4
 8002b06:	08cb      	lsrs	r3, r1, #3
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	21ff      	movs	r1, #255	; 0xff
{
 8002b0c:	9f15      	ldr	r7, [sp, #84]	; 0x54
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8002b0e:	9301      	str	r3, [sp, #4]
{
 8002b10:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002b12:	f000 f9e7 	bl	8002ee4 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002b16:	b928      	cbnz	r0, 8002b24 <VL53L0X_get_pal_range_status+0x44>
		Status = VL53L0X_RdWord(Dev,
 8002b18:	f10d 0212 	add.w	r2, sp, #18
 8002b1c:	21b6      	movs	r1, #182	; 0xb6
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f000 f99a 	bl	8002e58 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8002b24:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8002b28:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 8002b2c:	b920      	cbnz	r0, 8002b38 <VL53L0X_get_pal_range_status+0x58>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002b2e:	4602      	mov	r2, r0
 8002b30:	21ff      	movs	r1, #255	; 0xff
 8002b32:	4620      	mov	r0, r4
 8002b34:	f000 f9d6 	bl	8002ee4 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8002b38:	f8c4 a144 	str.w	sl, [r4, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002b3c:	b928      	cbnz	r0, 8002b4a <VL53L0X_get_pal_range_status+0x6a>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002b3e:	4601      	mov	r1, r0
 8002b40:	f10d 020e 	add.w	r2, sp, #14
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7fd ffc6 	bl	8000ad6 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8002b4a:	f89d 500e 	ldrb.w	r5, [sp, #14]
 8002b4e:	b1d5      	cbz	r5, 8002b86 <VL53L0X_get_pal_range_status+0xa6>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	f040 808c 	bne.w	8002c6e <VL53L0X_get_pal_range_status+0x18e>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8002b56:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002b58:	ab09      	add	r3, sp, #36	; 0x24
 8002b5a:	aa05      	add	r2, sp, #20
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff feb9 	bl	80028d4 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8002b62:	2800      	cmp	r0, #0
 8002b64:	f040 8083 	bne.w	8002c6e <VL53L0X_get_pal_range_status+0x18e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8002b68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b6c:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8002b6e:	4601      	mov	r1, r0
 8002b70:	aa06      	add	r2, sp, #24
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fd ffe8 	bl	8000b48 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8002b78:	9d06      	ldr	r5, [sp, #24]
 8002b7a:	b125      	cbz	r5, 8002b86 <VL53L0X_get_pal_range_status+0xa6>
	uint8_t SigmaLimitflag = 0;
 8002b7c:	9b05      	ldr	r3, [sp, #20]
 8002b7e:	429d      	cmp	r5, r3
 8002b80:	bf2c      	ite	cs
 8002b82:	2500      	movcs	r5, #0
 8002b84:	2501      	movcc	r5, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002b86:	b920      	cbnz	r0, 8002b92 <VL53L0X_get_pal_range_status+0xb2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002b88:	aa04      	add	r2, sp, #16
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fd ffa2 	bl	8000ad6 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8002b92:	f89d b010 	ldrb.w	fp, [sp, #16]
 8002b96:	f1bb 0f00 	cmp.w	fp, #0
 8002b9a:	d00f      	beq.n	8002bbc <VL53L0X_get_pal_range_status+0xdc>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d16a      	bne.n	8002c76 <VL53L0X_get_pal_range_status+0x196>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8002ba0:	aa07      	add	r2, sp, #28
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f7fd ffcf 	bl	8000b48 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 8002baa:	9b07      	ldr	r3, [sp, #28]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d060      	beq.n	8002c72 <VL53L0X_get_pal_range_status+0x192>
	uint8_t SignalRefClipflag = 0;
 8002bb0:	4553      	cmp	r3, sl
 8002bb2:	bf2c      	ite	cs
 8002bb4:	f04f 0b00 	movcs.w	fp, #0
 8002bb8:	f04f 0b01 	movcc.w	fp, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002bbc:	b928      	cbnz	r0, 8002bca <VL53L0X_get_pal_range_status+0xea>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002bbe:	f10d 0211 	add.w	r2, sp, #17
 8002bc2:	2103      	movs	r1, #3
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7fd ff86 	bl	8000ad6 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8002bca:	f89d a011 	ldrb.w	sl, [sp, #17]
 8002bce:	f1ba 0f00 	cmp.w	sl, #0
 8002bd2:	d014      	beq.n	8002bfe <VL53L0X_get_pal_range_status+0x11e>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d175      	bne.n	8002cc4 <VL53L0X_get_pal_range_status+0x1e4>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8002bd8:	f1b9 0f00 	cmp.w	r9, #0
 8002bdc:	d003      	beq.n	8002be6 <VL53L0X_get_pal_range_status+0x106>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8002bde:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8002be2:	fbb8 f9f9 	udiv	r9, r8, r9
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8002be6:	aa08      	add	r2, sp, #32
 8002be8:	2103      	movs	r1, #3
 8002bea:	4620      	mov	r0, r4
 8002bec:	f7fd ffac 	bl	8000b48 <VL53L0X_GetLimitCheckValue>
	uint8_t RangeIgnoreThresholdflag = 0;
 8002bf0:	9a08      	ldr	r2, [sp, #32]
 8002bf2:	454a      	cmp	r2, r9
 8002bf4:	bf94      	ite	ls
 8002bf6:	f04f 0a00 	movls.w	sl, #0
 8002bfa:	f04f 0a01 	movhi.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002bfe:	b930      	cbnz	r0, 8002c0e <VL53L0X_get_pal_range_status+0x12e>
	if (DeviceRangeStatusInternal == 0 ||
 8002c00:	f24f 02a1 	movw	r2, #61601	; 0xf0a1
 8002c04:	40f2      	lsrs	r2, r6
		if (NoneFlag == 1) {
 8002c06:	07d3      	lsls	r3, r2, #31
 8002c08:	d538      	bpl.n	8002c7c <VL53L0X_get_pal_range_status+0x19c>
			*pPalRangeStatus = 255;	 /* NONE */
 8002c0a:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8002c0c:	703a      	strb	r2, [r7, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8002c0e:	783a      	ldrb	r2, [r7, #0]
 8002c10:	b90a      	cbnz	r2, 8002c16 <VL53L0X_get_pal_range_status+0x136>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8002c12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c14:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002c16:	f10d 020f 	add.w	r2, sp, #15
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7fd ff5a 	bl	8000ad6 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8002c22:	bb08      	cbnz	r0, 8002c68 <VL53L0X_get_pal_range_status+0x188>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8002c24:	f89d 200e 	ldrb.w	r2, [sp, #14]
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8002c28:	f89d 3011 	ldrb.w	r3, [sp, #17]
			Temp8 = 1;
 8002c2c:	2a00      	cmp	r2, #0
 8002c2e:	bf08      	it	eq
 8002c30:	2501      	moveq	r5, #1
		if ((DeviceRangeStatusInternal == 4) ||
 8002c32:	2e04      	cmp	r6, #4
 8002c34:	bf18      	it	ne
 8002c36:	f89d 200f 	ldrbne.w	r2, [sp, #15]
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002c3a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
			Temp8 = 1;
 8002c3e:	bf1a      	itte	ne
 8002c40:	fab2 f282 	clzne	r2, r2
 8002c44:	0952      	lsrne	r2, r2, #5
 8002c46:	2201      	moveq	r2, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002c48:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
		if ((SignalRefClipLimitCheckEnable == 0) ||
 8002c4c:	f89d 2010 	ldrb.w	r2, [sp, #16]
			Temp8 = 1;
 8002c50:	2a00      	cmp	r2, #0
 8002c52:	bf08      	it	eq
 8002c54:	f04f 0b01 	moveq.w	fp, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf08      	it	eq
 8002c5c:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002c60:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002c64:	f884 a031 	strb.w	sl, [r4, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 8002c68:	b00b      	add	sp, #44	; 0x2c
 8002c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6e:	2500      	movs	r5, #0
 8002c70:	e78f      	b.n	8002b92 <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SignalRefClipflag = 0;
 8002c72:	469b      	mov	fp, r3
 8002c74:	e7a2      	b.n	8002bbc <VL53L0X_get_pal_range_status+0xdc>
 8002c76:	f04f 0b00 	mov.w	fp, #0
 8002c7a:	e7a6      	b.n	8002bca <VL53L0X_get_pal_range_status+0xea>
		} else if (DeviceRangeStatusInternal == 1 ||
 8002c7c:	1e72      	subs	r2, r6, #1
 8002c7e:	2a02      	cmp	r2, #2
 8002c80:	d801      	bhi.n	8002c86 <VL53L0X_get_pal_range_status+0x1a6>
			*pPalRangeStatus = 5; /* HW fail */
 8002c82:	2205      	movs	r2, #5
 8002c84:	e7c2      	b.n	8002c0c <VL53L0X_get_pal_range_status+0x12c>
		} else if (DeviceRangeStatusInternal == 6 ||
 8002c86:	2e06      	cmp	r6, #6
 8002c88:	d001      	beq.n	8002c8e <VL53L0X_get_pal_range_status+0x1ae>
 8002c8a:	2e09      	cmp	r6, #9
 8002c8c:	d101      	bne.n	8002c92 <VL53L0X_get_pal_range_status+0x1b2>
			*pPalRangeStatus = 4;  /* Phase fail */
 8002c8e:	2204      	movs	r2, #4
 8002c90:	e7bc      	b.n	8002c0c <VL53L0X_get_pal_range_status+0x12c>
		} else if (DeviceRangeStatusInternal == 8 ||
 8002c92:	9b01      	ldr	r3, [sp, #4]
 8002c94:	f003 020d 	and.w	r2, r3, #13
 8002c98:	2a08      	cmp	r2, #8
 8002c9a:	d002      	beq.n	8002ca2 <VL53L0X_get_pal_range_status+0x1c2>
					DeviceRangeStatusInternal == 10 ||
 8002c9c:	f1bb 0f01 	cmp.w	fp, #1
 8002ca0:	d101      	bne.n	8002ca6 <VL53L0X_get_pal_range_status+0x1c6>
			*pPalRangeStatus = 3;  /* Min range */
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	e7b2      	b.n	8002c0c <VL53L0X_get_pal_range_status+0x12c>
		} else if (DeviceRangeStatusInternal == 4 ||
 8002ca6:	2e04      	cmp	r6, #4
 8002ca8:	d002      	beq.n	8002cb0 <VL53L0X_get_pal_range_status+0x1d0>
 8002caa:	f1ba 0f01 	cmp.w	sl, #1
 8002cae:	d101      	bne.n	8002cb4 <VL53L0X_get_pal_range_status+0x1d4>
			*pPalRangeStatus = 2;  /* Signal Fail */
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	e7ab      	b.n	8002c0c <VL53L0X_get_pal_range_status+0x12c>
		} else if (SigmaLimitflag == 1) {
 8002cb4:	2d01      	cmp	r5, #1
 8002cb6:	d101      	bne.n	8002cbc <VL53L0X_get_pal_range_status+0x1dc>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8002cb8:	2201      	movs	r2, #1
 8002cba:	e7a7      	b.n	8002c0c <VL53L0X_get_pal_range_status+0x12c>
			*pPalRangeStatus = 0; /* Range Valid */
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	703a      	strb	r2, [r7, #0]
 8002cc0:	46aa      	mov	sl, r5
 8002cc2:	e7a4      	b.n	8002c0e <VL53L0X_get_pal_range_status+0x12e>
	uint8_t RangeIgnoreThresholdflag = 0;
 8002cc4:	f04f 0a00 	mov.w	sl, #0
 8002cc8:	e7a1      	b.n	8002c0e <VL53L0X_get_pal_range_status+0x12e>
	...

08002ccc <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 8002cd0:	2102      	movs	r1, #2
{
 8002cd2:	4606      	mov	r6, r0
 8002cd4:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8002cd6:	f7fe ff22 	bl	8001b1e <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8002cda:	4605      	mov	r5, r0
 8002cdc:	b940      	cbnz	r0, 8002cf0 <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 8002cde:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8002ce2:	f104 0040 	add.w	r0, r4, #64	; 0x40
	if (ModuleIdInt == 0) {
 8002ce6:	b92b      	cbnz	r3, 8002cf4 <VL53L0X_check_part_used+0x28>
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8002ce8:	4905      	ldr	r1, [pc, #20]	; (8002d00 <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8002cea:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8002cec:	f001 ff82 	bl	8004bf4 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8002cf4:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8002cf8:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8002cfa:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 8002cfe:	e7f5      	b.n	8002cec <VL53L0X_check_part_used+0x20>
 8002d00:	08005fdb 	.word	0x08005fdb

08002d04 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8002d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d06:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8002d08:	460a      	mov	r2, r1
 8002d0a:	f10d 0107 	add.w	r1, sp, #7
{
 8002d0e:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8002d10:	f7ff ffdc 	bl	8002ccc <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8002d14:	bb00      	cbnz	r0, 8002d58 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8002d16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d1a:	b9fb      	cbnz	r3, 8002d5c <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8002d1c:	4915      	ldr	r1, [pc, #84]	; (8002d74 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8002d1e:	4620      	mov	r0, r4
 8002d20:	f001 ff68 	bl	8004bf4 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8002d24:	4914      	ldr	r1, [pc, #80]	; (8002d78 <VL53L0X_get_device_info+0x74>)
 8002d26:	f104 0020 	add.w	r0, r4, #32
 8002d2a:	f001 ff63 	bl	8004bf4 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8002d2e:	f104 0260 	add.w	r2, r4, #96	; 0x60
 8002d32:	21c0      	movs	r1, #192	; 0xc0
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 f846 	bl	8002dc6 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002d3a:	b968      	cbnz	r0, 8002d58 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8002d3c:	f10d 0206 	add.w	r2, sp, #6
 8002d40:	21c2      	movs	r1, #194	; 0xc2
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 f83f 	bl	8002dc6 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8002d4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002d52:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 8002d54:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 8002d58:	b003      	add	sp, #12
 8002d5a:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 8002d5c:	2b22      	cmp	r3, #34	; 0x22
 8002d5e:	d803      	bhi.n	8002d68 <VL53L0X_get_device_info+0x64>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d003      	beq.n	8002d6c <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8002d64:	4905      	ldr	r1, [pc, #20]	; (8002d7c <VL53L0X_get_device_info+0x78>)
 8002d66:	e7da      	b.n	8002d1e <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 8002d68:	2b26      	cmp	r3, #38	; 0x26
 8002d6a:	d801      	bhi.n	8002d70 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8002d6c:	4904      	ldr	r1, [pc, #16]	; (8002d80 <VL53L0X_get_device_info+0x7c>)
 8002d6e:	e7d6      	b.n	8002d1e <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8002d70:	4904      	ldr	r1, [pc, #16]	; (8002d84 <VL53L0X_get_device_info+0x80>)
 8002d72:	e7d4      	b.n	8002d1e <VL53L0X_get_device_info+0x1a>
 8002d74:	08006053 	.word	0x08006053
 8002d78:	0800608c 	.word	0x0800608c
 8002d7c:	0800605f 	.word	0x0800605f
 8002d80:	0800606b 	.word	0x0800606b
 8002d84:	08006077 	.word	0x08006077

08002d88 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002d88:	b507      	push	{r0, r1, r2, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002d8a:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	b293      	uxth	r3, r2
 8002d92:	460a      	mov	r2, r1
 8002d94:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
 8002d98:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8002d9c:	f000 fdf4 	bl	8003988 <HAL_I2C_Master_Transmit>
    
    return status;
}
 8002da0:	b003      	add	sp, #12
 8002da2:	f85d fb04 	ldr.w	pc, [sp], #4

08002da6 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002da6:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002da8:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002dac:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8002db6:	b293      	uxth	r3, r2
 8002db8:	460a      	mov	r2, r1
 8002dba:	f044 0101 	orr.w	r1, r4, #1
 8002dbe:	f000 fe79 	bl	8003ab4 <HAL_I2C_Master_Receive>
    
    return status;
}
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd10      	pop	{r4, pc}

08002dc6 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002dc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dc8:	4615      	mov	r5, r2
 8002dca:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f10d 0107 	add.w	r1, sp, #7
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002dd4:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8002dd6:	f7ff ffd7 	bl	8002d88 <_I2CWrite>
    
    if( status_int ){
 8002dda:	b928      	cbnz	r0, 8002de8 <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4629      	mov	r1, r5
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7ff ffe0 	bl	8002da6 <_I2CRead>
    
    if (status_int != 0) {
 8002de6:	b108      	cbz	r0, 8002dec <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002de8:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8002dec:	b003      	add	sp, #12
 8002dee:	bd30      	pop	{r4, r5, pc}

08002df0 <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8002df0:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df4:	460e      	mov	r6, r1
 8002df6:	4605      	mov	r5, r0
 8002df8:	4611      	mov	r1, r2
 8002dfa:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8002dfc:	d811      	bhi.n	8002e22 <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 8002dfe:	4f0a      	ldr	r7, [pc, #40]	; (8002e28 <VL53L0X_WriteMulti+0x38>)
 8002e00:	4638      	mov	r0, r7
    memcpy(&_I2CBuffer[1], pdata, count);
 8002e02:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8002e04:	f800 6b01 	strb.w	r6, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 8002e08:	f001 fe50 	bl	8004aac <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002e0c:	1c62      	adds	r2, r4, #1
 8002e0e:	4639      	mov	r1, r7
 8002e10:	4628      	mov	r0, r5
 8002e12:	f7ff ffb9 	bl	8002d88 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e16:	2800      	cmp	r0, #0
 8002e18:	bf0c      	ite	eq
 8002e1a:	2000      	moveq	r0, #0
 8002e1c:	f06f 0013 	mvnne.w	r0, #19
    }
    
    return Status;
}
 8002e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 8002e22:	f06f 0003 	mvn.w	r0, #3
 8002e26:	e7fb      	b.n	8002e20 <VL53L0X_WriteMulti+0x30>
 8002e28:	200004ec 	.word	0x200004ec

08002e2c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002e2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e2e:	4615      	mov	r5, r2
 8002e30:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	f10d 0107 	add.w	r1, sp, #7
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	461e      	mov	r6, r3
    status_int = _I2CWrite(Dev, &index, 1);
 8002e3e:	f7ff ffa3 	bl	8002d88 <_I2CWrite>
    
    if (status_int != 0) {
 8002e42:	b928      	cbnz	r0, 8002e50 <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8002e44:	4632      	mov	r2, r6
 8002e46:	4629      	mov	r1, r5
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff ffac 	bl	8002da6 <_I2CRead>
    
    if (status_int != 0) {
 8002e4e:	b108      	cbz	r0, 8002e54 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e50:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8002e54:	b002      	add	sp, #8
 8002e56:	bd70      	pop	{r4, r5, r6, pc}

08002e58 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8002e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e5a:	4614      	mov	r4, r2
 8002e5c:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8002e60:	2201      	movs	r2, #1
 8002e62:	f10d 0107 	add.w	r1, sp, #7
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8002e66:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8002e68:	f7ff ff8e 	bl	8002d88 <_I2CWrite>

    if( status_int ){
 8002e6c:	b118      	cbz	r0, 8002e76 <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002e6e:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 8002e72:	b002      	add	sp, #8
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002e76:	4d07      	ldr	r5, [pc, #28]	; (8002e94 <VL53L0X_RdWord+0x3c>)
 8002e78:	2202      	movs	r2, #2
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f7ff ff92 	bl	8002da6 <_I2CRead>
    if (status_int != 0) {
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d1f3      	bne.n	8002e6e <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002e86:	782a      	ldrb	r2, [r5, #0]
 8002e88:	786b      	ldrb	r3, [r5, #1]
 8002e8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002e8e:	8023      	strh	r3, [r4, #0]
 8002e90:	e7ef      	b.n	8002e72 <VL53L0X_RdWord+0x1a>
 8002e92:	bf00      	nop
 8002e94:	200004ec 	.word	0x200004ec

08002e98 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002e98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	f88d 1007 	strb.w	r1, [sp, #7]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f10d 0107 	add.w	r1, sp, #7
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002ea6:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8002ea8:	f7ff ff6e 	bl	8002d88 <_I2CWrite>
    
    if (status_int != 0) {
 8002eac:	b118      	cbz	r0, 8002eb6 <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002eae:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002eb6:	4d0a      	ldr	r5, [pc, #40]	; (8002ee0 <VL53L0X_RdDWord+0x48>)
 8002eb8:	2204      	movs	r2, #4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	4630      	mov	r0, r6
 8002ebe:	f7ff ff72 	bl	8002da6 <_I2CRead>
    if (status_int != 0) {
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d1f3      	bne.n	8002eae <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8002ec6:	786b      	ldrb	r3, [r5, #1]
 8002ec8:	782a      	ldrb	r2, [r5, #0]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8002ed0:	78ea      	ldrb	r2, [r5, #3]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	78aa      	ldrb	r2, [r5, #2]
 8002ed6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	e7e9      	b.n	8002eb2 <VL53L0X_RdDWord+0x1a>
 8002ede:	bf00      	nop
 8002ee0:	200004ec 	.word	0x200004ec

08002ee4 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8002ee4:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <VL53L0X_WrByte+0x1c>)
 8002ee8:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8002eea:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002eec:	4619      	mov	r1, r3
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f7ff ff4a 	bl	8002d88 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002ef4:	2800      	cmp	r0, #0
    }
    
    return Status;
}
 8002ef6:	bf14      	ite	ne
 8002ef8:	f06f 0013 	mvnne.w	r0, #19
 8002efc:	2000      	moveq	r0, #0
 8002efe:	bd08      	pop	{r3, pc}
 8002f00:	200004ec 	.word	0x200004ec

08002f04 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002f04:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <VL53L0X_WrWord+0x20>)
 8002f08:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8002f0a:	0a11      	lsrs	r1, r2, #8
 8002f0c:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8002f0e:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002f10:	4619      	mov	r1, r3
 8002f12:	2203      	movs	r2, #3
 8002f14:	f7ff ff38 	bl	8002d88 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002f18:	2800      	cmp	r0, #0
    }
    
    return Status;
}
 8002f1a:	bf14      	ite	ne
 8002f1c:	f06f 0013 	mvnne.w	r0, #19
 8002f20:	2000      	moveq	r0, #0
 8002f22:	bd08      	pop	{r3, pc}
 8002f24:	200004ec 	.word	0x200004ec

08002f28 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f2a:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002f2c:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002f30:	4606      	mov	r6, r0
 8002f32:	460f      	mov	r7, r1
 8002f34:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 8002f36:	f7ff ff46 	bl	8002dc6 <VL53L0X_RdByte>
    
    if (Status) {
 8002f3a:	b948      	cbnz	r0, 8002f50 <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8002f3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002f40:	402a      	ands	r2, r5
 8002f42:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 8002f48:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002f4c:	f7ff ffca 	bl	8002ee4 <VL53L0X_WrByte>
done:
    return Status;
}
 8002f50:	b003      	add	sp, #12
 8002f52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f54 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8002f54:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 8002f56:	2002      	movs	r0, #2
 8002f58:	f000 f9f8 	bl	800334c <HAL_Delay>
    return status;
}
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	bd08      	pop	{r3, pc}

08002f60 <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8002f60:	b084      	sub	sp, #16
 8002f62:	b507      	push	{r0, r1, r2, lr}
 8002f64:	f10d 0c10 	add.w	ip, sp, #16
 8002f68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev.Present){
 8002f6c:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d064      	beq.n	800303c <SetupSingleShot+0xdc>
    status=VL53L0X_StaticInit(&Dev);
 8002f72:	4660      	mov	r0, ip
 8002f74:	f7fe f906 	bl	8001184 <VL53L0X_StaticInit>
    if( status ){
 8002f78:	b110      	cbz	r0, 8002f80 <SetupSingleShot+0x20>
      printf("VL53L0X_StaticInit failed\n");
 8002f7a:	4833      	ldr	r0, [pc, #204]	; (8003048 <SetupSingleShot+0xe8>)
 8002f7c:	f001 fe32 	bl	8004be4 <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8002f80:	f10d 0202 	add.w	r2, sp, #2
 8002f84:	f10d 0101 	add.w	r1, sp, #1
 8002f88:	a804      	add	r0, sp, #16
 8002f8a:	f7fd fedb 	bl	8000d44 <VL53L0X_PerformRefCalibration>
    if( status ){
 8002f8e:	b110      	cbz	r0, 8002f96 <SetupSingleShot+0x36>
      printf("VL53L0X_PerformRefCalibration failed\n");
 8002f90:	482e      	ldr	r0, [pc, #184]	; (800304c <SetupSingleShot+0xec>)
 8002f92:	f001 fe27 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8002f96:	f10d 0203 	add.w	r2, sp, #3
 8002f9a:	a901      	add	r1, sp, #4
 8002f9c:	a804      	add	r0, sp, #16
 8002f9e:	f7fe f9f6 	bl	800138e <VL53L0X_PerformRefSpadManagement>
    if( status ){
 8002fa2:	b110      	cbz	r0, 8002faa <SetupSingleShot+0x4a>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8002fa4:	482a      	ldr	r0, [pc, #168]	; (8003050 <SetupSingleShot+0xf0>)
 8002fa6:	f001 fe1d 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8002faa:	2100      	movs	r1, #0
 8002fac:	a804      	add	r0, sp, #16
 8002fae:	f7fd fc75 	bl	800089c <VL53L0X_SetDeviceMode>
    if( status ){
 8002fb2:	b110      	cbz	r0, 8002fba <SetupSingleShot+0x5a>
      printf("VL53L0X_SetDeviceMode failed\n");
 8002fb4:	4827      	ldr	r0, [pc, #156]	; (8003054 <SetupSingleShot+0xf4>)
 8002fb6:	f001 fe15 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	a804      	add	r0, sp, #16
 8002fc0:	f7fd fd4a 	bl	8000a58 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8002fc4:	b110      	cbz	r0, 8002fcc <SetupSingleShot+0x6c>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8002fc6:	4824      	ldr	r0, [pc, #144]	; (8003058 <SetupSingleShot+0xf8>)
 8002fc8:	f001 fe0c 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	a804      	add	r0, sp, #16
 8002fd2:	f7fd fd41 	bl	8000a58 <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8002fd6:	b110      	cbz	r0, 8002fde <SetupSingleShot+0x7e>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8002fd8:	481f      	ldr	r0, [pc, #124]	; (8003058 <SetupSingleShot+0xf8>)
 8002fda:	f001 fe03 	bl	8004be4 <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8002fde:	f641 1299 	movw	r2, #6553	; 0x1999
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	a804      	add	r0, sp, #16
 8002fe6:	f7fd fd82 	bl	8000aee <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 8002fea:	b110      	cbz	r0, 8002ff2 <SetupSingleShot+0x92>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8002fec:	481b      	ldr	r0, [pc, #108]	; (800305c <SetupSingleShot+0xfc>)
 8002fee:	f001 fdf9 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8002ff2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	a804      	add	r0, sp, #16
 8002ffa:	f7fd fd78 	bl	8000aee <VL53L0X_SetLimitCheckValue>
    if( status ){
 8002ffe:	b110      	cbz	r0, 8003006 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8003000:	4816      	ldr	r0, [pc, #88]	; (800305c <SetupSingleShot+0xfc>)
 8003002:	f001 fdef 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8003006:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800300a:	a804      	add	r0, sp, #16
 800300c:	f7fd fc62 	bl	80008d4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 8003010:	b110      	cbz	r0, 8003018 <SetupSingleShot+0xb8>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8003012:	4813      	ldr	r0, [pc, #76]	; (8003060 <SetupSingleShot+0x100>)
 8003014:	f001 fde6 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8003018:	2212      	movs	r2, #18
 800301a:	2100      	movs	r1, #0
 800301c:	a804      	add	r0, sp, #16
 800301e:	f7fd fc5b 	bl	80008d8 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8003022:	b110      	cbz	r0, 800302a <SetupSingleShot+0xca>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8003024:	480f      	ldr	r0, [pc, #60]	; (8003064 <SetupSingleShot+0x104>)
 8003026:	f001 fddd 	bl	8004be4 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800302a:	220e      	movs	r2, #14
 800302c:	2101      	movs	r1, #1
 800302e:	a804      	add	r0, sp, #16
 8003030:	f7fd fc52 	bl	80008d8 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8003034:	b110      	cbz	r0, 800303c <SetupSingleShot+0xdc>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8003036:	480b      	ldr	r0, [pc, #44]	; (8003064 <SetupSingleShot+0x104>)
 8003038:	f001 fdd4 	bl	8004be4 <puts>
    }
    
    Dev.LeakyFirst=1;
  }
}
 800303c:	b003      	add	sp, #12
 800303e:	f85d eb04 	ldr.w	lr, [sp], #4
 8003042:	b004      	add	sp, #16
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	0800648a 	.word	0x0800648a
 800304c:	080064a4 	.word	0x080064a4
 8003050:	080064c9 	.word	0x080064c9
 8003054:	080064f1 	.word	0x080064f1
 8003058:	0800650e 	.word	0x0800650e
 800305c:	08006531 	.word	0x08006531
 8003060:	08006553 	.word	0x08006553
 8003064:	08006589 	.word	0x08006589

08003068 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8003068:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800306a:	4a2a      	ldr	r2, [pc, #168]	; (8003114 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800306c:	4c2a      	ldr	r4, [pc, #168]	; (8003118 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003070:	4d2b      	ldr	r5, [pc, #172]	; (8003120 <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003072:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003074:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003078:	2201      	movs	r2, #1
 800307a:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 800307e:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003082:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003086:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003088:	f043 0302 	orr.w	r3, r3, #2
 800308c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800308e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8003090:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800309a:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800309c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80030a0:	2312      	movs	r3, #18
 80030a2:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80030a6:	2003      	movs	r0, #3
 80030a8:	2304      	movs	r3, #4
 80030aa:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030ae:	a903      	add	r1, sp, #12
 80030b0:	481c      	ldr	r0, [pc, #112]	; (8003124 <I2Cx_Init.constprop.0+0xbc>)
 80030b2:	f000 f9c5 	bl	8003440 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030b6:	a903      	add	r1, sp, #12
 80030b8:	481a      	ldr	r0, [pc, #104]	; (8003124 <I2Cx_Init.constprop.0+0xbc>)
 80030ba:	f000 f9c1 	bl	8003440 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 80030be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c4:	65ab      	str	r3, [r5, #88]	; 0x58
 80030c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 80030d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80030d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d6:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 80030d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80030da:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030de:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80030e0:	4632      	mov	r2, r6
 80030e2:	210f      	movs	r1, #15
 80030e4:	2021      	movs	r0, #33	; 0x21
 80030e6:	f000 f957 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80030ea:	2021      	movs	r0, #33	; 0x21
 80030ec:	f000 f986 	bl	80033fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80030f0:	4632      	mov	r2, r6
 80030f2:	210f      	movs	r1, #15
 80030f4:	2022      	movs	r0, #34	; 0x22
 80030f6:	f000 f94f 	bl	8003398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80030fa:	2022      	movs	r0, #34	; 0x22
 80030fc:	f000 f97e 	bl	80033fc <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8003100:	4620      	mov	r0, r4
 8003102:	f000 fbef 	bl	80038e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003106:	4631      	mov	r1, r6
 8003108:	4620      	mov	r0, r4
}
 800310a:	b008      	add	sp, #32
 800310c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003110:	f000 bd68 	b.w	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 8003114:	40005800 	.word	0x40005800
 8003118:	2000052c 	.word	0x2000052c
 800311c:	00702681 	.word	0x00702681
 8003120:	40021000 	.word	0x40021000
 8003124:	48000400 	.word	0x48000400

08003128 <BSP_LED_Init>:
{
 8003128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800312a:	b948      	cbnz	r0, 8003140 <BSP_LED_Init+0x18>
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <BSP_LED_Init+0x3c>)
 800312e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003130:	f042 0202 	orr.w	r2, r2, #2
 8003134:	64da      	str	r2, [r3, #76]	; 0x4c
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003140:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003144:	2301      	movs	r3, #1
 8003146:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800314a:	2100      	movs	r1, #0
 800314c:	2302      	movs	r3, #2
 800314e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <BSP_LED_Init+0x40>)
 8003154:	a901      	add	r1, sp, #4
 8003156:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800315a:	f000 f971 	bl	8003440 <HAL_GPIO_Init>
}
 800315e:	b007      	add	sp, #28
 8003160:	f85d fb04 	ldr.w	pc, [sp], #4
 8003164:	40021000 	.word	0x40021000
 8003168:	20000444 	.word	0x20000444

0800316c <BSP_PB_Init>:
{
 800316c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <BSP_PB_Init+0x74>)
 8003170:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003172:	f042 0204 	orr.w	r2, r2, #4
 8003176:	64da      	str	r2, [r3, #76]	; 0x4c
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003182:	b989      	cbnz	r1, 80031a8 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003188:	e9cd 3101 	strd	r3, r1, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800318c:	2101      	movs	r1, #1
 800318e:	2302      	movs	r3, #2
 8003190:	e9cd 1303 	strd	r1, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <BSP_PB_Init+0x78>)
 8003196:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800319a:	a901      	add	r1, sp, #4
 800319c:	6840      	ldr	r0, [r0, #4]
 800319e:	f000 f94f 	bl	8003440 <HAL_GPIO_Init>
}
 80031a2:	b007      	add	sp, #28
 80031a4:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 80031a8:	2901      	cmp	r1, #1
 80031aa:	d1fa      	bne.n	80031a2 <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80031ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031b0:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b2:	2303      	movs	r3, #3
 80031b4:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80031b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80031ba:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <BSP_PB_Init+0x78>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 80031be:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80031c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80031c4:	a901      	add	r1, sp, #4
 80031c6:	6840      	ldr	r0, [r0, #4]
 80031c8:	f000 f93a 	bl	8003440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80031cc:	2200      	movs	r2, #0
 80031ce:	210f      	movs	r1, #15
 80031d0:	2028      	movs	r0, #40	; 0x28
 80031d2:	f000 f8e1 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80031d6:	2028      	movs	r0, #40	; 0x28
 80031d8:	f000 f910 	bl	80033fc <HAL_NVIC_EnableIRQ>
}
 80031dc:	e7e1      	b.n	80031a2 <BSP_PB_Init+0x36>
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	20000444 	.word	0x20000444

080031e8 <BSP_COM_Init>:
{
 80031e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ea:	460d      	mov	r5, r1
 80031ec:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80031ee:	b9d8      	cbnz	r0, 8003228 <BSP_COM_Init+0x40>
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <BSP_COM_Init+0x80>)
 80031f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031f4:	f042 0202 	orr.w	r2, r2, #2
 80031f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80031fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80031fc:	f002 0202 	and.w	r2, r2, #2
 8003200:	9200      	str	r2, [sp, #0]
 8003202:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003206:	f042 0202 	orr.w	r2, r2, #2
 800320a:	64da      	str	r2, [r3, #76]	; 0x4c
 800320c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800320e:	f002 0202 	and.w	r2, r2, #2
 8003212:	9201      	str	r2, [sp, #4]
 8003214:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003216:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800321c:	661a      	str	r2, [r3, #96]	; 0x60
 800321e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003228:	4c10      	ldr	r4, [pc, #64]	; (800326c <BSP_COM_Init+0x84>)
 800322a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800322e:	2602      	movs	r6, #2
 8003230:	2340      	movs	r3, #64	; 0x40
 8003232:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003236:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003238:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800323c:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800323e:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003240:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003242:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003244:	f000 f8fc 	bl	8003440 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003248:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800324a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 800324c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800324e:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003250:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003254:	f000 f8f4 	bl	8003440 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8003258:	6923      	ldr	r3, [r4, #16]
 800325a:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 800325c:	4628      	mov	r0, r5
 800325e:	f001 fbba 	bl	80049d6 <HAL_UART_Init>
}
 8003262:	b009      	add	sp, #36	; 0x24
 8003264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000
 800326c:	20000444 	.word	0x20000444

08003270 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8003270:	f7ff befa 	b.w	8003068 <I2Cx_Init.constprop.0>

08003274 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003274:	490f      	ldr	r1, [pc, #60]	; (80032b4 <SystemInit+0x40>)
 8003276:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800327a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <SystemInit+0x44>)
 8003284:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003286:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800328e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003296:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800329a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800329c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032a0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032a8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032aa:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b0:	608b      	str	r3, [r1, #8]
#endif
}
 80032b2:	4770      	bx	lr
 80032b4:	e000ed00 	.word	0xe000ed00
 80032b8:	40021000 	.word	0x40021000

080032bc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032c2:	4e0f      	ldr	r6, [pc, #60]	; (8003300 <HAL_InitTick+0x40>)
{
 80032c4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80032c6:	7830      	ldrb	r0, [r6, #0]
 80032c8:	b908      	cbnz	r0, 80032ce <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_InitTick+0x44>)
 80032d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80032d8:	6810      	ldr	r0, [r2, #0]
 80032da:	fbb0 f0f3 	udiv	r0, r0, r3
 80032de:	f000 f89b 	bl	8003418 <HAL_SYSTICK_Config>
 80032e2:	4604      	mov	r4, r0
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e8:	2d0f      	cmp	r5, #15
 80032ea:	d8ee      	bhi.n	80032ca <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	4602      	mov	r2, r0
 80032ee:	4629      	mov	r1, r5
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 f850 	bl	8003398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032f8:	6075      	str	r5, [r6, #4]
 80032fa:	4620      	mov	r0, r4
 80032fc:	e7e6      	b.n	80032cc <HAL_InitTick+0xc>
 80032fe:	bf00      	nop
 8003300:	2000045c 	.word	0x2000045c
 8003304:	20000458 	.word	0x20000458

08003308 <HAL_Init>:
{
 8003308:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800330a:	2003      	movs	r0, #3
 800330c:	f000 f832 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003310:	200f      	movs	r0, #15
 8003312:	f7ff ffd5 	bl	80032c0 <HAL_InitTick>
 8003316:	4604      	mov	r4, r0
 8003318:	b918      	cbnz	r0, 8003322 <HAL_Init+0x1a>
    HAL_MspInit();
 800331a:	f7ff ffcf 	bl	80032bc <HAL_MspInit>
}
 800331e:	4620      	mov	r0, r4
 8003320:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003322:	2401      	movs	r4, #1
 8003324:	e7fb      	b.n	800331e <HAL_Init+0x16>
	...

08003328 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003328:	4a03      	ldr	r2, [pc, #12]	; (8003338 <HAL_IncTick+0x10>)
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_IncTick+0x14>)
 800332c:	6811      	ldr	r1, [r2, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	440b      	add	r3, r1
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	200005fc 	.word	0x200005fc
 800333c:	2000045c 	.word	0x2000045c

08003340 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <HAL_GetTick+0x8>)
 8003342:	6818      	ldr	r0, [r3, #0]
}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	200005fc 	.word	0x200005fc

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003350:	f7ff fff6 	bl	8003340 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003354:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8003356:	bf1c      	itt	ne
 8003358:	4b05      	ldrne	r3, [pc, #20]	; (8003370 <HAL_Delay+0x24>)
 800335a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800335c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800335e:	bf18      	it	ne
 8003360:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003362:	f7ff ffed 	bl	8003340 <HAL_GetTick>
 8003366:	1b43      	subs	r3, r0, r5
 8003368:	42a3      	cmp	r3, r4
 800336a:	d3fa      	bcc.n	8003362 <HAL_Delay+0x16>
  {
  }
}
 800336c:	bd38      	pop	{r3, r4, r5, pc}
 800336e:	bf00      	nop
 8003370:	2000045c 	.word	0x2000045c

08003374 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003376:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800337c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003384:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003390:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339a:	b530      	push	{r4, r5, lr}
 800339c:	68dc      	ldr	r4, [r3, #12]
 800339e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a8:	2d04      	cmp	r5, #4
 80033aa:	bf28      	it	cs
 80033ac:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b4:	bf8c      	ite	hi
 80033b6:	3c03      	subhi	r4, #3
 80033b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ba:	fa03 f505 	lsl.w	r5, r3, r5
 80033be:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c2:	40a3      	lsls	r3, r4
 80033c4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80033ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	bfac      	ite	ge
 80033d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	4a08      	ldrlt	r2, [pc, #32]	; (80033f8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	bfb8      	it	lt
 80033de:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	bfaa      	itet	ge
 80033e6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80033f0:	bd30      	pop	{r4, r5, pc}
 80033f2:	bf00      	nop
 80033f4:	e000ed00 	.word	0xe000ed00
 80033f8:	e000ed14 	.word	0xe000ed14

080033fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80033fc:	2800      	cmp	r0, #0
 80033fe:	db08      	blt.n	8003412 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003400:	2301      	movs	r3, #1
 8003402:	0942      	lsrs	r2, r0, #5
 8003404:	f000 001f 	and.w	r0, r0, #31
 8003408:	fa03 f000 	lsl.w	r0, r3, r0
 800340c:	4b01      	ldr	r3, [pc, #4]	; (8003414 <HAL_NVIC_EnableIRQ+0x18>)
 800340e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100

08003418 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003418:	3801      	subs	r0, #1
 800341a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800341e:	d20b      	bcs.n	8003438 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003420:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	4a05      	ldr	r2, [pc, #20]	; (800343c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003426:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	21f0      	movs	r1, #240	; 0xf0
 800342a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003430:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003432:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003434:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003436:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003438:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003444:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80035f8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003448:	4c69      	ldr	r4, [pc, #420]	; (80035f0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800344a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344c:	680a      	ldr	r2, [r1, #0]
 800344e:	fa32 f503 	lsrs.w	r5, r2, r3
 8003452:	d102      	bne.n	800345a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003454:	b003      	add	sp, #12
 8003456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800345a:	f04f 0e01 	mov.w	lr, #1
 800345e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8003462:	ea1e 0202 	ands.w	r2, lr, r2
 8003466:	f000 8090 	beq.w	800358a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800346a:	684d      	ldr	r5, [r1, #4]
 800346c:	f005 0603 	and.w	r6, r5, #3
 8003470:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003474:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003478:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800347a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800347e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003480:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003484:	f200 8083 	bhi.w	800358e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8003488:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800348a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800348e:	68cf      	ldr	r7, [r1, #12]
 8003490:	fa07 f708 	lsl.w	r7, r7, r8
 8003494:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003498:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800349a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800349c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a0:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80034a4:	409f      	lsls	r7, r3
 80034a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80034aa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80034ac:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034ae:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b2:	688f      	ldr	r7, [r1, #8]
 80034b4:	fa07 f708 	lsl.w	r7, r7, r8
 80034b8:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034bc:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 80034be:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034c0:	d071      	beq.n	80035a6 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 80034c2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034c8:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034cc:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ce:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80034d2:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d4:	d059      	beq.n	800358a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80034da:	f046 0601 	orr.w	r6, r6, #1
 80034de:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80034e2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80034e6:	f023 0703 	bic.w	r7, r3, #3
 80034ea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80034ee:	f006 0601 	and.w	r6, r6, #1
 80034f2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80034f6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034f8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80034fe:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003500:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003504:	f04f 0c0f 	mov.w	ip, #15
 8003508:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800350c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003510:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003514:	d05f      	beq.n	80035d6 <HAL_GPIO_Init+0x196>
 8003516:	4e37      	ldr	r6, [pc, #220]	; (80035f4 <HAL_GPIO_Init+0x1b4>)
 8003518:	42b0      	cmp	r0, r6
 800351a:	d05e      	beq.n	80035da <HAL_GPIO_Init+0x19a>
 800351c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003520:	42b0      	cmp	r0, r6
 8003522:	d05c      	beq.n	80035de <HAL_GPIO_Init+0x19e>
 8003524:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003528:	42b0      	cmp	r0, r6
 800352a:	d05a      	beq.n	80035e2 <HAL_GPIO_Init+0x1a2>
 800352c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003530:	42b0      	cmp	r0, r6
 8003532:	d058      	beq.n	80035e6 <HAL_GPIO_Init+0x1a6>
 8003534:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003538:	42b0      	cmp	r0, r6
 800353a:	d056      	beq.n	80035ea <HAL_GPIO_Init+0x1aa>
 800353c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003540:	42b0      	cmp	r0, r6
 8003542:	bf0c      	ite	eq
 8003544:	2606      	moveq	r6, #6
 8003546:	2607      	movne	r6, #7
 8003548:	fa06 f60e 	lsl.w	r6, r6, lr
 800354c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003550:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8003552:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8003554:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003556:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800355a:	bf0c      	ite	eq
 800355c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800355e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8003560:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8003562:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003564:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003568:	bf0c      	ite	eq
 800356a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800356c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800356e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8003570:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003572:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003576:	bf0c      	ite	eq
 8003578:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800357a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800357c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800357e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003580:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8003582:	bf54      	ite	pl
 8003584:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8003586:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8003588:	6026      	str	r6, [r4, #0]
    position++;
 800358a:	3301      	adds	r3, #1
 800358c:	e75e      	b.n	800344c <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800358e:	2e03      	cmp	r6, #3
 8003590:	d18c      	bne.n	80034ac <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8003592:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003594:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003598:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 800359c:	409f      	lsls	r7, r3
 800359e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 80035a2:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a4:	e78d      	b.n	80034c2 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 80035a6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80035aa:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035ae:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80035b2:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80035ba:	f04f 0e0f 	mov.w	lr, #15
 80035be:	fa0e fe0b 	lsl.w	lr, lr, fp
 80035c2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035c6:	690f      	ldr	r7, [r1, #16]
 80035c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80035cc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80035d0:	f8ca 7020 	str.w	r7, [sl, #32]
 80035d4:	e775      	b.n	80034c2 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035d6:	2600      	movs	r6, #0
 80035d8:	e7b6      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035da:	2601      	movs	r6, #1
 80035dc:	e7b4      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035de:	2602      	movs	r6, #2
 80035e0:	e7b2      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035e2:	2603      	movs	r6, #3
 80035e4:	e7b0      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035e6:	2604      	movs	r6, #4
 80035e8:	e7ae      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035ea:	2605      	movs	r6, #5
 80035ec:	e7ac      	b.n	8003548 <HAL_GPIO_Init+0x108>
 80035ee:	bf00      	nop
 80035f0:	40010400 	.word	0x40010400
 80035f4:	48000400 	.word	0x48000400
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	b10a      	cbz	r2, 8003602 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035fe:	6181      	str	r1, [r0, #24]
 8003600:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003602:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003604:	4770      	bx	lr

08003606 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003606:	6803      	ldr	r3, [r0, #0]
 8003608:	699a      	ldr	r2, [r3, #24]
 800360a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800360c:	bf44      	itt	mi
 800360e:	2200      	movmi	r2, #0
 8003610:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003616:	bf5e      	ittt	pl
 8003618:	699a      	ldrpl	r2, [r3, #24]
 800361a:	f042 0201 	orrpl.w	r2, r2, #1
 800361e:	619a      	strpl	r2, [r3, #24]
  }
}
 8003620:	4770      	bx	lr
	...

08003624 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003624:	b530      	push	{r4, r5, lr}
 8003626:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003628:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362a:	432b      	orrs	r3, r5
 800362c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <I2C_TransferConfig+0x28>)
 8003632:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003634:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003638:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800363a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003642:	ea20 0002 	bic.w	r0, r0, r2
 8003646:	4303      	orrs	r3, r0
 8003648:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800364a:	bd30      	pop	{r4, r5, pc}
 800364c:	03ff63ff 	.word	0x03ff63ff

08003650 <I2C_IsErrorOccurred>:
{
 8003650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003654:	6803      	ldr	r3, [r0, #0]
 8003656:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003658:	f014 0410 	ands.w	r4, r4, #16
{
 800365c:	4605      	mov	r5, r0
 800365e:	4688      	mov	r8, r1
 8003660:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003662:	d079      	beq.n	8003758 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003664:	2210      	movs	r2, #16
 8003666:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 800366a:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	0694      	lsls	r4, r2, #26
 8003674:	d436      	bmi.n	80036e4 <I2C_IsErrorOccurred+0x94>
 8003676:	b10e      	cbz	r6, 800367c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8003678:	2404      	movs	r4, #4
 800367a:	e039      	b.n	80036f0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800367c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003680:	d0f6      	beq.n	8003670 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7ff fe5d 	bl	8003340 <HAL_GetTick>
 8003686:	1bc0      	subs	r0, r0, r7
 8003688:	4540      	cmp	r0, r8
 800368a:	d802      	bhi.n	8003692 <I2C_IsErrorOccurred+0x42>
 800368c:	f1b8 0f00 	cmp.w	r8, #0
 8003690:	d1ed      	bne.n	800366e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003692:	682b      	ldr	r3, [r5, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003696:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800369a:	6998      	ldr	r0, [r3, #24]
 800369c:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 800369e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036a0:	d50a      	bpl.n	80036b8 <I2C_IsErrorOccurred+0x68>
 80036a2:	0449      	lsls	r1, r1, #17
 80036a4:	d408      	bmi.n	80036b8 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 80036a6:	2a20      	cmp	r2, #32
 80036a8:	d006      	beq.n	80036b8 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b0:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80036b2:	f7ff fe45 	bl	8003340 <HAL_GetTick>
 80036b6:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	699c      	ldr	r4, [r3, #24]
 80036bc:	f014 0420 	ands.w	r4, r4, #32
 80036c0:	d1d5      	bne.n	800366e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c2:	f7ff fe3d 	bl	8003340 <HAL_GetTick>
 80036c6:	1bc0      	subs	r0, r0, r7
 80036c8:	2819      	cmp	r0, #25
 80036ca:	d9f5      	bls.n	80036b8 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 80036ce:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 80036d8:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 80036da:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80036de:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 80036e2:	e7e9      	b.n	80036b8 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	d1c7      	bne.n	8003678 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036e8:	2220      	movs	r2, #32
 80036ea:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80036ec:	2404      	movs	r4, #4
    status = HAL_ERROR;
 80036ee:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036f4:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036f6:	bf41      	itttt	mi
 80036f8:	f44f 7180 	movmi.w	r1, #256	; 0x100
 80036fc:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80036fe:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8003702:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003704:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003706:	bf41      	itttt	mi
 8003708:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800370c:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003710:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8003712:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003714:	0592      	lsls	r2, r2, #22
 8003716:	d521      	bpl.n	800375c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003718:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800371c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003720:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003722:	4628      	mov	r0, r5
 8003724:	f7ff ff6f 	bl	8003606 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003728:	682a      	ldr	r2, [r5, #0]
 800372a:	6853      	ldr	r3, [r2, #4]
 800372c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003730:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003734:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800373e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003740:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8003744:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003746:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374a:	2300      	movs	r3, #0
 800374c:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003750:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8003754:	2601      	movs	r6, #1
 8003756:	e003      	b.n	8003760 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	4626      	mov	r6, r4
 800375a:	e7c9      	b.n	80036f0 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 800375c:	2e00      	cmp	r6, #0
 800375e:	d1e0      	bne.n	8003722 <I2C_IsErrorOccurred+0xd2>
}
 8003760:	4630      	mov	r0, r6
 8003762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003766 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003766:	b570      	push	{r4, r5, r6, lr}
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
 800376c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	079b      	lsls	r3, r3, #30
 8003774:	d501      	bpl.n	800377a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003776:	2000      	movs	r0, #0
}
 8003778:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800377a:	4632      	mov	r2, r6
 800377c:	4629      	mov	r1, r5
 800377e:	4620      	mov	r0, r4
 8003780:	f7ff ff66 	bl	8003650 <I2C_IsErrorOccurred>
 8003784:	b9a0      	cbnz	r0, 80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003786:	1c6a      	adds	r2, r5, #1
 8003788:	d0f1      	beq.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7ff fdd9 	bl	8003340 <HAL_GetTick>
 800378e:	1b80      	subs	r0, r0, r6
 8003790:	42a8      	cmp	r0, r5
 8003792:	d801      	bhi.n	8003798 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003794:	2d00      	cmp	r5, #0
 8003796:	d1ea      	bne.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	2320      	movs	r3, #32
 80037a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80037ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
 80037b2:	e7e1      	b.n	8003778 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

080037b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	4604      	mov	r4, r0
 80037b8:	460d      	mov	r5, r1
 80037ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	075b      	lsls	r3, r3, #29
 80037c2:	d40e      	bmi.n	80037e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c4:	4632      	mov	r2, r6
 80037c6:	4629      	mov	r1, r5
 80037c8:	4620      	mov	r0, r4
 80037ca:	f7ff ff41 	bl	8003650 <I2C_IsErrorOccurred>
 80037ce:	bb38      	cbnz	r0, 8003820 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	0691      	lsls	r1, r2, #26
 80037d6:	d525      	bpl.n	8003824 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	0752      	lsls	r2, r2, #29
 80037dc:	d503      	bpl.n	80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 80037de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80037e0:	b10a      	cbz	r2, 80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 80037e2:	2000      	movs	r0, #0
}
 80037e4:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ec:	bf1c      	itt	ne
 80037ee:	2210      	movne	r2, #16
 80037f0:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f2:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037f6:	bf18      	it	ne
 80037f8:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fa:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037fc:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003804:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003808:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003814:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800381c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003820:	2001      	movs	r0, #1
 8003822:	e7df      	b.n	80037e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003824:	f7ff fd8c 	bl	8003340 <HAL_GetTick>
 8003828:	1b80      	subs	r0, r0, r6
 800382a:	42a8      	cmp	r0, r5
 800382c:	d801      	bhi.n	8003832 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 800382e:	2d00      	cmp	r5, #0
 8003830:	d1c4      	bne.n	80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003832:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800383a:	2320      	movs	r3, #32
 800383c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8003840:	2300      	movs	r3, #0
 8003842:	e7eb      	b.n	800381c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08003844 <I2C_WaitOnFlagUntilTimeout>:
{
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	9f06      	ldr	r7, [sp, #24]
 800384a:	4604      	mov	r4, r0
 800384c:	4688      	mov	r8, r1
 800384e:	4616      	mov	r6, r2
 8003850:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	6993      	ldr	r3, [r2, #24]
 8003856:	ea38 0303 	bics.w	r3, r8, r3
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	42b3      	cmp	r3, r6
 8003862:	d001      	beq.n	8003868 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8003864:	2000      	movs	r0, #0
 8003866:	e015      	b.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003868:	1c6b      	adds	r3, r5, #1
 800386a:	d0f3      	beq.n	8003854 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386c:	f7ff fd68 	bl	8003340 <HAL_GetTick>
 8003870:	1bc0      	subs	r0, r0, r7
 8003872:	42a8      	cmp	r0, r5
 8003874:	d801      	bhi.n	800387a <I2C_WaitOnFlagUntilTimeout+0x36>
 8003876:	2d00      	cmp	r5, #0
 8003878:	d1eb      	bne.n	8003852 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800387a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800387c:	f043 0320 	orr.w	r3, r3, #32
 8003880:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003882:	2320      	movs	r3, #32
 8003884:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	2300      	movs	r3, #0
 800388a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800388e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003892:	2001      	movs	r0, #1
}
 8003894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003898 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4604      	mov	r4, r0
 800389c:	460d      	mov	r5, r1
 800389e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	069b      	lsls	r3, r3, #26
 80038a6:	d501      	bpl.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80038a8:	2000      	movs	r0, #0
}
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ac:	4632      	mov	r2, r6
 80038ae:	4629      	mov	r1, r5
 80038b0:	4620      	mov	r0, r4
 80038b2:	f7ff fecd 	bl	8003650 <I2C_IsErrorOccurred>
 80038b6:	b990      	cbnz	r0, 80038de <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7ff fd42 	bl	8003340 <HAL_GetTick>
 80038bc:	1b80      	subs	r0, r0, r6
 80038be:	42a8      	cmp	r0, r5
 80038c0:	d801      	bhi.n	80038c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	d1ec      	bne.n	80038a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	2320      	movs	r3, #32
 80038d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80038da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80038de:	2001      	movs	r0, #1
 80038e0:	e7e3      	b.n	80038aa <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080038e2 <HAL_I2C_MspInit>:
}
 80038e2:	4770      	bx	lr

080038e4 <HAL_I2C_Init>:
{
 80038e4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80038e6:	4604      	mov	r4, r0
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d04a      	beq.n	8003982 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80038f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038f4:	b91b      	cbnz	r3, 80038fe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80038f6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80038fa:	f7ff fff2 	bl	80038e2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fe:	2324      	movs	r3, #36	; 0x24
 8003900:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003914:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800391c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800391e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003922:	2901      	cmp	r1, #1
 8003924:	d124      	bne.n	8003970 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800392a:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800393e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003940:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8003944:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003946:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800394c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800394e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800395e:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003960:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003962:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003964:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003968:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800396e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003970:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003974:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003976:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003978:	bf04      	itt	eq
 800397a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800397e:	605a      	streq	r2, [r3, #4]
 8003980:	e7d4      	b.n	800392c <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8003982:	2001      	movs	r0, #1
 8003984:	e7f3      	b.n	800396e <HAL_I2C_Init+0x8a>
	...

08003988 <HAL_I2C_Master_Transmit>:
{
 8003988:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800398e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003992:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003994:	2b20      	cmp	r3, #32
{
 8003996:	4604      	mov	r4, r0
 8003998:	460e      	mov	r6, r1
 800399a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	f040 8086 	bne.w	8003aac <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 80039a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f000 8081 	beq.w	8003aac <HAL_I2C_Master_Transmit+0x124>
 80039aa:	f04f 0a01 	mov.w	sl, #1
 80039ae:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80039b2:	f7ff fcc5 	bl	8003340 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80039b8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039ba:	9000      	str	r0, [sp, #0]
 80039bc:	4652      	mov	r2, sl
 80039be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c2:	4620      	mov	r0, r4
 80039c4:	f7ff ff3e 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	b118      	cbz	r0, 80039d2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 80039ca:	2001      	movs	r0, #1
}
 80039cc:	b002      	add	sp, #8
 80039ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d2:	2321      	movs	r3, #33	; 0x21
 80039d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039d8:	2310      	movs	r3, #16
 80039da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039de:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80039e0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80039e6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80039ee:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_I2C_Master_Transmit+0x128>)
 80039f2:	d926      	bls.n	8003a42 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039f8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039fe:	4631      	mov	r1, r6
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fe0f 	bl	8003624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0a:	462a      	mov	r2, r5
 8003a0c:	4639      	mov	r1, r7
 8003a0e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003a10:	b9fb      	cbnz	r3, 8003a52 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a12:	f7ff ff41 	bl	8003898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	d1d7      	bne.n	80039ca <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003a26:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003a2a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003a2e:	f022 0201 	bic.w	r2, r2, #1
 8003a32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003a38:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003a40:	e7c4      	b.n	80039cc <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003a42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a44:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003a46:	b292      	uxth	r2, r2
 8003a48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	e7d5      	b.n	80039fe <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a52:	f7ff fe88 	bl	8003766 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d1b7      	bne.n	80039ca <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a5c:	6822      	ldr	r2, [r4, #0]
 8003a5e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003a62:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003a64:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003a68:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003a72:	3a01      	subs	r2, #1
 8003a74:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a76:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003a78:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0c3      	beq.n	8003a06 <HAL_I2C_Master_Transmit+0x7e>
 8003a7e:	2a00      	cmp	r2, #0
 8003a80:	d1c1      	bne.n	8003a06 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a82:	9500      	str	r5, [sp, #0]
 8003a84:	463b      	mov	r3, r7
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	4620      	mov	r0, r4
 8003a8a:	f7ff fedb 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d19b      	bne.n	80039ca <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2bff      	cmp	r3, #255	; 0xff
 8003a98:	d903      	bls.n	8003aa2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a9e:	9000      	str	r0, [sp, #0]
 8003aa0:	e7ab      	b.n	80039fa <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8003aa2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aaa:	e7ce      	b.n	8003a4a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8003aac:	2002      	movs	r0, #2
 8003aae:	e78d      	b.n	80039cc <HAL_I2C_Master_Transmit+0x44>
 8003ab0:	80002000 	.word	0x80002000

08003ab4 <HAL_I2C_Master_Receive>:
{
 8003ab4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003abe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac0:	2b20      	cmp	r3, #32
{
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	460e      	mov	r6, r1
 8003ac6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac8:	f040 8087 	bne.w	8003bda <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8003acc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f000 8082 	beq.w	8003bda <HAL_I2C_Master_Receive+0x126>
 8003ad6:	f04f 0a01 	mov.w	sl, #1
 8003ada:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003ade:	f7ff fc2f 	bl	8003340 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8003ae4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ae6:	9000      	str	r0, [sp, #0]
 8003ae8:	4652      	mov	r2, sl
 8003aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7ff fea8 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003af4:	b118      	cbz	r0, 8003afe <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8003af6:	2001      	movs	r0, #1
}
 8003af8:	b002      	add	sp, #8
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003afe:	2322      	movs	r3, #34	; 0x22
 8003b00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b04:	2310      	movs	r3, #16
 8003b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b0a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003b0c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003b12:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8003b1a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1c:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_I2C_Master_Receive+0x12c>)
 8003b1e:	d926      	bls.n	8003b6e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b24:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b2a:	4631      	mov	r1, r6
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fd79 	bl	8003624 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b36:	462a      	mov	r2, r5
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8003b3c:	b9fb      	cbnz	r3, 8003b7e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b3e:	f7ff feab 	bl	8003898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d1d7      	bne.n	8003af6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	2120      	movs	r1, #32
 8003b4a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003b52:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003b56:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003b64:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b68:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003b6c:	e7c4      	b.n	8003af8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8003b6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b70:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8003b72:	b292      	uxth	r2, r2
 8003b74:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	e7d5      	b.n	8003b2a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7e:	f7ff fe19 	bl	80037b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1b7      	bne.n	8003af6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b8c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003b90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003b92:	3301      	adds	r3, #1
 8003b94:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003ba0:	3a01      	subs	r2, #1
 8003ba2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8003ba6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0c2      	beq.n	8003b32 <HAL_I2C_Master_Receive+0x7e>
 8003bac:	2a00      	cmp	r2, #0
 8003bae:	d1c0      	bne.n	8003b32 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bb0:	9500      	str	r5, [sp, #0]
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fe44 	bl	8003844 <I2C_WaitOnFlagUntilTimeout>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d19a      	bne.n	8003af6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2bff      	cmp	r3, #255	; 0xff
 8003bc6:	d903      	bls.n	8003bd0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bc8:	22ff      	movs	r2, #255	; 0xff
 8003bca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bcc:	9000      	str	r0, [sp, #0]
 8003bce:	e7aa      	b.n	8003b26 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8003bd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd8:	e7cd      	b.n	8003b76 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 8003bda:	2002      	movs	r0, #2
 8003bdc:	e78c      	b.n	8003af8 <HAL_I2C_Master_Receive+0x44>
 8003bde:	bf00      	nop
 8003be0:	80002400 	.word	0x80002400

08003be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	b2dc      	uxtb	r4, r3
 8003bee:	d11d      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d019      	beq.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	2324      	movs	r3, #36	; 0x24
 8003bfa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bfe:	6803      	ldr	r3, [r0, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4311      	orrs	r1, r2
 8003c14:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003c24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003c28:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003c2a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	e7fc      	b.n	8003c2a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08003c30 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <HAL_PWREx_GetVoltageRange+0xc>)
 8003c32:	6818      	ldr	r0, [r3, #0]
#endif
}
 8003c34:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40007000 	.word	0x40007000

08003c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c42:	4d1e      	ldr	r5, [pc, #120]	; (8003cbc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8003c44:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c46:	00da      	lsls	r2, r3, #3
{
 8003c48:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c4a:	d518      	bpl.n	8003c7e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c54:	d123      	bne.n	8003c9e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c56:	2c80      	cmp	r4, #128	; 0x80
 8003c58:	d929      	bls.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c5a:	2ca0      	cmp	r4, #160	; 0xa0
 8003c5c:	bf8c      	ite	hi
 8003c5e:	2002      	movhi	r0, #2
 8003c60:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	4303      	orrs	r3, r0
 8003c6c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003c74:	1a18      	subs	r0, r3, r0
 8003c76:	bf18      	it	ne
 8003c78:	2001      	movne	r0, #1
 8003c7a:	b003      	add	sp, #12
 8003c7c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c84:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c86:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c90:	f7ff ffce 	bl	8003c30 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c9c:	e7d8      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8003c9e:	2c80      	cmp	r4, #128	; 0x80
 8003ca0:	d807      	bhi.n	8003cb2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8003ca2:	d008      	beq.n	8003cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003ca4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003ca8:	4258      	negs	r0, r3
 8003caa:	4158      	adcs	r0, r3
 8003cac:	e7d9      	b.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e7d7      	b.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8003cb2:	2003      	movs	r0, #3
 8003cb4:	e7d5      	b.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	e7d3      	b.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc4:	4b22      	ldr	r3, [pc, #136]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003cc6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cca:	f012 020c 	ands.w	r2, r2, #12
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x18>
 8003cd0:	2a0c      	cmp	r2, #12
 8003cd2:	d115      	bne.n	8003d00 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cd8:	2901      	cmp	r1, #1
 8003cda:	d118      	bne.n	8003d0e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cdc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003cde:	481d      	ldr	r0, [pc, #116]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ce0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce2:	bf55      	itete	pl
 8003ce4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ce8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cea:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cee:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003cf2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cf6:	b34a      	cbz	r2, 8003d4c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cf8:	2a0c      	cmp	r2, #12
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x4c>
 8003cfc:	2000      	movs	r0, #0
  return sysclockfreq;
 8003cfe:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d00:	2a04      	cmp	r2, #4
 8003d02:	d022      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d04:	2a08      	cmp	r2, #8
 8003d06:	4814      	ldr	r0, [pc, #80]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d08:	bf18      	it	ne
 8003d0a:	2000      	movne	r0, #0
 8003d0c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d0e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8003d16:	2a02      	cmp	r2, #2
 8003d18:	d015      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x82>
 8003d1a:	490f      	ldr	r1, [pc, #60]	; (8003d58 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d1c:	2a03      	cmp	r2, #3
 8003d1e:	bf08      	it	eq
 8003d20:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d22:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003d2a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d2c:	68d8      	ldr	r0, [r3, #12]
 8003d2e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d32:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d36:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d38:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d3a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d3c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8003d40:	fbb2 f0f0 	udiv	r0, r2, r0
 8003d44:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003d46:	4805      	ldr	r0, [pc, #20]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d48:	e7eb      	b.n	8003d22 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8003d4a:	4804      	ldr	r0, [pc, #16]	; (8003d5c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	08005d68 	.word	0x08005d68
 8003d58:	007a1200 	.word	0x007a1200
 8003d5c:	00f42400 	.word	0x00f42400

08003d60 <HAL_RCC_OscConfig>:
{
 8003d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003d64:	4605      	mov	r5, r0
 8003d66:	b918      	cbnz	r0, 8003d70 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003d68:	2001      	movs	r0, #1
}
 8003d6a:	b003      	add	sp, #12
 8003d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d70:	4c92      	ldr	r4, [pc, #584]	; (8003fbc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d72:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d74:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d76:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d78:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d82:	d53d      	bpl.n	8003e00 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d84:	b11e      	cbz	r6, 8003d8e <HAL_RCC_OscConfig+0x2e>
 8003d86:	2e0c      	cmp	r6, #12
 8003d88:	d166      	bne.n	8003e58 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d8a:	2f01      	cmp	r7, #1
 8003d8c:	d164      	bne.n	8003e58 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8e:	6823      	ldr	r3, [r4, #0]
 8003d90:	0799      	lsls	r1, r3, #30
 8003d92:	d502      	bpl.n	8003d9a <HAL_RCC_OscConfig+0x3a>
 8003d94:	69ab      	ldr	r3, [r5, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0e6      	beq.n	8003d68 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	6a28      	ldr	r0, [r5, #32]
 8003d9e:	071a      	lsls	r2, r3, #28
 8003da0:	bf56      	itet	pl
 8003da2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003da6:	6823      	ldrmi	r3, [r4, #0]
 8003da8:	091b      	lsrpl	r3, r3, #4
 8003daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dae:	4298      	cmp	r0, r3
 8003db0:	d93b      	bls.n	8003e2a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db2:	f7ff ff45 	bl	8003c40 <RCC_SetFlashLatencyFromMSIRange>
 8003db6:	2800      	cmp	r0, #0
 8003db8:	d1d6      	bne.n	8003d68 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dba:	6823      	ldr	r3, [r4, #0]
 8003dbc:	f043 0308 	orr.w	r3, r3, #8
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	6a2a      	ldr	r2, [r5, #32]
 8003dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dce:	6863      	ldr	r3, [r4, #4]
 8003dd0:	69ea      	ldr	r2, [r5, #28]
 8003dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003dda:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ddc:	f7ff ff72 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	4a77      	ldr	r2, [pc, #476]	; (8003fc0 <HAL_RCC_OscConfig+0x260>)
 8003de4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	f003 031f 	and.w	r3, r3, #31
 8003dee:	40d8      	lsrs	r0, r3
 8003df0:	4b74      	ldr	r3, [pc, #464]	; (8003fc4 <HAL_RCC_OscConfig+0x264>)
 8003df2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003df4:	4b74      	ldr	r3, [pc, #464]	; (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	f7ff fa62 	bl	80032c0 <HAL_InitTick>
        if(status != HAL_OK)
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d1b4      	bne.n	8003d6a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	07d9      	lsls	r1, r3, #31
 8003e04:	d45f      	bmi.n	8003ec6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	682b      	ldr	r3, [r5, #0]
 8003e08:	079a      	lsls	r2, r3, #30
 8003e0a:	f100 809e 	bmi.w	8003f4a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	0719      	lsls	r1, r3, #28
 8003e12:	f100 80db 	bmi.w	8003fcc <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e16:	682b      	ldr	r3, [r5, #0]
 8003e18:	075a      	lsls	r2, r3, #29
 8003e1a:	f100 8101 	bmi.w	8004020 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f040 816a 	bne.w	80040fa <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8003e26:	2000      	movs	r0, #0
 8003e28:	e79f      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	6823      	ldr	r3, [r4, #0]
 8003e34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e38:	4303      	orrs	r3, r0
 8003e3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	69ea      	ldr	r2, [r5, #28]
 8003e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e48:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	d1c6      	bne.n	8003ddc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4e:	f7ff fef7 	bl	8003c40 <RCC_SetFlashLatencyFromMSIRange>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d0c2      	beq.n	8003ddc <HAL_RCC_OscConfig+0x7c>
 8003e56:	e787      	b.n	8003d68 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e58:	69ab      	ldr	r3, [r5, #24]
 8003e5a:	b31b      	cbz	r3, 8003ea4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e64:	f7ff fa6c 	bl	8003340 <HAL_GetTick>
 8003e68:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	079b      	lsls	r3, r3, #30
 8003e6e:	d511      	bpl.n	8003e94 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f043 0308 	orr.w	r3, r3, #8
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	6a2a      	ldr	r2, [r5, #32]
 8003e7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e80:	4313      	orrs	r3, r2
 8003e82:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e84:	6863      	ldr	r3, [r4, #4]
 8003e86:	69ea      	ldr	r2, [r5, #28]
 8003e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e90:	6063      	str	r3, [r4, #4]
 8003e92:	e7b5      	b.n	8003e00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e94:	f7ff fa54 	bl	8003340 <HAL_GetTick>
 8003e98:	eba0 0008 	sub.w	r0, r0, r8
 8003e9c:	2802      	cmp	r0, #2
 8003e9e:	d9e4      	bls.n	8003e6a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	e762      	b.n	8003d6a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eac:	f7ff fa48 	bl	8003340 <HAL_GetTick>
 8003eb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	0798      	lsls	r0, r3, #30
 8003eb6:	d5a3      	bpl.n	8003e00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eb8:	f7ff fa42 	bl	8003340 <HAL_GetTick>
 8003ebc:	eba0 0008 	sub.w	r0, r0, r8
 8003ec0:	2802      	cmp	r0, #2
 8003ec2:	d9f6      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x152>
 8003ec4:	e7ec      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ec6:	2e08      	cmp	r6, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x172>
 8003eca:	2e0c      	cmp	r6, #12
 8003ecc:	d108      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ece:	2f03      	cmp	r7, #3
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	039b      	lsls	r3, r3, #14
 8003ed6:	d596      	bpl.n	8003e06 <HAL_RCC_OscConfig+0xa6>
 8003ed8:	686b      	ldr	r3, [r5, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d193      	bne.n	8003e06 <HAL_RCC_OscConfig+0xa6>
 8003ede:	e743      	b.n	8003d68 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee0:	686b      	ldr	r3, [r5, #4]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee6:	d110      	bne.n	8003f0a <HAL_RCC_OscConfig+0x1aa>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003ef0:	f7ff fa26 	bl	8003340 <HAL_GetTick>
 8003ef4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	0398      	lsls	r0, r3, #14
 8003efa:	d484      	bmi.n	8003e06 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efc:	f7ff fa20 	bl	8003340 <HAL_GetTick>
 8003f00:	eba0 0008 	sub.w	r0, r0, r8
 8003f04:	2864      	cmp	r0, #100	; 0x64
 8003f06:	d9f6      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x196>
 8003f08:	e7ca      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f0e:	d104      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1ba>
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	e7e6      	b.n	8003ee8 <HAL_RCC_OscConfig+0x188>
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f20:	6022      	str	r2, [r4, #0]
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f28:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8003f2e:	f7ff fa07 	bl	8003340 <HAL_GetTick>
 8003f32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	0399      	lsls	r1, r3, #14
 8003f38:	f57f af65 	bpl.w	8003e06 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7ff fa00 	bl	8003340 <HAL_GetTick>
 8003f40:	eba0 0008 	sub.w	r0, r0, r8
 8003f44:	2864      	cmp	r0, #100	; 0x64
 8003f46:	d9f5      	bls.n	8003f34 <HAL_RCC_OscConfig+0x1d4>
 8003f48:	e7aa      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f4a:	2e04      	cmp	r6, #4
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1f6>
 8003f4e:	2e0c      	cmp	r6, #12
 8003f50:	d110      	bne.n	8003f74 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f52:	2f02      	cmp	r7, #2
 8003f54:	d10e      	bne.n	8003f74 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	055a      	lsls	r2, r3, #21
 8003f5a:	d503      	bpl.n	8003f64 <HAL_RCC_OscConfig+0x204>
 8003f5c:	68eb      	ldr	r3, [r5, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f43f af02 	beq.w	8003d68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	6863      	ldr	r3, [r4, #4]
 8003f66:	692a      	ldr	r2, [r5, #16]
 8003f68:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8003f6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f70:	6063      	str	r3, [r4, #4]
 8003f72:	e74c      	b.n	8003e0e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f74:	68eb      	ldr	r3, [r5, #12]
 8003f76:	b17b      	cbz	r3, 8003f98 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f80:	f7ff f9de 	bl	8003340 <HAL_GetTick>
 8003f84:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	055b      	lsls	r3, r3, #21
 8003f8a:	d4eb      	bmi.n	8003f64 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7ff f9d8 	bl	8003340 <HAL_GetTick>
 8003f90:	1bc0      	subs	r0, r0, r7
 8003f92:	2802      	cmp	r0, #2
 8003f94:	d9f7      	bls.n	8003f86 <HAL_RCC_OscConfig+0x226>
 8003f96:	e783      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003fa0:	f7ff f9ce 	bl	8003340 <HAL_GetTick>
 8003fa4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	0558      	lsls	r0, r3, #21
 8003faa:	f57f af30 	bpl.w	8003e0e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7ff f9c7 	bl	8003340 <HAL_GetTick>
 8003fb2:	1bc0      	subs	r0, r0, r7
 8003fb4:	2802      	cmp	r0, #2
 8003fb6:	d9f6      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x246>
 8003fb8:	e772      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
 8003fba:	bf00      	nop
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	08005d98 	.word	0x08005d98
 8003fc4:	20000458 	.word	0x20000458
 8003fc8:	20000460 	.word	0x20000460
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fcc:	696b      	ldr	r3, [r5, #20]
 8003fce:	b19b      	cbz	r3, 8003ff8 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8003fd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003fdc:	f7ff f9b0 	bl	8003340 <HAL_GetTick>
 8003fe0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fe6:	079b      	lsls	r3, r3, #30
 8003fe8:	f53f af15 	bmi.w	8003e16 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fec:	f7ff f9a8 	bl	8003340 <HAL_GetTick>
 8003ff0:	1bc0      	subs	r0, r0, r7
 8003ff2:	2802      	cmp	r0, #2
 8003ff4:	d9f5      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x282>
 8003ff6:	e753      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8003ff8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004004:	f7ff f99c 	bl	8003340 <HAL_GetTick>
 8004008:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800400a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800400e:	0798      	lsls	r0, r3, #30
 8004010:	f57f af01 	bpl.w	8003e16 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004014:	f7ff f994 	bl	8003340 <HAL_GetTick>
 8004018:	1bc0      	subs	r0, r0, r7
 800401a:	2802      	cmp	r0, #2
 800401c:	d9f5      	bls.n	800400a <HAL_RCC_OscConfig+0x2aa>
 800401e:	e73f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004022:	00d9      	lsls	r1, r3, #3
 8004024:	d429      	bmi.n	800407a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402c:	65a3      	str	r3, [r4, #88]	; 0x58
 800402e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004038:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403c:	4f89      	ldr	r7, [pc, #548]	; (8004264 <HAL_RCC_OscConfig+0x504>)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	05da      	lsls	r2, r3, #23
 8004042:	d51d      	bpl.n	8004080 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	68ab      	ldr	r3, [r5, #8]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d12b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x342>
 800404a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004056:	f7ff f973 	bl	8003340 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800405e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004060:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004064:	0798      	lsls	r0, r3, #30
 8004066:	d542      	bpl.n	80040ee <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8004068:	f1b8 0f00 	cmp.w	r8, #0
 800406c:	f43f aed7 	beq.w	8003e1e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004076:	65a3      	str	r3, [r4, #88]	; 0x58
 8004078:	e6d1      	b.n	8003e1e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800407a:	f04f 0800 	mov.w	r8, #0
 800407e:	e7dd      	b.n	800403c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004088:	f7ff f95a 	bl	8003340 <HAL_GetTick>
 800408c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	05db      	lsls	r3, r3, #23
 8004092:	d4d7      	bmi.n	8004044 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004094:	f7ff f954 	bl	8003340 <HAL_GetTick>
 8004098:	eba0 0009 	sub.w	r0, r0, r9
 800409c:	2802      	cmp	r0, #2
 800409e:	d9f6      	bls.n	800408e <HAL_RCC_OscConfig+0x32e>
 80040a0:	e6fe      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x354>
 80040a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80040b2:	e7ca      	b.n	800404a <HAL_RCC_OscConfig+0x2ea>
 80040b4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80040b8:	f022 0201 	bic.w	r2, r2, #1
 80040bc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80040c0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80040c4:	f022 0204 	bic.w	r2, r2, #4
 80040c8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1c2      	bne.n	8004056 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80040d0:	f7ff f936 	bl	8003340 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80040d8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80040de:	0799      	lsls	r1, r3, #30
 80040e0:	d5c2      	bpl.n	8004068 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7ff f92d 	bl	8003340 <HAL_GetTick>
 80040e6:	1bc0      	subs	r0, r0, r7
 80040e8:	4548      	cmp	r0, r9
 80040ea:	d9f6      	bls.n	80040da <HAL_RCC_OscConfig+0x37a>
 80040ec:	e6d8      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7ff f927 	bl	8003340 <HAL_GetTick>
 80040f2:	1bc0      	subs	r0, r0, r7
 80040f4:	4548      	cmp	r0, r9
 80040f6:	d9b3      	bls.n	8004060 <HAL_RCC_OscConfig+0x300>
 80040f8:	e6d2      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	f040 808f 	bne.w	800421e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8004100:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004104:	f003 0103 	and.w	r1, r3, #3
 8004108:	4291      	cmp	r1, r2
 800410a:	d124      	bne.n	8004156 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800410c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800410e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004112:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004114:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004118:	d11d      	bne.n	8004156 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800411a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800411c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004120:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004124:	d117      	bne.n	8004156 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004126:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004128:	3a07      	subs	r2, #7
 800412a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800412e:	bf18      	it	ne
 8004130:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004132:	4291      	cmp	r1, r2
 8004134:	d10f      	bne.n	8004156 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004136:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004138:	0852      	lsrs	r2, r2, #1
 800413a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800413e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004140:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004144:	d107      	bne.n	8004156 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004146:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004148:	0852      	lsrs	r2, r2, #1
 800414a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800414e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004150:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004154:	d04a      	beq.n	80041ec <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004156:	2e0c      	cmp	r6, #12
 8004158:	f43f ae06 	beq.w	8003d68 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	f53f ae02 	bmi.w	8003d68 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	f53f adfe 	bmi.w	8003d68 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004172:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8004174:	f7ff f8e4 	bl	8003340 <HAL_GetTick>
 8004178:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	019f      	lsls	r7, r3, #6
 800417e:	d42f      	bmi.n	80041e0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004180:	68e2      	ldr	r2, [r4, #12]
 8004182:	4b39      	ldr	r3, [pc, #228]	; (8004268 <HAL_RCC_OscConfig+0x508>)
 8004184:	4013      	ands	r3, r2
 8004186:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004188:	4313      	orrs	r3, r2
 800418a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800418c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004190:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004192:	3a01      	subs	r2, #1
 8004194:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004198:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800419a:	0912      	lsrs	r2, r2, #4
 800419c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80041a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80041a2:	0852      	lsrs	r2, r2, #1
 80041a4:	3a01      	subs	r2, #1
 80041a6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80041aa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80041b4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041bc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041be:	68e3      	ldr	r3, [r4, #12]
 80041c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80041c6:	f7ff f8bb 	bl	8003340 <HAL_GetTick>
 80041ca:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	0198      	lsls	r0, r3, #6
 80041d0:	f53f ae29 	bmi.w	8003e26 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7ff f8b4 	bl	8003340 <HAL_GetTick>
 80041d8:	1b40      	subs	r0, r0, r5
 80041da:	2802      	cmp	r0, #2
 80041dc:	d9f6      	bls.n	80041cc <HAL_RCC_OscConfig+0x46c>
 80041de:	e65f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e0:	f7ff f8ae 	bl	8003340 <HAL_GetTick>
 80041e4:	1b80      	subs	r0, r0, r6
 80041e6:	2802      	cmp	r0, #2
 80041e8:	d9c7      	bls.n	800417a <HAL_RCC_OscConfig+0x41a>
 80041ea:	e659      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	0199      	lsls	r1, r3, #6
 80041f0:	f53f ae19 	bmi.w	8003e26 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041fc:	68e3      	ldr	r3, [r4, #12]
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004202:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8004204:	f7ff f89c 	bl	8003340 <HAL_GetTick>
 8004208:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	019a      	lsls	r2, r3, #6
 800420e:	f53f ae0a 	bmi.w	8003e26 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004212:	f7ff f895 	bl	8003340 <HAL_GetTick>
 8004216:	1b40      	subs	r0, r0, r5
 8004218:	2802      	cmp	r0, #2
 800421a:	d9f6      	bls.n	800420a <HAL_RCC_OscConfig+0x4aa>
 800421c:	e640      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800421e:	2e0c      	cmp	r6, #12
 8004220:	f43f ada2 	beq.w	8003d68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004232:	bf02      	ittt	eq
 8004234:	68e3      	ldreq	r3, [r4, #12]
 8004236:	f023 0303 	biceq.w	r3, r3, #3
 800423a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004246:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004248:	f7ff f87a 	bl	8003340 <HAL_GetTick>
 800424c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800424e:	6823      	ldr	r3, [r4, #0]
 8004250:	019b      	lsls	r3, r3, #6
 8004252:	f57f ade8 	bpl.w	8003e26 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004256:	f7ff f873 	bl	8003340 <HAL_GetTick>
 800425a:	1b40      	subs	r0, r0, r5
 800425c:	2802      	cmp	r0, #2
 800425e:	d9f6      	bls.n	800424e <HAL_RCC_OscConfig+0x4ee>
 8004260:	e61e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x140>
 8004262:	bf00      	nop
 8004264:	40007000 	.word	0x40007000
 8004268:	f99d808c 	.word	0xf99d808c

0800426c <HAL_RCC_ClockConfig>:
{
 800426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004270:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004272:	4604      	mov	r4, r0
 8004274:	b910      	cbnz	r0, 800427c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004276:	2001      	movs	r0, #1
}
 8004278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800427c:	4a40      	ldr	r2, [pc, #256]	; (8004380 <HAL_RCC_ClockConfig+0x114>)
 800427e:	6813      	ldr	r3, [r2, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	428b      	cmp	r3, r1
 8004286:	d32a      	bcc.n	80042de <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	07d9      	lsls	r1, r3, #31
 800428c:	d432      	bmi.n	80042f4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428e:	6821      	ldr	r1, [r4, #0]
 8004290:	078a      	lsls	r2, r1, #30
 8004292:	d45b      	bmi.n	800434c <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4a3a      	ldr	r2, [pc, #232]	; (8004380 <HAL_RCC_ClockConfig+0x114>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	42ab      	cmp	r3, r5
 800429e:	d85d      	bhi.n	800435c <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a0:	f011 0f04 	tst.w	r1, #4
 80042a4:	4d37      	ldr	r5, [pc, #220]	; (8004384 <HAL_RCC_ClockConfig+0x118>)
 80042a6:	d164      	bne.n	8004372 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a8:	070b      	lsls	r3, r1, #28
 80042aa:	d506      	bpl.n	80042ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ac:	68ab      	ldr	r3, [r5, #8]
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80042b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80042b8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ba:	f7ff fd03 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 80042be:	68ab      	ldr	r3, [r5, #8]
 80042c0:	4a31      	ldr	r2, [pc, #196]	; (8004388 <HAL_RCC_ClockConfig+0x11c>)
 80042c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80042c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ca:	5cd3      	ldrb	r3, [r2, r3]
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	40d8      	lsrs	r0, r3
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <HAL_RCC_ClockConfig+0x120>)
 80042d4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCC_ClockConfig+0x124>)
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f7fe bff1 	b.w	80032c0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	f023 0307 	bic.w	r3, r3, #7
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e8:	6813      	ldr	r3, [r2, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	428b      	cmp	r3, r1
 80042f0:	d1c1      	bne.n	8004276 <HAL_RCC_ClockConfig+0xa>
 80042f2:	e7c9      	b.n	8004288 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f4:	6862      	ldr	r2, [r4, #4]
 80042f6:	4e23      	ldr	r6, [pc, #140]	; (8004384 <HAL_RCC_ClockConfig+0x118>)
 80042f8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fa:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042fc:	d11a      	bne.n	8004334 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004302:	d0b8      	beq.n	8004276 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004304:	68b3      	ldr	r3, [r6, #8]
 8004306:	f023 0303 	bic.w	r3, r3, #3
 800430a:	4313      	orrs	r3, r2
 800430c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800430e:	f7ff f817 	bl	8003340 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004312:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004316:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004318:	68b3      	ldr	r3, [r6, #8]
 800431a:	6862      	ldr	r2, [r4, #4]
 800431c:	f003 030c 	and.w	r3, r3, #12
 8004320:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004324:	d0b3      	beq.n	800428e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004326:	f7ff f80b 	bl	8003340 <HAL_GetTick>
 800432a:	1bc0      	subs	r0, r0, r7
 800432c:	4540      	cmp	r0, r8
 800432e:	d9f3      	bls.n	8004318 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8004330:	2003      	movs	r0, #3
 8004332:	e7a1      	b.n	8004278 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004334:	2a02      	cmp	r2, #2
 8004336:	d102      	bne.n	800433e <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004338:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800433c:	e7e1      	b.n	8004302 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800433e:	b912      	cbnz	r2, 8004346 <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004340:	f013 0f02 	tst.w	r3, #2
 8004344:	e7dd      	b.n	8004302 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004346:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800434a:	e7da      	b.n	8004302 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <HAL_RCC_ClockConfig+0x118>)
 800434e:	68a0      	ldr	r0, [r4, #8]
 8004350:	6893      	ldr	r3, [r2, #8]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	4303      	orrs	r3, r0
 8004358:	6093      	str	r3, [r2, #8]
 800435a:	e79b      	b.n	8004294 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435c:	6813      	ldr	r3, [r2, #0]
 800435e:	f023 0307 	bic.w	r3, r3, #7
 8004362:	432b      	orrs	r3, r5
 8004364:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	42ab      	cmp	r3, r5
 800436e:	d182      	bne.n	8004276 <HAL_RCC_ClockConfig+0xa>
 8004370:	e796      	b.n	80042a0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004372:	68ab      	ldr	r3, [r5, #8]
 8004374:	68e2      	ldr	r2, [r4, #12]
 8004376:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800437a:	4313      	orrs	r3, r2
 800437c:	60ab      	str	r3, [r5, #8]
 800437e:	e793      	b.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
 8004380:	40022000 	.word	0x40022000
 8004384:	40021000 	.word	0x40021000
 8004388:	08005d98 	.word	0x08005d98
 800438c:	20000458 	.word	0x20000458
 8004390:	20000460 	.word	0x20000460

08004394 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8004396:	4a06      	ldr	r2, [pc, #24]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a2:	6810      	ldr	r0, [r2, #0]
 80043a4:	f003 031f 	and.w	r3, r3, #31
}
 80043a8:	40d8      	lsrs	r0, r3
 80043aa:	4770      	bx	lr
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08005da8 	.word	0x08005da8
 80043b4:	20000458 	.word	0x20000458

080043b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80043ba:	4a06      	ldr	r2, [pc, #24]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c6:	6810      	ldr	r0, [r2, #0]
 80043c8:	f003 031f 	and.w	r3, r3, #31
}
 80043cc:	40d8      	lsrs	r0, r3
 80043ce:	4770      	bx	lr
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08005da8 	.word	0x08005da8
 80043d8:	20000458 	.word	0x20000458

080043dc <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80043dc:	4770      	bx	lr
	...

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	b570      	push	{r4, r5, r6, lr}
 80043e2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e6:	6921      	ldr	r1, [r4, #16]
 80043e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043ea:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ec:	69c0      	ldr	r0, [r0, #28]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	6961      	ldr	r1, [r4, #20]
 80043f2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f4:	4992      	ldr	r1, [pc, #584]	; (8004640 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	4029      	ands	r1, r5
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68e1      	ldr	r1, [r4, #12]
 8004402:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004406:	430a      	orrs	r2, r1
 8004408:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800440a:	4a8e      	ldr	r2, [pc, #568]	; (8004644 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800440c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800440e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004410:	bf1c      	itt	ne
 8004412:	6a22      	ldrne	r2, [r4, #32]
 8004414:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800441c:	430a      	orrs	r2, r1
 800441e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004420:	4a89      	ldr	r2, [pc, #548]	; (8004648 <UART_SetConfig+0x268>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d11b      	bne.n	800445e <UART_SetConfig+0x7e>
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <UART_SetConfig+0x26c>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	3b01      	subs	r3, #1
 8004432:	2b02      	cmp	r3, #2
 8004434:	f200 80d5 	bhi.w	80045e2 <UART_SetConfig+0x202>
 8004438:	4a85      	ldr	r2, [pc, #532]	; (8004650 <UART_SetConfig+0x270>)
 800443a:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800443c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004440:	f040 809f 	bne.w	8004582 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004444:	2b08      	cmp	r3, #8
 8004446:	d828      	bhi.n	800449a <UART_SetConfig+0xba>
 8004448:	e8df f013 	tbh	[pc, r3, lsl #1]
 800444c:	00ce00df 	.word	0x00ce00df
 8004450:	00270099 	.word	0x00270099
 8004454:	002700d4 	.word	0x002700d4
 8004458:	00270027 	.word	0x00270027
 800445c:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800445e:	4a7d      	ldr	r2, [pc, #500]	; (8004654 <UART_SetConfig+0x274>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <UART_SetConfig+0x96>
 8004464:	4b79      	ldr	r3, [pc, #484]	; (800464c <UART_SetConfig+0x26c>)
 8004466:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <UART_SetConfig+0x270>)
 800446c:	f002 020c 	and.w	r2, r2, #12
 8004470:	4413      	add	r3, r2
 8004472:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004474:	e7e2      	b.n	800443c <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004476:	4a78      	ldr	r2, [pc, #480]	; (8004658 <UART_SetConfig+0x278>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d119      	bne.n	80044b0 <UART_SetConfig+0xd0>
 800447c:	4b73      	ldr	r3, [pc, #460]	; (800464c <UART_SetConfig+0x26c>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004486:	2b20      	cmp	r3, #32
 8004488:	f000 80b7 	beq.w	80045fa <UART_SetConfig+0x21a>
 800448c:	d807      	bhi.n	800449e <UART_SetConfig+0xbe>
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 80b8 	beq.w	8004604 <UART_SetConfig+0x224>
 8004494:	2b10      	cmp	r3, #16
 8004496:	f000 80aa 	beq.w	80045ee <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449a:	2001      	movs	r0, #1
 800449c:	e04e      	b.n	800453c <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800449e:	2b30      	cmp	r3, #48	; 0x30
 80044a0:	d1fb      	bne.n	800449a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80044a6:	f000 80b4 	beq.w	8004612 <UART_SetConfig+0x232>
 80044aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80044ae:	e083      	b.n	80045b8 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b0:	4a6a      	ldr	r2, [pc, #424]	; (800465c <UART_SetConfig+0x27c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10f      	bne.n	80044d6 <UART_SetConfig+0xf6>
 80044b6:	4b65      	ldr	r3, [pc, #404]	; (800464c <UART_SetConfig+0x26c>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	f000 809a 	beq.w	80045fa <UART_SetConfig+0x21a>
 80044c6:	d804      	bhi.n	80044d2 <UART_SetConfig+0xf2>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 809b 	beq.w	8004604 <UART_SetConfig+0x224>
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	e7e1      	b.n	8004496 <UART_SetConfig+0xb6>
 80044d2:	2bc0      	cmp	r3, #192	; 0xc0
 80044d4:	e7e4      	b.n	80044a0 <UART_SetConfig+0xc0>
 80044d6:	4a62      	ldr	r2, [pc, #392]	; (8004660 <UART_SetConfig+0x280>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d112      	bne.n	8004502 <UART_SetConfig+0x122>
 80044dc:	4b5b      	ldr	r3, [pc, #364]	; (800464c <UART_SetConfig+0x26c>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ea:	f000 8086 	beq.w	80045fa <UART_SetConfig+0x21a>
 80044ee:	d805      	bhi.n	80044fc <UART_SetConfig+0x11c>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8087 	beq.w	8004604 <UART_SetConfig+0x224>
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fa:	e7cc      	b.n	8004496 <UART_SetConfig+0xb6>
 80044fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004500:	e7ce      	b.n	80044a0 <UART_SetConfig+0xc0>
 8004502:	4a50      	ldr	r2, [pc, #320]	; (8004644 <UART_SetConfig+0x264>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d1c8      	bne.n	800449a <UART_SetConfig+0xba>
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <UART_SetConfig+0x26c>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004516:	d015      	beq.n	8004544 <UART_SetConfig+0x164>
 8004518:	d806      	bhi.n	8004528 <UART_SetConfig+0x148>
 800451a:	b15b      	cbz	r3, 8004534 <UART_SetConfig+0x154>
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004520:	d1bb      	bne.n	800449a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8004522:	f7ff fbcf 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
        break;
 8004526:	e007      	b.n	8004538 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004528:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800452c:	d1b5      	bne.n	800449a <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 800452e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004532:	e008      	b.n	8004546 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7ff ff2e 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004538:	b928      	cbnz	r0, 8004546 <UART_SetConfig+0x166>
 800453a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800453e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8004542:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8004544:	4847      	ldr	r0, [pc, #284]	; (8004664 <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800454c:	4283      	cmp	r3, r0
 800454e:	d8a4      	bhi.n	800449a <UART_SetConfig+0xba>
 8004550:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004554:	d8a1      	bhi.n	800449a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004556:	0851      	lsrs	r1, r2, #1
 8004558:	2500      	movs	r5, #0
 800455a:	468c      	mov	ip, r1
 800455c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004560:	4629      	mov	r1, r5
 8004562:	fbe0 c106 	umlal	ip, r1, r0, r6
 8004566:	462b      	mov	r3, r5
 8004568:	4660      	mov	r0, ip
 800456a:	f7fb fe81 	bl	8000270 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800456e:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <UART_SetConfig+0x288>)
 8004570:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004574:	429a      	cmp	r2, r3
 8004576:	d890      	bhi.n	800449a <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	60d8      	str	r0, [r3, #12]
 800457c:	e7dd      	b.n	800453a <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800457e:	4839      	ldr	r0, [pc, #228]	; (8004664 <UART_SetConfig+0x284>)
 8004580:	e047      	b.n	8004612 <UART_SetConfig+0x232>
    switch (clocksource)
 8004582:	2b08      	cmp	r3, #8
 8004584:	d889      	bhi.n	800449a <UART_SetConfig+0xba>
 8004586:	a201      	add	r2, pc, #4	; (adr r2, 800458c <UART_SetConfig+0x1ac>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045b1 	.word	0x080045b1
 8004590:	080045d7 	.word	0x080045d7
 8004594:	08004601 	.word	0x08004601
 8004598:	0800449b 	.word	0x0800449b
 800459c:	080045dd 	.word	0x080045dd
 80045a0:	0800449b 	.word	0x0800449b
 80045a4:	0800449b 	.word	0x0800449b
 80045a8:	0800449b 	.word	0x0800449b
 80045ac:	080044ab 	.word	0x080044ab
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b0:	f7ff fef0 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80045b4:	2800      	cmp	r0, #0
 80045b6:	d0c0      	beq.n	800453a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045b8:	6862      	ldr	r2, [r4, #4]
 80045ba:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80045be:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80045c6:	f1a3 0110 	sub.w	r1, r3, #16
 80045ca:	4291      	cmp	r1, r2
 80045cc:	f63f af65 	bhi.w	800449a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	e7b1      	b.n	800453a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045d6:	f7ff feef 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80045da:	e7eb      	b.n	80045b4 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 80045dc:	f7ff fb72 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
        break;
 80045e0:	e7e8      	b.n	80045b4 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045e6:	d1f6      	bne.n	80045d6 <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7ff fee6 	bl	80043b8 <HAL_RCC_GetPCLK2Freq>
        break;
 80045ec:	e00f      	b.n	800460e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045f2:	d1f3      	bne.n	80045dc <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80045f4:	f7ff fb66 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
        break;
 80045f8:	e009      	b.n	800460e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045fe:	d0be      	beq.n	800457e <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 8004600:	4818      	ldr	r0, [pc, #96]	; (8004664 <UART_SetConfig+0x284>)
 8004602:	e7d9      	b.n	80045b8 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004604:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004608:	d1d2      	bne.n	80045b0 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7ff fec3 	bl	8004394 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800460e:	2800      	cmp	r0, #0
 8004610:	d093      	beq.n	800453a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004612:	6862      	ldr	r2, [r4, #4]
 8004614:	0853      	lsrs	r3, r2, #1
 8004616:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800461e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004622:	f1a0 0210 	sub.w	r2, r0, #16
 8004626:	429a      	cmp	r2, r3
 8004628:	f63f af37 	bhi.w	800449a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800462c:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8004630:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004632:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004634:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8004638:	4318      	orrs	r0, r3
 800463a:	60d0      	str	r0, [r2, #12]
 800463c:	e77d      	b.n	800453a <UART_SetConfig+0x15a>
 800463e:	bf00      	nop
 8004640:	efff69f3 	.word	0xefff69f3
 8004644:	40008000 	.word	0x40008000
 8004648:	40013800 	.word	0x40013800
 800464c:	40021000 	.word	0x40021000
 8004650:	08005db0 	.word	0x08005db0
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	40004c00 	.word	0x40004c00
 8004660:	40005000 	.word	0x40005000
 8004664:	00f42400 	.word	0x00f42400
 8004668:	000ffcff 	.word	0x000ffcff

0800466c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800466e:	07da      	lsls	r2, r3, #31
{
 8004670:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004672:	d506      	bpl.n	8004682 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004674:	6801      	ldr	r1, [r0, #0]
 8004676:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004678:	684a      	ldr	r2, [r1, #4]
 800467a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800467e:	4322      	orrs	r2, r4
 8004680:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004682:	079c      	lsls	r4, r3, #30
 8004684:	d506      	bpl.n	8004694 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004686:	6801      	ldr	r1, [r0, #0]
 8004688:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800468a:	684a      	ldr	r2, [r1, #4]
 800468c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004690:	4322      	orrs	r2, r4
 8004692:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004694:	0759      	lsls	r1, r3, #29
 8004696:	d506      	bpl.n	80046a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004698:	6801      	ldr	r1, [r0, #0]
 800469a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800469c:	684a      	ldr	r2, [r1, #4]
 800469e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a2:	4322      	orrs	r2, r4
 80046a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a6:	071a      	lsls	r2, r3, #28
 80046a8:	d506      	bpl.n	80046b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046aa:	6801      	ldr	r1, [r0, #0]
 80046ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80046ae:	684a      	ldr	r2, [r1, #4]
 80046b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b4:	4322      	orrs	r2, r4
 80046b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b8:	06dc      	lsls	r4, r3, #27
 80046ba:	d506      	bpl.n	80046ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046bc:	6801      	ldr	r1, [r0, #0]
 80046be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80046c0:	688a      	ldr	r2, [r1, #8]
 80046c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c6:	4322      	orrs	r2, r4
 80046c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ca:	0699      	lsls	r1, r3, #26
 80046cc:	d506      	bpl.n	80046dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046ce:	6801      	ldr	r1, [r0, #0]
 80046d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80046d2:	688a      	ldr	r2, [r1, #8]
 80046d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d8:	4322      	orrs	r2, r4
 80046da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046dc:	065a      	lsls	r2, r3, #25
 80046de:	d50f      	bpl.n	8004700 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e0:	6801      	ldr	r1, [r0, #0]
 80046e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80046e4:	684a      	ldr	r2, [r1, #4]
 80046e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80046ea:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046f2:	d105      	bne.n	8004700 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f4:	684a      	ldr	r2, [r1, #4]
 80046f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80046f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80046fc:	4322      	orrs	r2, r4
 80046fe:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	d506      	bpl.n	8004712 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004704:	6802      	ldr	r2, [r0, #0]
 8004706:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004708:	6853      	ldr	r3, [r2, #4]
 800470a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800470e:	430b      	orrs	r3, r1
 8004710:	6053      	str	r3, [r2, #4]
  }
}
 8004712:	bd10      	pop	{r4, pc}

08004714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800471c:	4604      	mov	r4, r0
 800471e:	460e      	mov	r6, r1
 8004720:	4615      	mov	r5, r2
 8004722:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004724:	6822      	ldr	r2, [r4, #0]
 8004726:	69d3      	ldr	r3, [r2, #28]
 8004728:	ea36 0303 	bics.w	r3, r6, r3
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	42ab      	cmp	r3, r5
 8004734:	d001      	beq.n	800473a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2000      	movs	r0, #0
 8004738:	e025      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800473a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800473e:	d0f2      	beq.n	8004726 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fe fdfe 	bl	8003340 <HAL_GetTick>
 8004744:	1bc0      	subs	r0, r0, r7
 8004746:	4540      	cmp	r0, r8
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	d802      	bhi.n	8004752 <UART_WaitOnFlagUntilTimeout+0x3e>
 800474c:	f1b8 0f00 	cmp.w	r8, #0
 8004750:	d11b      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	e840 3200 	strex	r2, r3, [r0]
 800475e:	2a00      	cmp	r2, #0
 8004760:	d1f7      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	f100 0308 	add.w	r3, r0, #8
 8004766:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	f100 0108 	add.w	r1, r0, #8
 8004772:	e841 3200 	strex	r2, r3, [r1]
 8004776:	2a00      	cmp	r2, #0
 8004778:	d1f3      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800477a:	2320      	movs	r3, #32
 800477c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800477e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004780:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8004784:	2003      	movs	r0, #3
}
 8004786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800478a:	6803      	ldr	r3, [r0, #0]
 800478c:	075a      	lsls	r2, r3, #29
 800478e:	d5c9      	bpl.n	8004724 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004790:	69c3      	ldr	r3, [r0, #28]
 8004792:	051b      	lsls	r3, r3, #20
 8004794:	d5c6      	bpl.n	8004724 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004796:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800479a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a4:	e840 3200 	strex	r2, r3, [r0]
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	d1f7      	bne.n	800479c <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	f100 0308 	add.w	r3, r0, #8
 80047b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	f100 0108 	add.w	r1, r0, #8
 80047bc:	e841 3200 	strex	r2, r3, [r1]
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d1f3      	bne.n	80047ac <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80047c4:	2320      	movs	r3, #32
 80047c6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047c8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80047ce:	e7d7      	b.n	8004780 <UART_WaitOnFlagUntilTimeout+0x6c>

080047d0 <HAL_UART_Transmit>:
{
 80047d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80047d4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80047d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80047d8:	2b20      	cmp	r3, #32
{
 80047da:	4604      	mov	r4, r0
 80047dc:	460e      	mov	r6, r1
 80047de:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80047e0:	d14e      	bne.n	8004880 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80047e2:	2900      	cmp	r1, #0
 80047e4:	d04a      	beq.n	800487c <HAL_UART_Transmit+0xac>
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	d048      	beq.n	800487c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80047ea:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d046      	beq.n	8004880 <HAL_UART_Transmit+0xb0>
 80047f2:	2301      	movs	r3, #1
 80047f4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f8:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047fc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004800:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004802:	f7fe fd9d 	bl	8003340 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004808:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800480c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004810:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8004812:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	d103      	bne.n	8004820 <HAL_UART_Transmit+0x50>
 8004818:	6922      	ldr	r2, [r4, #16]
 800481a:	b90a      	cbnz	r2, 8004820 <HAL_UART_Transmit+0x50>
 800481c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800481e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8004820:	2200      	movs	r2, #0
 8004822:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8004826:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800482e:	b292      	uxth	r2, r2
 8004830:	b93a      	cbnz	r2, 8004842 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	2140      	movs	r1, #64	; 0x40
 8004834:	4620      	mov	r0, r4
 8004836:	f7ff ff6d 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 800483a:	b950      	cbnz	r0, 8004852 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800483c:	2320      	movs	r3, #32
 800483e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004840:	e008      	b.n	8004854 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	2200      	movs	r2, #0
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	4620      	mov	r0, r4
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	f7ff ff63 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	b118      	cbz	r0, 800485a <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8004852:	2003      	movs	r0, #3
}
 8004854:	b004      	add	sp, #16
 8004856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485a:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800485c:	b95e      	cbnz	r6, 8004876 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800485e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004862:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004866:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8004868:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800486c:	3a01      	subs	r2, #1
 800486e:	b292      	uxth	r2, r2
 8004870:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004874:	e7d7      	b.n	8004826 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004876:	f816 2b01 	ldrb.w	r2, [r6], #1
 800487a:	e7f4      	b.n	8004866 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 800487c:	2001      	movs	r0, #1
 800487e:	e7e9      	b.n	8004854 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8004880:	2002      	movs	r0, #2
 8004882:	e7e7      	b.n	8004854 <HAL_UART_Transmit+0x84>

08004884 <HAL_UART_Receive>:
{
 8004884:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004888:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800488a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800488c:	2b20      	cmp	r3, #32
{
 800488e:	4604      	mov	r4, r0
 8004890:	460d      	mov	r5, r1
 8004892:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004894:	d168      	bne.n	8004968 <HAL_UART_Receive+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8004896:	2900      	cmp	r1, #0
 8004898:	d064      	beq.n	8004964 <HAL_UART_Receive+0xe0>
 800489a:	2a00      	cmp	r2, #0
 800489c:	d062      	beq.n	8004964 <HAL_UART_Receive+0xe0>
    __HAL_LOCK(huart);
 800489e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d060      	beq.n	8004968 <HAL_UART_Receive+0xe4>
 80048a6:	2301      	movs	r3, #1
 80048a8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	f04f 0800 	mov.w	r8, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b0:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b2:	f8c0 8080 	str.w	r8, [r0, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048b6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80048bc:	f7fe fd40 	bl	8003340 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80048c0:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80048c2:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80048ca:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 80048cc:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80048d0:	d11c      	bne.n	800490c <HAL_UART_Receive+0x88>
 80048d2:	6922      	ldr	r2, [r4, #16]
 80048d4:	b9c2      	cbnz	r2, 8004908 <HAL_UART_Receive+0x84>
 80048d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048da:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 80048e2:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e6:	d122      	bne.n	800492e <HAL_UART_Receive+0xaa>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	bb03      	cbnz	r3, 800492e <HAL_UART_Receive+0xaa>
 80048ec:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 80048ee:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 80048f0:	2300      	movs	r3, #0
 80048f2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    while (huart->RxXferCount > 0U)
 80048f6:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80048fa:	b290      	uxth	r0, r2
 80048fc:	b9c8      	cbnz	r0, 8004932 <HAL_UART_Receive+0xae>
    huart->RxState = HAL_UART_STATE_READY;
 80048fe:	2320      	movs	r3, #32
 8004900:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8004902:	b003      	add	sp, #12
 8004904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8004908:	22ff      	movs	r2, #255	; 0xff
 800490a:	e7e6      	b.n	80048da <HAL_UART_Receive+0x56>
 800490c:	b923      	cbnz	r3, 8004918 <HAL_UART_Receive+0x94>
 800490e:	6922      	ldr	r2, [r4, #16]
 8004910:	2a00      	cmp	r2, #0
 8004912:	d0f9      	beq.n	8004908 <HAL_UART_Receive+0x84>
 8004914:	227f      	movs	r2, #127	; 0x7f
 8004916:	e7e0      	b.n	80048da <HAL_UART_Receive+0x56>
 8004918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800491c:	d104      	bne.n	8004928 <HAL_UART_Receive+0xa4>
 800491e:	6922      	ldr	r2, [r4, #16]
 8004920:	2a00      	cmp	r2, #0
 8004922:	d0f7      	beq.n	8004914 <HAL_UART_Receive+0x90>
 8004924:	223f      	movs	r2, #63	; 0x3f
 8004926:	e7d8      	b.n	80048da <HAL_UART_Receive+0x56>
 8004928:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 800492c:	e7d7      	b.n	80048de <HAL_UART_Receive+0x5a>
      pdata16bits = NULL;
 800492e:	2600      	movs	r6, #0
 8004930:	e7de      	b.n	80048f0 <HAL_UART_Receive+0x6c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	9700      	str	r7, [sp, #0]
 8004934:	464b      	mov	r3, r9
 8004936:	2200      	movs	r2, #0
 8004938:	2120      	movs	r1, #32
 800493a:	4620      	mov	r0, r4
 800493c:	f7ff feea 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 8004940:	b9a0      	cbnz	r0, 800496c <HAL_UART_Receive+0xe8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004946:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 800494a:	b945      	cbnz	r5, 800495e <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800494c:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 8004950:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004954:	3a01      	subs	r2, #1
 8004956:	b292      	uxth	r2, r2
 8004958:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800495c:	e7cb      	b.n	80048f6 <HAL_UART_Receive+0x72>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800495e:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8004962:	e7f5      	b.n	8004950 <HAL_UART_Receive+0xcc>
      return  HAL_ERROR;
 8004964:	2001      	movs	r0, #1
 8004966:	e7cc      	b.n	8004902 <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 8004968:	2002      	movs	r0, #2
 800496a:	e7ca      	b.n	8004902 <HAL_UART_Receive+0x7e>
        return HAL_TIMEOUT;
 800496c:	2003      	movs	r0, #3
 800496e:	e7c8      	b.n	8004902 <HAL_UART_Receive+0x7e>

08004970 <UART_CheckIdleState>:
{
 8004970:	b530      	push	{r4, r5, lr}
 8004972:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004974:	2500      	movs	r5, #0
{
 8004976:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800497c:	f7fe fce0 	bl	8003340 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004986:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004988:	d415      	bmi.n	80049b6 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800498a:	6822      	ldr	r2, [r4, #0]
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	0752      	lsls	r2, r2, #29
 8004990:	d509      	bpl.n	80049a6 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004992:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004996:	9200      	str	r2, [sp, #0]
 8004998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800499c:	2200      	movs	r2, #0
 800499e:	4620      	mov	r0, r4
 80049a0:	f7ff feb8 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 80049a4:	b9a0      	cbnz	r0, 80049d0 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80049a6:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80049aa:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80049ac:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80049b0:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b2:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80049b4:	e00d      	b.n	80049d2 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049b6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80049ba:	9200      	str	r2, [sp, #0]
 80049bc:	9003      	str	r0, [sp, #12]
 80049be:	462a      	mov	r2, r5
 80049c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff fea5 	bl	8004714 <UART_WaitOnFlagUntilTimeout>
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d0dc      	beq.n	800498a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80049d0:	2003      	movs	r0, #3
}
 80049d2:	b005      	add	sp, #20
 80049d4:	bd30      	pop	{r4, r5, pc}

080049d6 <HAL_UART_Init>:
{
 80049d6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80049d8:	4604      	mov	r4, r0
 80049da:	b340      	cbz	r0, 8004a2e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80049dc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80049de:	b91b      	cbnz	r3, 80049e8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80049e0:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80049e4:	f7ff fcfa 	bl	80043dc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80049e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80049ea:	2324      	movs	r3, #36	; 0x24
 80049ec:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049f6:	4620      	mov	r0, r4
 80049f8:	f7ff fcf2 	bl	80043e0 <UART_SetConfig>
 80049fc:	2801      	cmp	r0, #1
 80049fe:	d016      	beq.n	8004a2e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a02:	b113      	cbz	r3, 8004a0a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7ff fe31 	bl	800466c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004a22:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004a24:	601a      	str	r2, [r3, #0]
}
 8004a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004a2a:	f7ff bfa1 	b.w	8004970 <UART_CheckIdleState>
}
 8004a2e:	2001      	movs	r0, #1
 8004a30:	bd10      	pop	{r4, pc}
	...

08004a34 <__errno>:
 8004a34:	4b01      	ldr	r3, [pc, #4]	; (8004a3c <__errno+0x8>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000464 	.word	0x20000464

08004a40 <getchar>:
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <getchar+0x20>)
 8004a42:	b510      	push	{r4, lr}
 8004a44:	681c      	ldr	r4, [r3, #0]
 8004a46:	b124      	cbz	r4, 8004a52 <getchar+0x12>
 8004a48:	69a3      	ldr	r3, [r4, #24]
 8004a4a:	b913      	cbnz	r3, 8004a52 <getchar+0x12>
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 fac5 	bl	8004fdc <__sinit>
 8004a52:	6861      	ldr	r1, [r4, #4]
 8004a54:	4620      	mov	r0, r4
 8004a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5a:	f000 bb79 	b.w	8005150 <_getc_r>
 8004a5e:	bf00      	nop
 8004a60:	20000464 	.word	0x20000464

08004a64 <__libc_init_array>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4d0d      	ldr	r5, [pc, #52]	; (8004a9c <__libc_init_array+0x38>)
 8004a68:	4c0d      	ldr	r4, [pc, #52]	; (8004aa0 <__libc_init_array+0x3c>)
 8004a6a:	1b64      	subs	r4, r4, r5
 8004a6c:	10a4      	asrs	r4, r4, #2
 8004a6e:	2600      	movs	r6, #0
 8004a70:	42a6      	cmp	r6, r4
 8004a72:	d109      	bne.n	8004a88 <__libc_init_array+0x24>
 8004a74:	4d0b      	ldr	r5, [pc, #44]	; (8004aa4 <__libc_init_array+0x40>)
 8004a76:	4c0c      	ldr	r4, [pc, #48]	; (8004aa8 <__libc_init_array+0x44>)
 8004a78:	f001 f968 	bl	8005d4c <_init>
 8004a7c:	1b64      	subs	r4, r4, r5
 8004a7e:	10a4      	asrs	r4, r4, #2
 8004a80:	2600      	movs	r6, #0
 8004a82:	42a6      	cmp	r6, r4
 8004a84:	d105      	bne.n	8004a92 <__libc_init_array+0x2e>
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a8c:	4798      	blx	r3
 8004a8e:	3601      	adds	r6, #1
 8004a90:	e7ee      	b.n	8004a70 <__libc_init_array+0xc>
 8004a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a96:	4798      	blx	r3
 8004a98:	3601      	adds	r6, #1
 8004a9a:	e7f2      	b.n	8004a82 <__libc_init_array+0x1e>
 8004a9c:	08006650 	.word	0x08006650
 8004aa0:	08006650 	.word	0x08006650
 8004aa4:	08006650 	.word	0x08006650
 8004aa8:	08006654 	.word	0x08006654

08004aac <memcpy>:
 8004aac:	440a      	add	r2, r1
 8004aae:	4291      	cmp	r1, r2
 8004ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ab4:	d100      	bne.n	8004ab8 <memcpy+0xc>
 8004ab6:	4770      	bx	lr
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ac2:	4291      	cmp	r1, r2
 8004ac4:	d1f9      	bne.n	8004aba <memcpy+0xe>
 8004ac6:	bd10      	pop	{r4, pc}

08004ac8 <memset>:
 8004ac8:	4402      	add	r2, r0
 8004aca:	4603      	mov	r3, r0
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d100      	bne.n	8004ad2 <memset+0xa>
 8004ad0:	4770      	bx	lr
 8004ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad6:	e7f9      	b.n	8004acc <memset+0x4>

08004ad8 <iprintf>:
 8004ad8:	b40f      	push	{r0, r1, r2, r3}
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <iprintf+0x2c>)
 8004adc:	b513      	push	{r0, r1, r4, lr}
 8004ade:	681c      	ldr	r4, [r3, #0]
 8004ae0:	b124      	cbz	r4, 8004aec <iprintf+0x14>
 8004ae2:	69a3      	ldr	r3, [r4, #24]
 8004ae4:	b913      	cbnz	r3, 8004aec <iprintf+0x14>
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 fa78 	bl	8004fdc <__sinit>
 8004aec:	ab05      	add	r3, sp, #20
 8004aee:	9a04      	ldr	r2, [sp, #16]
 8004af0:	68a1      	ldr	r1, [r4, #8]
 8004af2:	9301      	str	r3, [sp, #4]
 8004af4:	4620      	mov	r0, r4
 8004af6:	f000 fcdd 	bl	80054b4 <_vfiprintf_r>
 8004afa:	b002      	add	sp, #8
 8004afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b00:	b004      	add	sp, #16
 8004b02:	4770      	bx	lr
 8004b04:	20000464 	.word	0x20000464

08004b08 <_puts_r>:
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	460e      	mov	r6, r1
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	b118      	cbz	r0, 8004b18 <_puts_r+0x10>
 8004b10:	6983      	ldr	r3, [r0, #24]
 8004b12:	b90b      	cbnz	r3, 8004b18 <_puts_r+0x10>
 8004b14:	f000 fa62 	bl	8004fdc <__sinit>
 8004b18:	69ab      	ldr	r3, [r5, #24]
 8004b1a:	68ac      	ldr	r4, [r5, #8]
 8004b1c:	b913      	cbnz	r3, 8004b24 <_puts_r+0x1c>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fa5c 	bl	8004fdc <__sinit>
 8004b24:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <_puts_r+0xd0>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	d120      	bne.n	8004b6c <_puts_r+0x64>
 8004b2a:	686c      	ldr	r4, [r5, #4]
 8004b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b2e:	07db      	lsls	r3, r3, #31
 8004b30:	d405      	bmi.n	8004b3e <_puts_r+0x36>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	0598      	lsls	r0, r3, #22
 8004b36:	d402      	bmi.n	8004b3e <_puts_r+0x36>
 8004b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3a:	f000 fb4a 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8004b3e:	89a3      	ldrh	r3, [r4, #12]
 8004b40:	0719      	lsls	r1, r3, #28
 8004b42:	d51d      	bpl.n	8004b80 <_puts_r+0x78>
 8004b44:	6923      	ldr	r3, [r4, #16]
 8004b46:	b1db      	cbz	r3, 8004b80 <_puts_r+0x78>
 8004b48:	3e01      	subs	r6, #1
 8004b4a:	68a3      	ldr	r3, [r4, #8]
 8004b4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b50:	3b01      	subs	r3, #1
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	bb39      	cbnz	r1, 8004ba6 <_puts_r+0x9e>
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da38      	bge.n	8004bcc <_puts_r+0xc4>
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	210a      	movs	r1, #10
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 f850 	bl	8004c04 <__swbuf_r>
 8004b64:	3001      	adds	r0, #1
 8004b66:	d011      	beq.n	8004b8c <_puts_r+0x84>
 8004b68:	250a      	movs	r5, #10
 8004b6a:	e011      	b.n	8004b90 <_puts_r+0x88>
 8004b6c:	4b1b      	ldr	r3, [pc, #108]	; (8004bdc <_puts_r+0xd4>)
 8004b6e:	429c      	cmp	r4, r3
 8004b70:	d101      	bne.n	8004b76 <_puts_r+0x6e>
 8004b72:	68ac      	ldr	r4, [r5, #8]
 8004b74:	e7da      	b.n	8004b2c <_puts_r+0x24>
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <_puts_r+0xd8>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	bf08      	it	eq
 8004b7c:	68ec      	ldreq	r4, [r5, #12]
 8004b7e:	e7d5      	b.n	8004b2c <_puts_r+0x24>
 8004b80:	4621      	mov	r1, r4
 8004b82:	4628      	mov	r0, r5
 8004b84:	f000 f890 	bl	8004ca8 <__swsetup_r>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d0dd      	beq.n	8004b48 <_puts_r+0x40>
 8004b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8004b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b92:	07da      	lsls	r2, r3, #31
 8004b94:	d405      	bmi.n	8004ba2 <_puts_r+0x9a>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	059b      	lsls	r3, r3, #22
 8004b9a:	d402      	bmi.n	8004ba2 <_puts_r+0x9a>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9e:	f000 fb19 	bl	80051d4 <__retarget_lock_release_recursive>
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	bd70      	pop	{r4, r5, r6, pc}
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	da04      	bge.n	8004bb4 <_puts_r+0xac>
 8004baa:	69a2      	ldr	r2, [r4, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	dc06      	bgt.n	8004bbe <_puts_r+0xb6>
 8004bb0:	290a      	cmp	r1, #10
 8004bb2:	d004      	beq.n	8004bbe <_puts_r+0xb6>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	7019      	strb	r1, [r3, #0]
 8004bbc:	e7c5      	b.n	8004b4a <_puts_r+0x42>
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	f000 f81f 	bl	8004c04 <__swbuf_r>
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	d1bf      	bne.n	8004b4a <_puts_r+0x42>
 8004bca:	e7df      	b.n	8004b8c <_puts_r+0x84>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	250a      	movs	r5, #10
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	6022      	str	r2, [r4, #0]
 8004bd4:	701d      	strb	r5, [r3, #0]
 8004bd6:	e7db      	b.n	8004b90 <_puts_r+0x88>
 8004bd8:	080065d0 	.word	0x080065d0
 8004bdc:	080065f0 	.word	0x080065f0
 8004be0:	080065b0 	.word	0x080065b0

08004be4 <puts>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <puts+0xc>)
 8004be6:	4601      	mov	r1, r0
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f7ff bf8d 	b.w	8004b08 <_puts_r>
 8004bee:	bf00      	nop
 8004bf0:	20000464 	.word	0x20000464

08004bf4 <strcpy>:
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bfa:	f803 2b01 	strb.w	r2, [r3], #1
 8004bfe:	2a00      	cmp	r2, #0
 8004c00:	d1f9      	bne.n	8004bf6 <strcpy+0x2>
 8004c02:	4770      	bx	lr

08004c04 <__swbuf_r>:
 8004c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c06:	460e      	mov	r6, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	b118      	cbz	r0, 8004c16 <__swbuf_r+0x12>
 8004c0e:	6983      	ldr	r3, [r0, #24]
 8004c10:	b90b      	cbnz	r3, 8004c16 <__swbuf_r+0x12>
 8004c12:	f000 f9e3 	bl	8004fdc <__sinit>
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <__swbuf_r+0x98>)
 8004c18:	429c      	cmp	r4, r3
 8004c1a:	d12b      	bne.n	8004c74 <__swbuf_r+0x70>
 8004c1c:	686c      	ldr	r4, [r5, #4]
 8004c1e:	69a3      	ldr	r3, [r4, #24]
 8004c20:	60a3      	str	r3, [r4, #8]
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	071a      	lsls	r2, r3, #28
 8004c26:	d52f      	bpl.n	8004c88 <__swbuf_r+0x84>
 8004c28:	6923      	ldr	r3, [r4, #16]
 8004c2a:	b36b      	cbz	r3, 8004c88 <__swbuf_r+0x84>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	6820      	ldr	r0, [r4, #0]
 8004c30:	1ac0      	subs	r0, r0, r3
 8004c32:	6963      	ldr	r3, [r4, #20]
 8004c34:	b2f6      	uxtb	r6, r6
 8004c36:	4283      	cmp	r3, r0
 8004c38:	4637      	mov	r7, r6
 8004c3a:	dc04      	bgt.n	8004c46 <__swbuf_r+0x42>
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	4628      	mov	r0, r5
 8004c40:	f000 f926 	bl	8004e90 <_fflush_r>
 8004c44:	bb30      	cbnz	r0, 8004c94 <__swbuf_r+0x90>
 8004c46:	68a3      	ldr	r3, [r4, #8]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60a3      	str	r3, [r4, #8]
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	701e      	strb	r6, [r3, #0]
 8004c54:	6963      	ldr	r3, [r4, #20]
 8004c56:	3001      	adds	r0, #1
 8004c58:	4283      	cmp	r3, r0
 8004c5a:	d004      	beq.n	8004c66 <__swbuf_r+0x62>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	07db      	lsls	r3, r3, #31
 8004c60:	d506      	bpl.n	8004c70 <__swbuf_r+0x6c>
 8004c62:	2e0a      	cmp	r6, #10
 8004c64:	d104      	bne.n	8004c70 <__swbuf_r+0x6c>
 8004c66:	4621      	mov	r1, r4
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f000 f911 	bl	8004e90 <_fflush_r>
 8004c6e:	b988      	cbnz	r0, 8004c94 <__swbuf_r+0x90>
 8004c70:	4638      	mov	r0, r7
 8004c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <__swbuf_r+0x9c>)
 8004c76:	429c      	cmp	r4, r3
 8004c78:	d101      	bne.n	8004c7e <__swbuf_r+0x7a>
 8004c7a:	68ac      	ldr	r4, [r5, #8]
 8004c7c:	e7cf      	b.n	8004c1e <__swbuf_r+0x1a>
 8004c7e:	4b09      	ldr	r3, [pc, #36]	; (8004ca4 <__swbuf_r+0xa0>)
 8004c80:	429c      	cmp	r4, r3
 8004c82:	bf08      	it	eq
 8004c84:	68ec      	ldreq	r4, [r5, #12]
 8004c86:	e7ca      	b.n	8004c1e <__swbuf_r+0x1a>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f000 f80c 	bl	8004ca8 <__swsetup_r>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	d0cb      	beq.n	8004c2c <__swbuf_r+0x28>
 8004c94:	f04f 37ff 	mov.w	r7, #4294967295
 8004c98:	e7ea      	b.n	8004c70 <__swbuf_r+0x6c>
 8004c9a:	bf00      	nop
 8004c9c:	080065d0 	.word	0x080065d0
 8004ca0:	080065f0 	.word	0x080065f0
 8004ca4:	080065b0 	.word	0x080065b0

08004ca8 <__swsetup_r>:
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <__swsetup_r+0xcc>)
 8004caa:	b570      	push	{r4, r5, r6, lr}
 8004cac:	681d      	ldr	r5, [r3, #0]
 8004cae:	4606      	mov	r6, r0
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	b125      	cbz	r5, 8004cbe <__swsetup_r+0x16>
 8004cb4:	69ab      	ldr	r3, [r5, #24]
 8004cb6:	b913      	cbnz	r3, 8004cbe <__swsetup_r+0x16>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	f000 f98f 	bl	8004fdc <__sinit>
 8004cbe:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <__swsetup_r+0xd0>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	d10f      	bne.n	8004ce4 <__swsetup_r+0x3c>
 8004cc4:	686c      	ldr	r4, [r5, #4]
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ccc:	0719      	lsls	r1, r3, #28
 8004cce:	d42c      	bmi.n	8004d2a <__swsetup_r+0x82>
 8004cd0:	06dd      	lsls	r5, r3, #27
 8004cd2:	d411      	bmi.n	8004cf8 <__swsetup_r+0x50>
 8004cd4:	2309      	movs	r3, #9
 8004cd6:	6033      	str	r3, [r6, #0]
 8004cd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cdc:	81a3      	strh	r3, [r4, #12]
 8004cde:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce2:	e03e      	b.n	8004d62 <__swsetup_r+0xba>
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <__swsetup_r+0xd4>)
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d101      	bne.n	8004cee <__swsetup_r+0x46>
 8004cea:	68ac      	ldr	r4, [r5, #8]
 8004cec:	e7eb      	b.n	8004cc6 <__swsetup_r+0x1e>
 8004cee:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <__swsetup_r+0xd8>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	bf08      	it	eq
 8004cf4:	68ec      	ldreq	r4, [r5, #12]
 8004cf6:	e7e6      	b.n	8004cc6 <__swsetup_r+0x1e>
 8004cf8:	0758      	lsls	r0, r3, #29
 8004cfa:	d512      	bpl.n	8004d22 <__swsetup_r+0x7a>
 8004cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cfe:	b141      	cbz	r1, 8004d12 <__swsetup_r+0x6a>
 8004d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d04:	4299      	cmp	r1, r3
 8004d06:	d002      	beq.n	8004d0e <__swsetup_r+0x66>
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 fac9 	bl	80052a0 <_free_r>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6363      	str	r3, [r4, #52]	; 0x34
 8004d12:	89a3      	ldrh	r3, [r4, #12]
 8004d14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d18:	81a3      	strh	r3, [r4, #12]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	6063      	str	r3, [r4, #4]
 8004d1e:	6923      	ldr	r3, [r4, #16]
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	b94b      	cbnz	r3, 8004d42 <__swsetup_r+0x9a>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d38:	d003      	beq.n	8004d42 <__swsetup_r+0x9a>
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 fa6f 	bl	8005220 <__smakebuf_r>
 8004d42:	89a0      	ldrh	r0, [r4, #12]
 8004d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d48:	f010 0301 	ands.w	r3, r0, #1
 8004d4c:	d00a      	beq.n	8004d64 <__swsetup_r+0xbc>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60a3      	str	r3, [r4, #8]
 8004d52:	6963      	ldr	r3, [r4, #20]
 8004d54:	425b      	negs	r3, r3
 8004d56:	61a3      	str	r3, [r4, #24]
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	b943      	cbnz	r3, 8004d6e <__swsetup_r+0xc6>
 8004d5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d60:	d1ba      	bne.n	8004cd8 <__swsetup_r+0x30>
 8004d62:	bd70      	pop	{r4, r5, r6, pc}
 8004d64:	0781      	lsls	r1, r0, #30
 8004d66:	bf58      	it	pl
 8004d68:	6963      	ldrpl	r3, [r4, #20]
 8004d6a:	60a3      	str	r3, [r4, #8]
 8004d6c:	e7f4      	b.n	8004d58 <__swsetup_r+0xb0>
 8004d6e:	2000      	movs	r0, #0
 8004d70:	e7f7      	b.n	8004d62 <__swsetup_r+0xba>
 8004d72:	bf00      	nop
 8004d74:	20000464 	.word	0x20000464
 8004d78:	080065d0 	.word	0x080065d0
 8004d7c:	080065f0 	.word	0x080065f0
 8004d80:	080065b0 	.word	0x080065b0

08004d84 <__sflush_r>:
 8004d84:	898a      	ldrh	r2, [r1, #12]
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	0710      	lsls	r0, r2, #28
 8004d8e:	460c      	mov	r4, r1
 8004d90:	d458      	bmi.n	8004e44 <__sflush_r+0xc0>
 8004d92:	684b      	ldr	r3, [r1, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	dc05      	bgt.n	8004da4 <__sflush_r+0x20>
 8004d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	dc02      	bgt.n	8004da4 <__sflush_r+0x20>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d0f9      	beq.n	8004d9e <__sflush_r+0x1a>
 8004daa:	2300      	movs	r3, #0
 8004dac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004db0:	682f      	ldr	r7, [r5, #0]
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	d032      	beq.n	8004e1c <__sflush_r+0x98>
 8004db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	075a      	lsls	r2, r3, #29
 8004dbc:	d505      	bpl.n	8004dca <__sflush_r+0x46>
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	1ac0      	subs	r0, r0, r3
 8004dc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dc4:	b10b      	cbz	r3, 8004dca <__sflush_r+0x46>
 8004dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc8:	1ac0      	subs	r0, r0, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dd0:	6a21      	ldr	r1, [r4, #32]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	47b0      	blx	r6
 8004dd6:	1c43      	adds	r3, r0, #1
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	d106      	bne.n	8004dea <__sflush_r+0x66>
 8004ddc:	6829      	ldr	r1, [r5, #0]
 8004dde:	291d      	cmp	r1, #29
 8004de0:	d82c      	bhi.n	8004e3c <__sflush_r+0xb8>
 8004de2:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <__sflush_r+0x108>)
 8004de4:	40ca      	lsrs	r2, r1
 8004de6:	07d6      	lsls	r6, r2, #31
 8004de8:	d528      	bpl.n	8004e3c <__sflush_r+0xb8>
 8004dea:	2200      	movs	r2, #0
 8004dec:	6062      	str	r2, [r4, #4]
 8004dee:	04d9      	lsls	r1, r3, #19
 8004df0:	6922      	ldr	r2, [r4, #16]
 8004df2:	6022      	str	r2, [r4, #0]
 8004df4:	d504      	bpl.n	8004e00 <__sflush_r+0x7c>
 8004df6:	1c42      	adds	r2, r0, #1
 8004df8:	d101      	bne.n	8004dfe <__sflush_r+0x7a>
 8004dfa:	682b      	ldr	r3, [r5, #0]
 8004dfc:	b903      	cbnz	r3, 8004e00 <__sflush_r+0x7c>
 8004dfe:	6560      	str	r0, [r4, #84]	; 0x54
 8004e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e02:	602f      	str	r7, [r5, #0]
 8004e04:	2900      	cmp	r1, #0
 8004e06:	d0ca      	beq.n	8004d9e <__sflush_r+0x1a>
 8004e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e0c:	4299      	cmp	r1, r3
 8004e0e:	d002      	beq.n	8004e16 <__sflush_r+0x92>
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 fa45 	bl	80052a0 <_free_r>
 8004e16:	2000      	movs	r0, #0
 8004e18:	6360      	str	r0, [r4, #52]	; 0x34
 8004e1a:	e7c1      	b.n	8004da0 <__sflush_r+0x1c>
 8004e1c:	6a21      	ldr	r1, [r4, #32]
 8004e1e:	2301      	movs	r3, #1
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b0      	blx	r6
 8004e24:	1c41      	adds	r1, r0, #1
 8004e26:	d1c7      	bne.n	8004db8 <__sflush_r+0x34>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d0c4      	beq.n	8004db8 <__sflush_r+0x34>
 8004e2e:	2b1d      	cmp	r3, #29
 8004e30:	d001      	beq.n	8004e36 <__sflush_r+0xb2>
 8004e32:	2b16      	cmp	r3, #22
 8004e34:	d101      	bne.n	8004e3a <__sflush_r+0xb6>
 8004e36:	602f      	str	r7, [r5, #0]
 8004e38:	e7b1      	b.n	8004d9e <__sflush_r+0x1a>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	e7ad      	b.n	8004da0 <__sflush_r+0x1c>
 8004e44:	690f      	ldr	r7, [r1, #16]
 8004e46:	2f00      	cmp	r7, #0
 8004e48:	d0a9      	beq.n	8004d9e <__sflush_r+0x1a>
 8004e4a:	0793      	lsls	r3, r2, #30
 8004e4c:	680e      	ldr	r6, [r1, #0]
 8004e4e:	bf08      	it	eq
 8004e50:	694b      	ldreq	r3, [r1, #20]
 8004e52:	600f      	str	r7, [r1, #0]
 8004e54:	bf18      	it	ne
 8004e56:	2300      	movne	r3, #0
 8004e58:	eba6 0807 	sub.w	r8, r6, r7
 8004e5c:	608b      	str	r3, [r1, #8]
 8004e5e:	f1b8 0f00 	cmp.w	r8, #0
 8004e62:	dd9c      	ble.n	8004d9e <__sflush_r+0x1a>
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e68:	4643      	mov	r3, r8
 8004e6a:	463a      	mov	r2, r7
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b0      	blx	r6
 8004e70:	2800      	cmp	r0, #0
 8004e72:	dc06      	bgt.n	8004e82 <__sflush_r+0xfe>
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e78e      	b.n	8004da0 <__sflush_r+0x1c>
 8004e82:	4407      	add	r7, r0
 8004e84:	eba8 0800 	sub.w	r8, r8, r0
 8004e88:	e7e9      	b.n	8004e5e <__sflush_r+0xda>
 8004e8a:	bf00      	nop
 8004e8c:	20400001 	.word	0x20400001

08004e90 <_fflush_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	690b      	ldr	r3, [r1, #16]
 8004e94:	4605      	mov	r5, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	b913      	cbnz	r3, 8004ea0 <_fflush_r+0x10>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	b118      	cbz	r0, 8004eaa <_fflush_r+0x1a>
 8004ea2:	6983      	ldr	r3, [r0, #24]
 8004ea4:	b90b      	cbnz	r3, 8004eaa <_fflush_r+0x1a>
 8004ea6:	f000 f899 	bl	8004fdc <__sinit>
 8004eaa:	4b14      	ldr	r3, [pc, #80]	; (8004efc <_fflush_r+0x6c>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	d11b      	bne.n	8004ee8 <_fflush_r+0x58>
 8004eb0:	686c      	ldr	r4, [r5, #4]
 8004eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0ef      	beq.n	8004e9a <_fflush_r+0xa>
 8004eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ebc:	07d0      	lsls	r0, r2, #31
 8004ebe:	d404      	bmi.n	8004eca <_fflush_r+0x3a>
 8004ec0:	0599      	lsls	r1, r3, #22
 8004ec2:	d402      	bmi.n	8004eca <_fflush_r+0x3a>
 8004ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec6:	f000 f984 	bl	80051d2 <__retarget_lock_acquire_recursive>
 8004eca:	4628      	mov	r0, r5
 8004ecc:	4621      	mov	r1, r4
 8004ece:	f7ff ff59 	bl	8004d84 <__sflush_r>
 8004ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ed4:	07da      	lsls	r2, r3, #31
 8004ed6:	4605      	mov	r5, r0
 8004ed8:	d4e0      	bmi.n	8004e9c <_fflush_r+0xc>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	059b      	lsls	r3, r3, #22
 8004ede:	d4dd      	bmi.n	8004e9c <_fflush_r+0xc>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee2:	f000 f977 	bl	80051d4 <__retarget_lock_release_recursive>
 8004ee6:	e7d9      	b.n	8004e9c <_fflush_r+0xc>
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_fflush_r+0x70>)
 8004eea:	429c      	cmp	r4, r3
 8004eec:	d101      	bne.n	8004ef2 <_fflush_r+0x62>
 8004eee:	68ac      	ldr	r4, [r5, #8]
 8004ef0:	e7df      	b.n	8004eb2 <_fflush_r+0x22>
 8004ef2:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <_fflush_r+0x74>)
 8004ef4:	429c      	cmp	r4, r3
 8004ef6:	bf08      	it	eq
 8004ef8:	68ec      	ldreq	r4, [r5, #12]
 8004efa:	e7da      	b.n	8004eb2 <_fflush_r+0x22>
 8004efc:	080065d0 	.word	0x080065d0
 8004f00:	080065f0 	.word	0x080065f0
 8004f04:	080065b0 	.word	0x080065b0

08004f08 <fflush>:
 8004f08:	4601      	mov	r1, r0
 8004f0a:	b920      	cbnz	r0, 8004f16 <fflush+0xe>
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <fflush+0x18>)
 8004f0e:	4905      	ldr	r1, [pc, #20]	; (8004f24 <fflush+0x1c>)
 8004f10:	6818      	ldr	r0, [r3, #0]
 8004f12:	f000 b8fe 	b.w	8005112 <_fwalk_reent>
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <fflush+0x20>)
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f7ff bfb9 	b.w	8004e90 <_fflush_r>
 8004f1e:	bf00      	nop
 8004f20:	080065ac 	.word	0x080065ac
 8004f24:	08004e91 	.word	0x08004e91
 8004f28:	20000464 	.word	0x20000464

08004f2c <std>:
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	4604      	mov	r4, r0
 8004f32:	e9c0 3300 	strd	r3, r3, [r0]
 8004f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f3a:	6083      	str	r3, [r0, #8]
 8004f3c:	8181      	strh	r1, [r0, #12]
 8004f3e:	6643      	str	r3, [r0, #100]	; 0x64
 8004f40:	81c2      	strh	r2, [r0, #14]
 8004f42:	6183      	str	r3, [r0, #24]
 8004f44:	4619      	mov	r1, r3
 8004f46:	2208      	movs	r2, #8
 8004f48:	305c      	adds	r0, #92	; 0x5c
 8004f4a:	f7ff fdbd 	bl	8004ac8 <memset>
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <std+0x38>)
 8004f50:	6263      	str	r3, [r4, #36]	; 0x24
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <std+0x3c>)
 8004f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <std+0x40>)
 8004f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <std+0x44>)
 8004f5c:	6224      	str	r4, [r4, #32]
 8004f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	bf00      	nop
 8004f64:	08005ab5 	.word	0x08005ab5
 8004f68:	08005ad7 	.word	0x08005ad7
 8004f6c:	08005b0f 	.word	0x08005b0f
 8004f70:	08005b33 	.word	0x08005b33

08004f74 <_cleanup_r>:
 8004f74:	4901      	ldr	r1, [pc, #4]	; (8004f7c <_cleanup_r+0x8>)
 8004f76:	f000 b8cc 	b.w	8005112 <_fwalk_reent>
 8004f7a:	bf00      	nop
 8004f7c:	08004e91 	.word	0x08004e91

08004f80 <__sfmoreglue>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	2268      	movs	r2, #104	; 0x68
 8004f84:	1e4d      	subs	r5, r1, #1
 8004f86:	4355      	muls	r5, r2
 8004f88:	460e      	mov	r6, r1
 8004f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f8e:	f000 f9f3 	bl	8005378 <_malloc_r>
 8004f92:	4604      	mov	r4, r0
 8004f94:	b140      	cbz	r0, 8004fa8 <__sfmoreglue+0x28>
 8004f96:	2100      	movs	r1, #0
 8004f98:	e9c0 1600 	strd	r1, r6, [r0]
 8004f9c:	300c      	adds	r0, #12
 8004f9e:	60a0      	str	r0, [r4, #8]
 8004fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fa4:	f7ff fd90 	bl	8004ac8 <memset>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	bd70      	pop	{r4, r5, r6, pc}

08004fac <__sfp_lock_acquire>:
 8004fac:	4801      	ldr	r0, [pc, #4]	; (8004fb4 <__sfp_lock_acquire+0x8>)
 8004fae:	f000 b910 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 8004fb2:	bf00      	nop
 8004fb4:	20000601 	.word	0x20000601

08004fb8 <__sfp_lock_release>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__sfp_lock_release+0x8>)
 8004fba:	f000 b90b 	b.w	80051d4 <__retarget_lock_release_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	20000601 	.word	0x20000601

08004fc4 <__sinit_lock_acquire>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__sinit_lock_acquire+0x8>)
 8004fc6:	f000 b904 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20000602 	.word	0x20000602

08004fd0 <__sinit_lock_release>:
 8004fd0:	4801      	ldr	r0, [pc, #4]	; (8004fd8 <__sinit_lock_release+0x8>)
 8004fd2:	f000 b8ff 	b.w	80051d4 <__retarget_lock_release_recursive>
 8004fd6:	bf00      	nop
 8004fd8:	20000602 	.word	0x20000602

08004fdc <__sinit>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4604      	mov	r4, r0
 8004fe0:	f7ff fff0 	bl	8004fc4 <__sinit_lock_acquire>
 8004fe4:	69a3      	ldr	r3, [r4, #24]
 8004fe6:	b11b      	cbz	r3, 8004ff0 <__sinit+0x14>
 8004fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fec:	f7ff bff0 	b.w	8004fd0 <__sinit_lock_release>
 8004ff0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ff4:	6523      	str	r3, [r4, #80]	; 0x50
 8004ff6:	4b13      	ldr	r3, [pc, #76]	; (8005044 <__sinit+0x68>)
 8004ff8:	4a13      	ldr	r2, [pc, #76]	; (8005048 <__sinit+0x6c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ffe:	42a3      	cmp	r3, r4
 8005000:	bf04      	itt	eq
 8005002:	2301      	moveq	r3, #1
 8005004:	61a3      	streq	r3, [r4, #24]
 8005006:	4620      	mov	r0, r4
 8005008:	f000 f820 	bl	800504c <__sfp>
 800500c:	6060      	str	r0, [r4, #4]
 800500e:	4620      	mov	r0, r4
 8005010:	f000 f81c 	bl	800504c <__sfp>
 8005014:	60a0      	str	r0, [r4, #8]
 8005016:	4620      	mov	r0, r4
 8005018:	f000 f818 	bl	800504c <__sfp>
 800501c:	2200      	movs	r2, #0
 800501e:	60e0      	str	r0, [r4, #12]
 8005020:	2104      	movs	r1, #4
 8005022:	6860      	ldr	r0, [r4, #4]
 8005024:	f7ff ff82 	bl	8004f2c <std>
 8005028:	68a0      	ldr	r0, [r4, #8]
 800502a:	2201      	movs	r2, #1
 800502c:	2109      	movs	r1, #9
 800502e:	f7ff ff7d 	bl	8004f2c <std>
 8005032:	68e0      	ldr	r0, [r4, #12]
 8005034:	2202      	movs	r2, #2
 8005036:	2112      	movs	r1, #18
 8005038:	f7ff ff78 	bl	8004f2c <std>
 800503c:	2301      	movs	r3, #1
 800503e:	61a3      	str	r3, [r4, #24]
 8005040:	e7d2      	b.n	8004fe8 <__sinit+0xc>
 8005042:	bf00      	nop
 8005044:	080065ac 	.word	0x080065ac
 8005048:	08004f75 	.word	0x08004f75

0800504c <__sfp>:
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504e:	4607      	mov	r7, r0
 8005050:	f7ff ffac 	bl	8004fac <__sfp_lock_acquire>
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <__sfp+0x84>)
 8005056:	681e      	ldr	r6, [r3, #0]
 8005058:	69b3      	ldr	r3, [r6, #24]
 800505a:	b913      	cbnz	r3, 8005062 <__sfp+0x16>
 800505c:	4630      	mov	r0, r6
 800505e:	f7ff ffbd 	bl	8004fdc <__sinit>
 8005062:	3648      	adds	r6, #72	; 0x48
 8005064:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005068:	3b01      	subs	r3, #1
 800506a:	d503      	bpl.n	8005074 <__sfp+0x28>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	b30b      	cbz	r3, 80050b4 <__sfp+0x68>
 8005070:	6836      	ldr	r6, [r6, #0]
 8005072:	e7f7      	b.n	8005064 <__sfp+0x18>
 8005074:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005078:	b9d5      	cbnz	r5, 80050b0 <__sfp+0x64>
 800507a:	4b16      	ldr	r3, [pc, #88]	; (80050d4 <__sfp+0x88>)
 800507c:	60e3      	str	r3, [r4, #12]
 800507e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005082:	6665      	str	r5, [r4, #100]	; 0x64
 8005084:	f000 f8a4 	bl	80051d0 <__retarget_lock_init_recursive>
 8005088:	f7ff ff96 	bl	8004fb8 <__sfp_lock_release>
 800508c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005094:	6025      	str	r5, [r4, #0]
 8005096:	61a5      	str	r5, [r4, #24]
 8005098:	2208      	movs	r2, #8
 800509a:	4629      	mov	r1, r5
 800509c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050a0:	f7ff fd12 	bl	8004ac8 <memset>
 80050a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050ac:	4620      	mov	r0, r4
 80050ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b0:	3468      	adds	r4, #104	; 0x68
 80050b2:	e7d9      	b.n	8005068 <__sfp+0x1c>
 80050b4:	2104      	movs	r1, #4
 80050b6:	4638      	mov	r0, r7
 80050b8:	f7ff ff62 	bl	8004f80 <__sfmoreglue>
 80050bc:	4604      	mov	r4, r0
 80050be:	6030      	str	r0, [r6, #0]
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d1d5      	bne.n	8005070 <__sfp+0x24>
 80050c4:	f7ff ff78 	bl	8004fb8 <__sfp_lock_release>
 80050c8:	230c      	movs	r3, #12
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	e7ee      	b.n	80050ac <__sfp+0x60>
 80050ce:	bf00      	nop
 80050d0:	080065ac 	.word	0x080065ac
 80050d4:	ffff0001 	.word	0xffff0001

080050d8 <_fwalk>:
 80050d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050dc:	460f      	mov	r7, r1
 80050de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050e2:	2600      	movs	r6, #0
 80050e4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80050e8:	f1b8 0801 	subs.w	r8, r8, #1
 80050ec:	d505      	bpl.n	80050fa <_fwalk+0x22>
 80050ee:	6824      	ldr	r4, [r4, #0]
 80050f0:	2c00      	cmp	r4, #0
 80050f2:	d1f7      	bne.n	80050e4 <_fwalk+0xc>
 80050f4:	4630      	mov	r0, r6
 80050f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050fa:	89ab      	ldrh	r3, [r5, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d906      	bls.n	800510e <_fwalk+0x36>
 8005100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005104:	3301      	adds	r3, #1
 8005106:	d002      	beq.n	800510e <_fwalk+0x36>
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	4306      	orrs	r6, r0
 800510e:	3568      	adds	r5, #104	; 0x68
 8005110:	e7ea      	b.n	80050e8 <_fwalk+0x10>

08005112 <_fwalk_reent>:
 8005112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005116:	4606      	mov	r6, r0
 8005118:	4688      	mov	r8, r1
 800511a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800511e:	2700      	movs	r7, #0
 8005120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005124:	f1b9 0901 	subs.w	r9, r9, #1
 8005128:	d505      	bpl.n	8005136 <_fwalk_reent+0x24>
 800512a:	6824      	ldr	r4, [r4, #0]
 800512c:	2c00      	cmp	r4, #0
 800512e:	d1f7      	bne.n	8005120 <_fwalk_reent+0xe>
 8005130:	4638      	mov	r0, r7
 8005132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005136:	89ab      	ldrh	r3, [r5, #12]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d907      	bls.n	800514c <_fwalk_reent+0x3a>
 800513c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005140:	3301      	adds	r3, #1
 8005142:	d003      	beq.n	800514c <_fwalk_reent+0x3a>
 8005144:	4629      	mov	r1, r5
 8005146:	4630      	mov	r0, r6
 8005148:	47c0      	blx	r8
 800514a:	4307      	orrs	r7, r0
 800514c:	3568      	adds	r5, #104	; 0x68
 800514e:	e7e9      	b.n	8005124 <_fwalk_reent+0x12>

08005150 <_getc_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	460c      	mov	r4, r1
 8005154:	4605      	mov	r5, r0
 8005156:	b118      	cbz	r0, 8005160 <_getc_r+0x10>
 8005158:	6983      	ldr	r3, [r0, #24]
 800515a:	b90b      	cbnz	r3, 8005160 <_getc_r+0x10>
 800515c:	f7ff ff3e 	bl	8004fdc <__sinit>
 8005160:	4b18      	ldr	r3, [pc, #96]	; (80051c4 <_getc_r+0x74>)
 8005162:	429c      	cmp	r4, r3
 8005164:	d11e      	bne.n	80051a4 <_getc_r+0x54>
 8005166:	686c      	ldr	r4, [r5, #4]
 8005168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800516a:	07d8      	lsls	r0, r3, #31
 800516c:	d405      	bmi.n	800517a <_getc_r+0x2a>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	0599      	lsls	r1, r3, #22
 8005172:	d402      	bmi.n	800517a <_getc_r+0x2a>
 8005174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005176:	f000 f82c 	bl	80051d2 <__retarget_lock_acquire_recursive>
 800517a:	6863      	ldr	r3, [r4, #4]
 800517c:	3b01      	subs	r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	da19      	bge.n	80051b8 <_getc_r+0x68>
 8005184:	4628      	mov	r0, r5
 8005186:	4621      	mov	r1, r4
 8005188:	f000 fc58 	bl	8005a3c <__srget_r>
 800518c:	4605      	mov	r5, r0
 800518e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005190:	07da      	lsls	r2, r3, #31
 8005192:	d405      	bmi.n	80051a0 <_getc_r+0x50>
 8005194:	89a3      	ldrh	r3, [r4, #12]
 8005196:	059b      	lsls	r3, r3, #22
 8005198:	d402      	bmi.n	80051a0 <_getc_r+0x50>
 800519a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800519c:	f000 f81a 	bl	80051d4 <__retarget_lock_release_recursive>
 80051a0:	4628      	mov	r0, r5
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <_getc_r+0x78>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d101      	bne.n	80051ae <_getc_r+0x5e>
 80051aa:	68ac      	ldr	r4, [r5, #8]
 80051ac:	e7dc      	b.n	8005168 <_getc_r+0x18>
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <_getc_r+0x7c>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	bf08      	it	eq
 80051b4:	68ec      	ldreq	r4, [r5, #12]
 80051b6:	e7d7      	b.n	8005168 <_getc_r+0x18>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	6022      	str	r2, [r4, #0]
 80051be:	781d      	ldrb	r5, [r3, #0]
 80051c0:	e7e5      	b.n	800518e <_getc_r+0x3e>
 80051c2:	bf00      	nop
 80051c4:	080065d0 	.word	0x080065d0
 80051c8:	080065f0 	.word	0x080065f0
 80051cc:	080065b0 	.word	0x080065b0

080051d0 <__retarget_lock_init_recursive>:
 80051d0:	4770      	bx	lr

080051d2 <__retarget_lock_acquire_recursive>:
 80051d2:	4770      	bx	lr

080051d4 <__retarget_lock_release_recursive>:
 80051d4:	4770      	bx	lr

080051d6 <__swhatbuf_r>:
 80051d6:	b570      	push	{r4, r5, r6, lr}
 80051d8:	460e      	mov	r6, r1
 80051da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051de:	2900      	cmp	r1, #0
 80051e0:	b096      	sub	sp, #88	; 0x58
 80051e2:	4614      	mov	r4, r2
 80051e4:	461d      	mov	r5, r3
 80051e6:	da08      	bge.n	80051fa <__swhatbuf_r+0x24>
 80051e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	061a      	lsls	r2, r3, #24
 80051f2:	d410      	bmi.n	8005216 <__swhatbuf_r+0x40>
 80051f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051f8:	e00e      	b.n	8005218 <__swhatbuf_r+0x42>
 80051fa:	466a      	mov	r2, sp
 80051fc:	f000 fcc0 	bl	8005b80 <_fstat_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	dbf1      	blt.n	80051e8 <__swhatbuf_r+0x12>
 8005204:	9a01      	ldr	r2, [sp, #4]
 8005206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800520a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800520e:	425a      	negs	r2, r3
 8005210:	415a      	adcs	r2, r3
 8005212:	602a      	str	r2, [r5, #0]
 8005214:	e7ee      	b.n	80051f4 <__swhatbuf_r+0x1e>
 8005216:	2340      	movs	r3, #64	; 0x40
 8005218:	2000      	movs	r0, #0
 800521a:	6023      	str	r3, [r4, #0]
 800521c:	b016      	add	sp, #88	; 0x58
 800521e:	bd70      	pop	{r4, r5, r6, pc}

08005220 <__smakebuf_r>:
 8005220:	898b      	ldrh	r3, [r1, #12]
 8005222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005224:	079d      	lsls	r5, r3, #30
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	d507      	bpl.n	800523c <__smakebuf_r+0x1c>
 800522c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	6123      	str	r3, [r4, #16]
 8005234:	2301      	movs	r3, #1
 8005236:	6163      	str	r3, [r4, #20]
 8005238:	b002      	add	sp, #8
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	ab01      	add	r3, sp, #4
 800523e:	466a      	mov	r2, sp
 8005240:	f7ff ffc9 	bl	80051d6 <__swhatbuf_r>
 8005244:	9900      	ldr	r1, [sp, #0]
 8005246:	4605      	mov	r5, r0
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f895 	bl	8005378 <_malloc_r>
 800524e:	b948      	cbnz	r0, 8005264 <__smakebuf_r+0x44>
 8005250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005254:	059a      	lsls	r2, r3, #22
 8005256:	d4ef      	bmi.n	8005238 <__smakebuf_r+0x18>
 8005258:	f023 0303 	bic.w	r3, r3, #3
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	e7e3      	b.n	800522c <__smakebuf_r+0xc>
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <__smakebuf_r+0x7c>)
 8005266:	62b3      	str	r3, [r6, #40]	; 0x28
 8005268:	89a3      	ldrh	r3, [r4, #12]
 800526a:	6020      	str	r0, [r4, #0]
 800526c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005270:	81a3      	strh	r3, [r4, #12]
 8005272:	9b00      	ldr	r3, [sp, #0]
 8005274:	6163      	str	r3, [r4, #20]
 8005276:	9b01      	ldr	r3, [sp, #4]
 8005278:	6120      	str	r0, [r4, #16]
 800527a:	b15b      	cbz	r3, 8005294 <__smakebuf_r+0x74>
 800527c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005280:	4630      	mov	r0, r6
 8005282:	f000 fc8f 	bl	8005ba4 <_isatty_r>
 8005286:	b128      	cbz	r0, 8005294 <__smakebuf_r+0x74>
 8005288:	89a3      	ldrh	r3, [r4, #12]
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	89a0      	ldrh	r0, [r4, #12]
 8005296:	4305      	orrs	r5, r0
 8005298:	81a5      	strh	r5, [r4, #12]
 800529a:	e7cd      	b.n	8005238 <__smakebuf_r+0x18>
 800529c:	08004f75 	.word	0x08004f75

080052a0 <_free_r>:
 80052a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052a2:	2900      	cmp	r1, #0
 80052a4:	d044      	beq.n	8005330 <_free_r+0x90>
 80052a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052aa:	9001      	str	r0, [sp, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f1a1 0404 	sub.w	r4, r1, #4
 80052b2:	bfb8      	it	lt
 80052b4:	18e4      	addlt	r4, r4, r3
 80052b6:	f000 fc97 	bl	8005be8 <__malloc_lock>
 80052ba:	4a1e      	ldr	r2, [pc, #120]	; (8005334 <_free_r+0x94>)
 80052bc:	9801      	ldr	r0, [sp, #4]
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	b933      	cbnz	r3, 80052d0 <_free_r+0x30>
 80052c2:	6063      	str	r3, [r4, #4]
 80052c4:	6014      	str	r4, [r2, #0]
 80052c6:	b003      	add	sp, #12
 80052c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052cc:	f000 bc92 	b.w	8005bf4 <__malloc_unlock>
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	d908      	bls.n	80052e6 <_free_r+0x46>
 80052d4:	6825      	ldr	r5, [r4, #0]
 80052d6:	1961      	adds	r1, r4, r5
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf01      	itttt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	1949      	addeq	r1, r1, r5
 80052e2:	6021      	streq	r1, [r4, #0]
 80052e4:	e7ed      	b.n	80052c2 <_free_r+0x22>
 80052e6:	461a      	mov	r2, r3
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b10b      	cbz	r3, 80052f0 <_free_r+0x50>
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d9fa      	bls.n	80052e6 <_free_r+0x46>
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	1855      	adds	r5, r2, r1
 80052f4:	42a5      	cmp	r5, r4
 80052f6:	d10b      	bne.n	8005310 <_free_r+0x70>
 80052f8:	6824      	ldr	r4, [r4, #0]
 80052fa:	4421      	add	r1, r4
 80052fc:	1854      	adds	r4, r2, r1
 80052fe:	42a3      	cmp	r3, r4
 8005300:	6011      	str	r1, [r2, #0]
 8005302:	d1e0      	bne.n	80052c6 <_free_r+0x26>
 8005304:	681c      	ldr	r4, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	6053      	str	r3, [r2, #4]
 800530a:	4421      	add	r1, r4
 800530c:	6011      	str	r1, [r2, #0]
 800530e:	e7da      	b.n	80052c6 <_free_r+0x26>
 8005310:	d902      	bls.n	8005318 <_free_r+0x78>
 8005312:	230c      	movs	r3, #12
 8005314:	6003      	str	r3, [r0, #0]
 8005316:	e7d6      	b.n	80052c6 <_free_r+0x26>
 8005318:	6825      	ldr	r5, [r4, #0]
 800531a:	1961      	adds	r1, r4, r5
 800531c:	428b      	cmp	r3, r1
 800531e:	bf04      	itt	eq
 8005320:	6819      	ldreq	r1, [r3, #0]
 8005322:	685b      	ldreq	r3, [r3, #4]
 8005324:	6063      	str	r3, [r4, #4]
 8005326:	bf04      	itt	eq
 8005328:	1949      	addeq	r1, r1, r5
 800532a:	6021      	streq	r1, [r4, #0]
 800532c:	6054      	str	r4, [r2, #4]
 800532e:	e7ca      	b.n	80052c6 <_free_r+0x26>
 8005330:	b003      	add	sp, #12
 8005332:	bd30      	pop	{r4, r5, pc}
 8005334:	20000604 	.word	0x20000604

08005338 <sbrk_aligned>:
 8005338:	b570      	push	{r4, r5, r6, lr}
 800533a:	4e0e      	ldr	r6, [pc, #56]	; (8005374 <sbrk_aligned+0x3c>)
 800533c:	460c      	mov	r4, r1
 800533e:	6831      	ldr	r1, [r6, #0]
 8005340:	4605      	mov	r5, r0
 8005342:	b911      	cbnz	r1, 800534a <sbrk_aligned+0x12>
 8005344:	f000 fba6 	bl	8005a94 <_sbrk_r>
 8005348:	6030      	str	r0, [r6, #0]
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f000 fba1 	bl	8005a94 <_sbrk_r>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d00a      	beq.n	800536c <sbrk_aligned+0x34>
 8005356:	1cc4      	adds	r4, r0, #3
 8005358:	f024 0403 	bic.w	r4, r4, #3
 800535c:	42a0      	cmp	r0, r4
 800535e:	d007      	beq.n	8005370 <sbrk_aligned+0x38>
 8005360:	1a21      	subs	r1, r4, r0
 8005362:	4628      	mov	r0, r5
 8005364:	f000 fb96 	bl	8005a94 <_sbrk_r>
 8005368:	3001      	adds	r0, #1
 800536a:	d101      	bne.n	8005370 <sbrk_aligned+0x38>
 800536c:	f04f 34ff 	mov.w	r4, #4294967295
 8005370:	4620      	mov	r0, r4
 8005372:	bd70      	pop	{r4, r5, r6, pc}
 8005374:	20000608 	.word	0x20000608

08005378 <_malloc_r>:
 8005378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537c:	1ccd      	adds	r5, r1, #3
 800537e:	f025 0503 	bic.w	r5, r5, #3
 8005382:	3508      	adds	r5, #8
 8005384:	2d0c      	cmp	r5, #12
 8005386:	bf38      	it	cc
 8005388:	250c      	movcc	r5, #12
 800538a:	2d00      	cmp	r5, #0
 800538c:	4607      	mov	r7, r0
 800538e:	db01      	blt.n	8005394 <_malloc_r+0x1c>
 8005390:	42a9      	cmp	r1, r5
 8005392:	d905      	bls.n	80053a0 <_malloc_r+0x28>
 8005394:	230c      	movs	r3, #12
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	2600      	movs	r6, #0
 800539a:	4630      	mov	r0, r6
 800539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a0:	4e2e      	ldr	r6, [pc, #184]	; (800545c <_malloc_r+0xe4>)
 80053a2:	f000 fc21 	bl	8005be8 <__malloc_lock>
 80053a6:	6833      	ldr	r3, [r6, #0]
 80053a8:	461c      	mov	r4, r3
 80053aa:	bb34      	cbnz	r4, 80053fa <_malloc_r+0x82>
 80053ac:	4629      	mov	r1, r5
 80053ae:	4638      	mov	r0, r7
 80053b0:	f7ff ffc2 	bl	8005338 <sbrk_aligned>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	4604      	mov	r4, r0
 80053b8:	d14d      	bne.n	8005456 <_malloc_r+0xde>
 80053ba:	6834      	ldr	r4, [r6, #0]
 80053bc:	4626      	mov	r6, r4
 80053be:	2e00      	cmp	r6, #0
 80053c0:	d140      	bne.n	8005444 <_malloc_r+0xcc>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	4631      	mov	r1, r6
 80053c6:	4638      	mov	r0, r7
 80053c8:	eb04 0803 	add.w	r8, r4, r3
 80053cc:	f000 fb62 	bl	8005a94 <_sbrk_r>
 80053d0:	4580      	cmp	r8, r0
 80053d2:	d13a      	bne.n	800544a <_malloc_r+0xd2>
 80053d4:	6821      	ldr	r1, [r4, #0]
 80053d6:	3503      	adds	r5, #3
 80053d8:	1a6d      	subs	r5, r5, r1
 80053da:	f025 0503 	bic.w	r5, r5, #3
 80053de:	3508      	adds	r5, #8
 80053e0:	2d0c      	cmp	r5, #12
 80053e2:	bf38      	it	cc
 80053e4:	250c      	movcc	r5, #12
 80053e6:	4629      	mov	r1, r5
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff ffa5 	bl	8005338 <sbrk_aligned>
 80053ee:	3001      	adds	r0, #1
 80053f0:	d02b      	beq.n	800544a <_malloc_r+0xd2>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	442b      	add	r3, r5
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	e00e      	b.n	8005418 <_malloc_r+0xa0>
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	1b52      	subs	r2, r2, r5
 80053fe:	d41e      	bmi.n	800543e <_malloc_r+0xc6>
 8005400:	2a0b      	cmp	r2, #11
 8005402:	d916      	bls.n	8005432 <_malloc_r+0xba>
 8005404:	1961      	adds	r1, r4, r5
 8005406:	42a3      	cmp	r3, r4
 8005408:	6025      	str	r5, [r4, #0]
 800540a:	bf18      	it	ne
 800540c:	6059      	strne	r1, [r3, #4]
 800540e:	6863      	ldr	r3, [r4, #4]
 8005410:	bf08      	it	eq
 8005412:	6031      	streq	r1, [r6, #0]
 8005414:	5162      	str	r2, [r4, r5]
 8005416:	604b      	str	r3, [r1, #4]
 8005418:	4638      	mov	r0, r7
 800541a:	f104 060b 	add.w	r6, r4, #11
 800541e:	f000 fbe9 	bl	8005bf4 <__malloc_unlock>
 8005422:	f026 0607 	bic.w	r6, r6, #7
 8005426:	1d23      	adds	r3, r4, #4
 8005428:	1af2      	subs	r2, r6, r3
 800542a:	d0b6      	beq.n	800539a <_malloc_r+0x22>
 800542c:	1b9b      	subs	r3, r3, r6
 800542e:	50a3      	str	r3, [r4, r2]
 8005430:	e7b3      	b.n	800539a <_malloc_r+0x22>
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	42a3      	cmp	r3, r4
 8005436:	bf0c      	ite	eq
 8005438:	6032      	streq	r2, [r6, #0]
 800543a:	605a      	strne	r2, [r3, #4]
 800543c:	e7ec      	b.n	8005418 <_malloc_r+0xa0>
 800543e:	4623      	mov	r3, r4
 8005440:	6864      	ldr	r4, [r4, #4]
 8005442:	e7b2      	b.n	80053aa <_malloc_r+0x32>
 8005444:	4634      	mov	r4, r6
 8005446:	6876      	ldr	r6, [r6, #4]
 8005448:	e7b9      	b.n	80053be <_malloc_r+0x46>
 800544a:	230c      	movs	r3, #12
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	4638      	mov	r0, r7
 8005450:	f000 fbd0 	bl	8005bf4 <__malloc_unlock>
 8005454:	e7a1      	b.n	800539a <_malloc_r+0x22>
 8005456:	6025      	str	r5, [r4, #0]
 8005458:	e7de      	b.n	8005418 <_malloc_r+0xa0>
 800545a:	bf00      	nop
 800545c:	20000604 	.word	0x20000604

08005460 <__sfputc_r>:
 8005460:	6893      	ldr	r3, [r2, #8]
 8005462:	3b01      	subs	r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	b410      	push	{r4}
 8005468:	6093      	str	r3, [r2, #8]
 800546a:	da08      	bge.n	800547e <__sfputc_r+0x1e>
 800546c:	6994      	ldr	r4, [r2, #24]
 800546e:	42a3      	cmp	r3, r4
 8005470:	db01      	blt.n	8005476 <__sfputc_r+0x16>
 8005472:	290a      	cmp	r1, #10
 8005474:	d103      	bne.n	800547e <__sfputc_r+0x1e>
 8005476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547a:	f7ff bbc3 	b.w	8004c04 <__swbuf_r>
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	1c58      	adds	r0, r3, #1
 8005482:	6010      	str	r0, [r2, #0]
 8005484:	7019      	strb	r1, [r3, #0]
 8005486:	4608      	mov	r0, r1
 8005488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800548c:	4770      	bx	lr

0800548e <__sfputs_r>:
 800548e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005490:	4606      	mov	r6, r0
 8005492:	460f      	mov	r7, r1
 8005494:	4614      	mov	r4, r2
 8005496:	18d5      	adds	r5, r2, r3
 8005498:	42ac      	cmp	r4, r5
 800549a:	d101      	bne.n	80054a0 <__sfputs_r+0x12>
 800549c:	2000      	movs	r0, #0
 800549e:	e007      	b.n	80054b0 <__sfputs_r+0x22>
 80054a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054a4:	463a      	mov	r2, r7
 80054a6:	4630      	mov	r0, r6
 80054a8:	f7ff ffda 	bl	8005460 <__sfputc_r>
 80054ac:	1c43      	adds	r3, r0, #1
 80054ae:	d1f3      	bne.n	8005498 <__sfputs_r+0xa>
 80054b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054b4 <_vfiprintf_r>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	460d      	mov	r5, r1
 80054ba:	b09d      	sub	sp, #116	; 0x74
 80054bc:	4614      	mov	r4, r2
 80054be:	4698      	mov	r8, r3
 80054c0:	4606      	mov	r6, r0
 80054c2:	b118      	cbz	r0, 80054cc <_vfiprintf_r+0x18>
 80054c4:	6983      	ldr	r3, [r0, #24]
 80054c6:	b90b      	cbnz	r3, 80054cc <_vfiprintf_r+0x18>
 80054c8:	f7ff fd88 	bl	8004fdc <__sinit>
 80054cc:	4b89      	ldr	r3, [pc, #548]	; (80056f4 <_vfiprintf_r+0x240>)
 80054ce:	429d      	cmp	r5, r3
 80054d0:	d11b      	bne.n	800550a <_vfiprintf_r+0x56>
 80054d2:	6875      	ldr	r5, [r6, #4]
 80054d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054d6:	07d9      	lsls	r1, r3, #31
 80054d8:	d405      	bmi.n	80054e6 <_vfiprintf_r+0x32>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	059a      	lsls	r2, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_vfiprintf_r+0x32>
 80054e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054e2:	f7ff fe76 	bl	80051d2 <__retarget_lock_acquire_recursive>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	071b      	lsls	r3, r3, #28
 80054ea:	d501      	bpl.n	80054f0 <_vfiprintf_r+0x3c>
 80054ec:	692b      	ldr	r3, [r5, #16]
 80054ee:	b9eb      	cbnz	r3, 800552c <_vfiprintf_r+0x78>
 80054f0:	4629      	mov	r1, r5
 80054f2:	4630      	mov	r0, r6
 80054f4:	f7ff fbd8 	bl	8004ca8 <__swsetup_r>
 80054f8:	b1c0      	cbz	r0, 800552c <_vfiprintf_r+0x78>
 80054fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fc:	07dc      	lsls	r4, r3, #31
 80054fe:	d50e      	bpl.n	800551e <_vfiprintf_r+0x6a>
 8005500:	f04f 30ff 	mov.w	r0, #4294967295
 8005504:	b01d      	add	sp, #116	; 0x74
 8005506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550a:	4b7b      	ldr	r3, [pc, #492]	; (80056f8 <_vfiprintf_r+0x244>)
 800550c:	429d      	cmp	r5, r3
 800550e:	d101      	bne.n	8005514 <_vfiprintf_r+0x60>
 8005510:	68b5      	ldr	r5, [r6, #8]
 8005512:	e7df      	b.n	80054d4 <_vfiprintf_r+0x20>
 8005514:	4b79      	ldr	r3, [pc, #484]	; (80056fc <_vfiprintf_r+0x248>)
 8005516:	429d      	cmp	r5, r3
 8005518:	bf08      	it	eq
 800551a:	68f5      	ldreq	r5, [r6, #12]
 800551c:	e7da      	b.n	80054d4 <_vfiprintf_r+0x20>
 800551e:	89ab      	ldrh	r3, [r5, #12]
 8005520:	0598      	lsls	r0, r3, #22
 8005522:	d4ed      	bmi.n	8005500 <_vfiprintf_r+0x4c>
 8005524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005526:	f7ff fe55 	bl	80051d4 <__retarget_lock_release_recursive>
 800552a:	e7e9      	b.n	8005500 <_vfiprintf_r+0x4c>
 800552c:	2300      	movs	r3, #0
 800552e:	9309      	str	r3, [sp, #36]	; 0x24
 8005530:	2320      	movs	r3, #32
 8005532:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005536:	f8cd 800c 	str.w	r8, [sp, #12]
 800553a:	2330      	movs	r3, #48	; 0x30
 800553c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005700 <_vfiprintf_r+0x24c>
 8005540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005544:	f04f 0901 	mov.w	r9, #1
 8005548:	4623      	mov	r3, r4
 800554a:	469a      	mov	sl, r3
 800554c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005550:	b10a      	cbz	r2, 8005556 <_vfiprintf_r+0xa2>
 8005552:	2a25      	cmp	r2, #37	; 0x25
 8005554:	d1f9      	bne.n	800554a <_vfiprintf_r+0x96>
 8005556:	ebba 0b04 	subs.w	fp, sl, r4
 800555a:	d00b      	beq.n	8005574 <_vfiprintf_r+0xc0>
 800555c:	465b      	mov	r3, fp
 800555e:	4622      	mov	r2, r4
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f7ff ff93 	bl	800548e <__sfputs_r>
 8005568:	3001      	adds	r0, #1
 800556a:	f000 80aa 	beq.w	80056c2 <_vfiprintf_r+0x20e>
 800556e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005570:	445a      	add	r2, fp
 8005572:	9209      	str	r2, [sp, #36]	; 0x24
 8005574:	f89a 3000 	ldrb.w	r3, [sl]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80a2 	beq.w	80056c2 <_vfiprintf_r+0x20e>
 800557e:	2300      	movs	r3, #0
 8005580:	f04f 32ff 	mov.w	r2, #4294967295
 8005584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005588:	f10a 0a01 	add.w	sl, sl, #1
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	9307      	str	r3, [sp, #28]
 8005590:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005594:	931a      	str	r3, [sp, #104]	; 0x68
 8005596:	4654      	mov	r4, sl
 8005598:	2205      	movs	r2, #5
 800559a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559e:	4858      	ldr	r0, [pc, #352]	; (8005700 <_vfiprintf_r+0x24c>)
 80055a0:	f7fa fe16 	bl	80001d0 <memchr>
 80055a4:	9a04      	ldr	r2, [sp, #16]
 80055a6:	b9d8      	cbnz	r0, 80055e0 <_vfiprintf_r+0x12c>
 80055a8:	06d1      	lsls	r1, r2, #27
 80055aa:	bf44      	itt	mi
 80055ac:	2320      	movmi	r3, #32
 80055ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b2:	0713      	lsls	r3, r2, #28
 80055b4:	bf44      	itt	mi
 80055b6:	232b      	movmi	r3, #43	; 0x2b
 80055b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055bc:	f89a 3000 	ldrb.w	r3, [sl]
 80055c0:	2b2a      	cmp	r3, #42	; 0x2a
 80055c2:	d015      	beq.n	80055f0 <_vfiprintf_r+0x13c>
 80055c4:	9a07      	ldr	r2, [sp, #28]
 80055c6:	4654      	mov	r4, sl
 80055c8:	2000      	movs	r0, #0
 80055ca:	f04f 0c0a 	mov.w	ip, #10
 80055ce:	4621      	mov	r1, r4
 80055d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d4:	3b30      	subs	r3, #48	; 0x30
 80055d6:	2b09      	cmp	r3, #9
 80055d8:	d94e      	bls.n	8005678 <_vfiprintf_r+0x1c4>
 80055da:	b1b0      	cbz	r0, 800560a <_vfiprintf_r+0x156>
 80055dc:	9207      	str	r2, [sp, #28]
 80055de:	e014      	b.n	800560a <_vfiprintf_r+0x156>
 80055e0:	eba0 0308 	sub.w	r3, r0, r8
 80055e4:	fa09 f303 	lsl.w	r3, r9, r3
 80055e8:	4313      	orrs	r3, r2
 80055ea:	9304      	str	r3, [sp, #16]
 80055ec:	46a2      	mov	sl, r4
 80055ee:	e7d2      	b.n	8005596 <_vfiprintf_r+0xe2>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	1d19      	adds	r1, r3, #4
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	9103      	str	r1, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bfbb      	ittet	lt
 80055fc:	425b      	neglt	r3, r3
 80055fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005602:	9307      	strge	r3, [sp, #28]
 8005604:	9307      	strlt	r3, [sp, #28]
 8005606:	bfb8      	it	lt
 8005608:	9204      	strlt	r2, [sp, #16]
 800560a:	7823      	ldrb	r3, [r4, #0]
 800560c:	2b2e      	cmp	r3, #46	; 0x2e
 800560e:	d10c      	bne.n	800562a <_vfiprintf_r+0x176>
 8005610:	7863      	ldrb	r3, [r4, #1]
 8005612:	2b2a      	cmp	r3, #42	; 0x2a
 8005614:	d135      	bne.n	8005682 <_vfiprintf_r+0x1ce>
 8005616:	9b03      	ldr	r3, [sp, #12]
 8005618:	1d1a      	adds	r2, r3, #4
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	9203      	str	r2, [sp, #12]
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfb8      	it	lt
 8005622:	f04f 33ff 	movlt.w	r3, #4294967295
 8005626:	3402      	adds	r4, #2
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005710 <_vfiprintf_r+0x25c>
 800562e:	7821      	ldrb	r1, [r4, #0]
 8005630:	2203      	movs	r2, #3
 8005632:	4650      	mov	r0, sl
 8005634:	f7fa fdcc 	bl	80001d0 <memchr>
 8005638:	b140      	cbz	r0, 800564c <_vfiprintf_r+0x198>
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	eba0 000a 	sub.w	r0, r0, sl
 8005640:	fa03 f000 	lsl.w	r0, r3, r0
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	4303      	orrs	r3, r0
 8005648:	3401      	adds	r4, #1
 800564a:	9304      	str	r3, [sp, #16]
 800564c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005650:	482c      	ldr	r0, [pc, #176]	; (8005704 <_vfiprintf_r+0x250>)
 8005652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005656:	2206      	movs	r2, #6
 8005658:	f7fa fdba 	bl	80001d0 <memchr>
 800565c:	2800      	cmp	r0, #0
 800565e:	d03f      	beq.n	80056e0 <_vfiprintf_r+0x22c>
 8005660:	4b29      	ldr	r3, [pc, #164]	; (8005708 <_vfiprintf_r+0x254>)
 8005662:	bb1b      	cbnz	r3, 80056ac <_vfiprintf_r+0x1f8>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	3307      	adds	r3, #7
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	3308      	adds	r3, #8
 800566e:	9303      	str	r3, [sp, #12]
 8005670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005672:	443b      	add	r3, r7
 8005674:	9309      	str	r3, [sp, #36]	; 0x24
 8005676:	e767      	b.n	8005548 <_vfiprintf_r+0x94>
 8005678:	fb0c 3202 	mla	r2, ip, r2, r3
 800567c:	460c      	mov	r4, r1
 800567e:	2001      	movs	r0, #1
 8005680:	e7a5      	b.n	80055ce <_vfiprintf_r+0x11a>
 8005682:	2300      	movs	r3, #0
 8005684:	3401      	adds	r4, #1
 8005686:	9305      	str	r3, [sp, #20]
 8005688:	4619      	mov	r1, r3
 800568a:	f04f 0c0a 	mov.w	ip, #10
 800568e:	4620      	mov	r0, r4
 8005690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005694:	3a30      	subs	r2, #48	; 0x30
 8005696:	2a09      	cmp	r2, #9
 8005698:	d903      	bls.n	80056a2 <_vfiprintf_r+0x1ee>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0c5      	beq.n	800562a <_vfiprintf_r+0x176>
 800569e:	9105      	str	r1, [sp, #20]
 80056a0:	e7c3      	b.n	800562a <_vfiprintf_r+0x176>
 80056a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a6:	4604      	mov	r4, r0
 80056a8:	2301      	movs	r3, #1
 80056aa:	e7f0      	b.n	800568e <_vfiprintf_r+0x1da>
 80056ac:	ab03      	add	r3, sp, #12
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	462a      	mov	r2, r5
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <_vfiprintf_r+0x258>)
 80056b4:	a904      	add	r1, sp, #16
 80056b6:	4630      	mov	r0, r6
 80056b8:	f3af 8000 	nop.w
 80056bc:	4607      	mov	r7, r0
 80056be:	1c78      	adds	r0, r7, #1
 80056c0:	d1d6      	bne.n	8005670 <_vfiprintf_r+0x1bc>
 80056c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056c4:	07d9      	lsls	r1, r3, #31
 80056c6:	d405      	bmi.n	80056d4 <_vfiprintf_r+0x220>
 80056c8:	89ab      	ldrh	r3, [r5, #12]
 80056ca:	059a      	lsls	r2, r3, #22
 80056cc:	d402      	bmi.n	80056d4 <_vfiprintf_r+0x220>
 80056ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056d0:	f7ff fd80 	bl	80051d4 <__retarget_lock_release_recursive>
 80056d4:	89ab      	ldrh	r3, [r5, #12]
 80056d6:	065b      	lsls	r3, r3, #25
 80056d8:	f53f af12 	bmi.w	8005500 <_vfiprintf_r+0x4c>
 80056dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056de:	e711      	b.n	8005504 <_vfiprintf_r+0x50>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	462a      	mov	r2, r5
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <_vfiprintf_r+0x258>)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4630      	mov	r0, r6
 80056ec:	f000 f880 	bl	80057f0 <_printf_i>
 80056f0:	e7e4      	b.n	80056bc <_vfiprintf_r+0x208>
 80056f2:	bf00      	nop
 80056f4:	080065d0 	.word	0x080065d0
 80056f8:	080065f0 	.word	0x080065f0
 80056fc:	080065b0 	.word	0x080065b0
 8005700:	08006610 	.word	0x08006610
 8005704:	0800661a 	.word	0x0800661a
 8005708:	00000000 	.word	0x00000000
 800570c:	0800548f 	.word	0x0800548f
 8005710:	08006616 	.word	0x08006616

08005714 <_printf_common>:
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	4616      	mov	r6, r2
 800571a:	4699      	mov	r9, r3
 800571c:	688a      	ldr	r2, [r1, #8]
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005724:	4293      	cmp	r3, r2
 8005726:	bfb8      	it	lt
 8005728:	4613      	movlt	r3, r2
 800572a:	6033      	str	r3, [r6, #0]
 800572c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005730:	4607      	mov	r7, r0
 8005732:	460c      	mov	r4, r1
 8005734:	b10a      	cbz	r2, 800573a <_printf_common+0x26>
 8005736:	3301      	adds	r3, #1
 8005738:	6033      	str	r3, [r6, #0]
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	0699      	lsls	r1, r3, #26
 800573e:	bf42      	ittt	mi
 8005740:	6833      	ldrmi	r3, [r6, #0]
 8005742:	3302      	addmi	r3, #2
 8005744:	6033      	strmi	r3, [r6, #0]
 8005746:	6825      	ldr	r5, [r4, #0]
 8005748:	f015 0506 	ands.w	r5, r5, #6
 800574c:	d106      	bne.n	800575c <_printf_common+0x48>
 800574e:	f104 0a19 	add.w	sl, r4, #25
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	6832      	ldr	r2, [r6, #0]
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	42ab      	cmp	r3, r5
 800575a:	dc26      	bgt.n	80057aa <_printf_common+0x96>
 800575c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005760:	1e13      	subs	r3, r2, #0
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	bf18      	it	ne
 8005766:	2301      	movne	r3, #1
 8005768:	0692      	lsls	r2, r2, #26
 800576a:	d42b      	bmi.n	80057c4 <_printf_common+0xb0>
 800576c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005770:	4649      	mov	r1, r9
 8005772:	4638      	mov	r0, r7
 8005774:	47c0      	blx	r8
 8005776:	3001      	adds	r0, #1
 8005778:	d01e      	beq.n	80057b8 <_printf_common+0xa4>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	68e5      	ldr	r5, [r4, #12]
 800577e:	6832      	ldr	r2, [r6, #0]
 8005780:	f003 0306 	and.w	r3, r3, #6
 8005784:	2b04      	cmp	r3, #4
 8005786:	bf08      	it	eq
 8005788:	1aad      	subeq	r5, r5, r2
 800578a:	68a3      	ldr	r3, [r4, #8]
 800578c:	6922      	ldr	r2, [r4, #16]
 800578e:	bf0c      	ite	eq
 8005790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005794:	2500      	movne	r5, #0
 8005796:	4293      	cmp	r3, r2
 8005798:	bfc4      	itt	gt
 800579a:	1a9b      	subgt	r3, r3, r2
 800579c:	18ed      	addgt	r5, r5, r3
 800579e:	2600      	movs	r6, #0
 80057a0:	341a      	adds	r4, #26
 80057a2:	42b5      	cmp	r5, r6
 80057a4:	d11a      	bne.n	80057dc <_printf_common+0xc8>
 80057a6:	2000      	movs	r0, #0
 80057a8:	e008      	b.n	80057bc <_printf_common+0xa8>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4652      	mov	r2, sl
 80057ae:	4649      	mov	r1, r9
 80057b0:	4638      	mov	r0, r7
 80057b2:	47c0      	blx	r8
 80057b4:	3001      	adds	r0, #1
 80057b6:	d103      	bne.n	80057c0 <_printf_common+0xac>
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c0:	3501      	adds	r5, #1
 80057c2:	e7c6      	b.n	8005752 <_printf_common+0x3e>
 80057c4:	18e1      	adds	r1, r4, r3
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	2030      	movs	r0, #48	; 0x30
 80057ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057ce:	4422      	add	r2, r4
 80057d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057d8:	3302      	adds	r3, #2
 80057da:	e7c7      	b.n	800576c <_printf_common+0x58>
 80057dc:	2301      	movs	r3, #1
 80057de:	4622      	mov	r2, r4
 80057e0:	4649      	mov	r1, r9
 80057e2:	4638      	mov	r0, r7
 80057e4:	47c0      	blx	r8
 80057e6:	3001      	adds	r0, #1
 80057e8:	d0e6      	beq.n	80057b8 <_printf_common+0xa4>
 80057ea:	3601      	adds	r6, #1
 80057ec:	e7d9      	b.n	80057a2 <_printf_common+0x8e>
	...

080057f0 <_printf_i>:
 80057f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	7e0f      	ldrb	r7, [r1, #24]
 80057f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057f8:	2f78      	cmp	r7, #120	; 0x78
 80057fa:	4691      	mov	r9, r2
 80057fc:	4680      	mov	r8, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	469a      	mov	sl, r3
 8005802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005806:	d807      	bhi.n	8005818 <_printf_i+0x28>
 8005808:	2f62      	cmp	r7, #98	; 0x62
 800580a:	d80a      	bhi.n	8005822 <_printf_i+0x32>
 800580c:	2f00      	cmp	r7, #0
 800580e:	f000 80d8 	beq.w	80059c2 <_printf_i+0x1d2>
 8005812:	2f58      	cmp	r7, #88	; 0x58
 8005814:	f000 80a3 	beq.w	800595e <_printf_i+0x16e>
 8005818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800581c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005820:	e03a      	b.n	8005898 <_printf_i+0xa8>
 8005822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005826:	2b15      	cmp	r3, #21
 8005828:	d8f6      	bhi.n	8005818 <_printf_i+0x28>
 800582a:	a101      	add	r1, pc, #4	; (adr r1, 8005830 <_printf_i+0x40>)
 800582c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005830:	08005889 	.word	0x08005889
 8005834:	0800589d 	.word	0x0800589d
 8005838:	08005819 	.word	0x08005819
 800583c:	08005819 	.word	0x08005819
 8005840:	08005819 	.word	0x08005819
 8005844:	08005819 	.word	0x08005819
 8005848:	0800589d 	.word	0x0800589d
 800584c:	08005819 	.word	0x08005819
 8005850:	08005819 	.word	0x08005819
 8005854:	08005819 	.word	0x08005819
 8005858:	08005819 	.word	0x08005819
 800585c:	080059a9 	.word	0x080059a9
 8005860:	080058cd 	.word	0x080058cd
 8005864:	0800598b 	.word	0x0800598b
 8005868:	08005819 	.word	0x08005819
 800586c:	08005819 	.word	0x08005819
 8005870:	080059cb 	.word	0x080059cb
 8005874:	08005819 	.word	0x08005819
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005819 	.word	0x08005819
 8005880:	08005819 	.word	0x08005819
 8005884:	08005993 	.word	0x08005993
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	602a      	str	r2, [r5, #0]
 8005890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005898:	2301      	movs	r3, #1
 800589a:	e0a3      	b.n	80059e4 <_printf_i+0x1f4>
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	6829      	ldr	r1, [r5, #0]
 80058a0:	0606      	lsls	r6, r0, #24
 80058a2:	f101 0304 	add.w	r3, r1, #4
 80058a6:	d50a      	bpl.n	80058be <_printf_i+0xce>
 80058a8:	680e      	ldr	r6, [r1, #0]
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	2e00      	cmp	r6, #0
 80058ae:	da03      	bge.n	80058b8 <_printf_i+0xc8>
 80058b0:	232d      	movs	r3, #45	; 0x2d
 80058b2:	4276      	negs	r6, r6
 80058b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058b8:	485e      	ldr	r0, [pc, #376]	; (8005a34 <_printf_i+0x244>)
 80058ba:	230a      	movs	r3, #10
 80058bc:	e019      	b.n	80058f2 <_printf_i+0x102>
 80058be:	680e      	ldr	r6, [r1, #0]
 80058c0:	602b      	str	r3, [r5, #0]
 80058c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058c6:	bf18      	it	ne
 80058c8:	b236      	sxthne	r6, r6
 80058ca:	e7ef      	b.n	80058ac <_printf_i+0xbc>
 80058cc:	682b      	ldr	r3, [r5, #0]
 80058ce:	6820      	ldr	r0, [r4, #0]
 80058d0:	1d19      	adds	r1, r3, #4
 80058d2:	6029      	str	r1, [r5, #0]
 80058d4:	0601      	lsls	r1, r0, #24
 80058d6:	d501      	bpl.n	80058dc <_printf_i+0xec>
 80058d8:	681e      	ldr	r6, [r3, #0]
 80058da:	e002      	b.n	80058e2 <_printf_i+0xf2>
 80058dc:	0646      	lsls	r6, r0, #25
 80058de:	d5fb      	bpl.n	80058d8 <_printf_i+0xe8>
 80058e0:	881e      	ldrh	r6, [r3, #0]
 80058e2:	4854      	ldr	r0, [pc, #336]	; (8005a34 <_printf_i+0x244>)
 80058e4:	2f6f      	cmp	r7, #111	; 0x6f
 80058e6:	bf0c      	ite	eq
 80058e8:	2308      	moveq	r3, #8
 80058ea:	230a      	movne	r3, #10
 80058ec:	2100      	movs	r1, #0
 80058ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058f2:	6865      	ldr	r5, [r4, #4]
 80058f4:	60a5      	str	r5, [r4, #8]
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	bfa2      	ittt	ge
 80058fa:	6821      	ldrge	r1, [r4, #0]
 80058fc:	f021 0104 	bicge.w	r1, r1, #4
 8005900:	6021      	strge	r1, [r4, #0]
 8005902:	b90e      	cbnz	r6, 8005908 <_printf_i+0x118>
 8005904:	2d00      	cmp	r5, #0
 8005906:	d04d      	beq.n	80059a4 <_printf_i+0x1b4>
 8005908:	4615      	mov	r5, r2
 800590a:	fbb6 f1f3 	udiv	r1, r6, r3
 800590e:	fb03 6711 	mls	r7, r3, r1, r6
 8005912:	5dc7      	ldrb	r7, [r0, r7]
 8005914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005918:	4637      	mov	r7, r6
 800591a:	42bb      	cmp	r3, r7
 800591c:	460e      	mov	r6, r1
 800591e:	d9f4      	bls.n	800590a <_printf_i+0x11a>
 8005920:	2b08      	cmp	r3, #8
 8005922:	d10b      	bne.n	800593c <_printf_i+0x14c>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	07de      	lsls	r6, r3, #31
 8005928:	d508      	bpl.n	800593c <_printf_i+0x14c>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	6861      	ldr	r1, [r4, #4]
 800592e:	4299      	cmp	r1, r3
 8005930:	bfde      	ittt	le
 8005932:	2330      	movle	r3, #48	; 0x30
 8005934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800593c:	1b52      	subs	r2, r2, r5
 800593e:	6122      	str	r2, [r4, #16]
 8005940:	f8cd a000 	str.w	sl, [sp]
 8005944:	464b      	mov	r3, r9
 8005946:	aa03      	add	r2, sp, #12
 8005948:	4621      	mov	r1, r4
 800594a:	4640      	mov	r0, r8
 800594c:	f7ff fee2 	bl	8005714 <_printf_common>
 8005950:	3001      	adds	r0, #1
 8005952:	d14c      	bne.n	80059ee <_printf_i+0x1fe>
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	b004      	add	sp, #16
 800595a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595e:	4835      	ldr	r0, [pc, #212]	; (8005a34 <_printf_i+0x244>)
 8005960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005964:	6829      	ldr	r1, [r5, #0]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f851 6b04 	ldr.w	r6, [r1], #4
 800596c:	6029      	str	r1, [r5, #0]
 800596e:	061d      	lsls	r5, r3, #24
 8005970:	d514      	bpl.n	800599c <_printf_i+0x1ac>
 8005972:	07df      	lsls	r7, r3, #31
 8005974:	bf44      	itt	mi
 8005976:	f043 0320 	orrmi.w	r3, r3, #32
 800597a:	6023      	strmi	r3, [r4, #0]
 800597c:	b91e      	cbnz	r6, 8005986 <_printf_i+0x196>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	f023 0320 	bic.w	r3, r3, #32
 8005984:	6023      	str	r3, [r4, #0]
 8005986:	2310      	movs	r3, #16
 8005988:	e7b0      	b.n	80058ec <_printf_i+0xfc>
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	2378      	movs	r3, #120	; 0x78
 8005994:	4828      	ldr	r0, [pc, #160]	; (8005a38 <_printf_i+0x248>)
 8005996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800599a:	e7e3      	b.n	8005964 <_printf_i+0x174>
 800599c:	0659      	lsls	r1, r3, #25
 800599e:	bf48      	it	mi
 80059a0:	b2b6      	uxthmi	r6, r6
 80059a2:	e7e6      	b.n	8005972 <_printf_i+0x182>
 80059a4:	4615      	mov	r5, r2
 80059a6:	e7bb      	b.n	8005920 <_printf_i+0x130>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	6826      	ldr	r6, [r4, #0]
 80059ac:	6961      	ldr	r1, [r4, #20]
 80059ae:	1d18      	adds	r0, r3, #4
 80059b0:	6028      	str	r0, [r5, #0]
 80059b2:	0635      	lsls	r5, r6, #24
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0x1cc>
 80059b8:	6019      	str	r1, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0x1d2>
 80059bc:	0670      	lsls	r0, r6, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0x1c8>
 80059c0:	8019      	strh	r1, [r3, #0]
 80059c2:	2300      	movs	r3, #0
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	4615      	mov	r5, r2
 80059c8:	e7ba      	b.n	8005940 <_printf_i+0x150>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	1d1a      	adds	r2, r3, #4
 80059ce:	602a      	str	r2, [r5, #0]
 80059d0:	681d      	ldr	r5, [r3, #0]
 80059d2:	6862      	ldr	r2, [r4, #4]
 80059d4:	2100      	movs	r1, #0
 80059d6:	4628      	mov	r0, r5
 80059d8:	f7fa fbfa 	bl	80001d0 <memchr>
 80059dc:	b108      	cbz	r0, 80059e2 <_printf_i+0x1f2>
 80059de:	1b40      	subs	r0, r0, r5
 80059e0:	6060      	str	r0, [r4, #4]
 80059e2:	6863      	ldr	r3, [r4, #4]
 80059e4:	6123      	str	r3, [r4, #16]
 80059e6:	2300      	movs	r3, #0
 80059e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ec:	e7a8      	b.n	8005940 <_printf_i+0x150>
 80059ee:	6923      	ldr	r3, [r4, #16]
 80059f0:	462a      	mov	r2, r5
 80059f2:	4649      	mov	r1, r9
 80059f4:	4640      	mov	r0, r8
 80059f6:	47d0      	blx	sl
 80059f8:	3001      	adds	r0, #1
 80059fa:	d0ab      	beq.n	8005954 <_printf_i+0x164>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	079b      	lsls	r3, r3, #30
 8005a00:	d413      	bmi.n	8005a2a <_printf_i+0x23a>
 8005a02:	68e0      	ldr	r0, [r4, #12]
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	4298      	cmp	r0, r3
 8005a08:	bfb8      	it	lt
 8005a0a:	4618      	movlt	r0, r3
 8005a0c:	e7a4      	b.n	8005958 <_printf_i+0x168>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4632      	mov	r2, r6
 8005a12:	4649      	mov	r1, r9
 8005a14:	4640      	mov	r0, r8
 8005a16:	47d0      	blx	sl
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d09b      	beq.n	8005954 <_printf_i+0x164>
 8005a1c:	3501      	adds	r5, #1
 8005a1e:	68e3      	ldr	r3, [r4, #12]
 8005a20:	9903      	ldr	r1, [sp, #12]
 8005a22:	1a5b      	subs	r3, r3, r1
 8005a24:	42ab      	cmp	r3, r5
 8005a26:	dcf2      	bgt.n	8005a0e <_printf_i+0x21e>
 8005a28:	e7eb      	b.n	8005a02 <_printf_i+0x212>
 8005a2a:	2500      	movs	r5, #0
 8005a2c:	f104 0619 	add.w	r6, r4, #25
 8005a30:	e7f5      	b.n	8005a1e <_printf_i+0x22e>
 8005a32:	bf00      	nop
 8005a34:	08006621 	.word	0x08006621
 8005a38:	08006632 	.word	0x08006632

08005a3c <__srget_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4605      	mov	r5, r0
 8005a42:	b118      	cbz	r0, 8005a4c <__srget_r+0x10>
 8005a44:	6983      	ldr	r3, [r0, #24]
 8005a46:	b90b      	cbnz	r3, 8005a4c <__srget_r+0x10>
 8005a48:	f7ff fac8 	bl	8004fdc <__sinit>
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <__srget_r+0x4c>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d10d      	bne.n	8005a6e <__srget_r+0x32>
 8005a52:	686c      	ldr	r4, [r5, #4]
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f8ee 	bl	8005c38 <__srefill_r>
 8005a5c:	b988      	cbnz	r0, 8005a82 <__srget_r+0x46>
 8005a5e:	6863      	ldr	r3, [r4, #4]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	7818      	ldrb	r0, [r3, #0]
 8005a6c:	bd38      	pop	{r3, r4, r5, pc}
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <__srget_r+0x50>)
 8005a70:	429c      	cmp	r4, r3
 8005a72:	d101      	bne.n	8005a78 <__srget_r+0x3c>
 8005a74:	68ac      	ldr	r4, [r5, #8]
 8005a76:	e7ed      	b.n	8005a54 <__srget_r+0x18>
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <__srget_r+0x54>)
 8005a7a:	429c      	cmp	r4, r3
 8005a7c:	bf08      	it	eq
 8005a7e:	68ec      	ldreq	r4, [r5, #12]
 8005a80:	e7e8      	b.n	8005a54 <__srget_r+0x18>
 8005a82:	f04f 30ff 	mov.w	r0, #4294967295
 8005a86:	e7f1      	b.n	8005a6c <__srget_r+0x30>
 8005a88:	080065d0 	.word	0x080065d0
 8005a8c:	080065f0 	.word	0x080065f0
 8005a90:	080065b0 	.word	0x080065b0

08005a94 <_sbrk_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4d06      	ldr	r5, [pc, #24]	; (8005ab0 <_sbrk_r+0x1c>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	602b      	str	r3, [r5, #0]
 8005aa0:	f7fa fda6 	bl	80005f0 <_sbrk>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_sbrk_r+0x1a>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_sbrk_r+0x1a>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	2000060c 	.word	0x2000060c

08005ab4 <__sread>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005abc:	f000 f8a0 	bl	8005c00 <_read_r>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	bfab      	itete	ge
 8005ac4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ac6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ac8:	181b      	addge	r3, r3, r0
 8005aca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ace:	bfac      	ite	ge
 8005ad0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ad2:	81a3      	strhlt	r3, [r4, #12]
 8005ad4:	bd10      	pop	{r4, pc}

08005ad6 <__swrite>:
 8005ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	461f      	mov	r7, r3
 8005adc:	898b      	ldrh	r3, [r1, #12]
 8005ade:	05db      	lsls	r3, r3, #23
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4616      	mov	r6, r2
 8005ae6:	d505      	bpl.n	8005af4 <__swrite+0x1e>
 8005ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aec:	2302      	movs	r3, #2
 8005aee:	2200      	movs	r2, #0
 8005af0:	f000 f868 	bl	8005bc4 <_lseek_r>
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005afa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005afe:	81a3      	strh	r3, [r4, #12]
 8005b00:	4632      	mov	r2, r6
 8005b02:	463b      	mov	r3, r7
 8005b04:	4628      	mov	r0, r5
 8005b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0a:	f000 b817 	b.w	8005b3c <_write_r>

08005b0e <__sseek>:
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	460c      	mov	r4, r1
 8005b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b16:	f000 f855 	bl	8005bc4 <_lseek_r>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	89a3      	ldrh	r3, [r4, #12]
 8005b1e:	bf15      	itete	ne
 8005b20:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b2a:	81a3      	strheq	r3, [r4, #12]
 8005b2c:	bf18      	it	ne
 8005b2e:	81a3      	strhne	r3, [r4, #12]
 8005b30:	bd10      	pop	{r4, pc}

08005b32 <__sclose>:
 8005b32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b36:	f000 b813 	b.w	8005b60 <_close_r>
	...

08005b3c <_write_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d07      	ldr	r5, [pc, #28]	; (8005b5c <_write_r+0x20>)
 8005b40:	4604      	mov	r4, r0
 8005b42:	4608      	mov	r0, r1
 8005b44:	4611      	mov	r1, r2
 8005b46:	2200      	movs	r2, #0
 8005b48:	602a      	str	r2, [r5, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f7fa fd42 	bl	80005d4 <_write>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_write_r+0x1e>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_write_r+0x1e>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	2000060c 	.word	0x2000060c

08005b60 <_close_r>:
 8005b60:	b538      	push	{r3, r4, r5, lr}
 8005b62:	4d06      	ldr	r5, [pc, #24]	; (8005b7c <_close_r+0x1c>)
 8005b64:	2300      	movs	r3, #0
 8005b66:	4604      	mov	r4, r0
 8005b68:	4608      	mov	r0, r1
 8005b6a:	602b      	str	r3, [r5, #0]
 8005b6c:	f7fa fd5a 	bl	8000624 <_close>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_close_r+0x1a>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_close_r+0x1a>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	2000060c 	.word	0x2000060c

08005b80 <_fstat_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	; (8005ba0 <_fstat_r+0x20>)
 8005b84:	2300      	movs	r3, #0
 8005b86:	4604      	mov	r4, r0
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	f7fa fd4c 	bl	800062a <_fstat>
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	d102      	bne.n	8005b9c <_fstat_r+0x1c>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	b103      	cbz	r3, 8005b9c <_fstat_r+0x1c>
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000060c 	.word	0x2000060c

08005ba4 <_isatty_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d06      	ldr	r5, [pc, #24]	; (8005bc0 <_isatty_r+0x1c>)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4604      	mov	r4, r0
 8005bac:	4608      	mov	r0, r1
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	f7fa fd40 	bl	8000634 <_isatty>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d102      	bne.n	8005bbe <_isatty_r+0x1a>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	b103      	cbz	r3, 8005bbe <_isatty_r+0x1a>
 8005bbc:	6023      	str	r3, [r4, #0]
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
 8005bc0:	2000060c 	.word	0x2000060c

08005bc4 <_lseek_r>:
 8005bc4:	b538      	push	{r3, r4, r5, lr}
 8005bc6:	4d07      	ldr	r5, [pc, #28]	; (8005be4 <_lseek_r+0x20>)
 8005bc8:	4604      	mov	r4, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	4611      	mov	r1, r2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	602a      	str	r2, [r5, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7fa fd30 	bl	8000638 <_lseek>
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d102      	bne.n	8005be2 <_lseek_r+0x1e>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	b103      	cbz	r3, 8005be2 <_lseek_r+0x1e>
 8005be0:	6023      	str	r3, [r4, #0]
 8005be2:	bd38      	pop	{r3, r4, r5, pc}
 8005be4:	2000060c 	.word	0x2000060c

08005be8 <__malloc_lock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__malloc_lock+0x8>)
 8005bea:	f7ff baf2 	b.w	80051d2 <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	20000600 	.word	0x20000600

08005bf4 <__malloc_unlock>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__malloc_unlock+0x8>)
 8005bf6:	f7ff baed 	b.w	80051d4 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	20000600 	.word	0x20000600

08005c00 <_read_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4d07      	ldr	r5, [pc, #28]	; (8005c20 <_read_r+0x20>)
 8005c04:	4604      	mov	r4, r0
 8005c06:	4608      	mov	r0, r1
 8005c08:	4611      	mov	r1, r2
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	602a      	str	r2, [r5, #0]
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f7fa fcd9 	bl	80005c6 <_read>
 8005c14:	1c43      	adds	r3, r0, #1
 8005c16:	d102      	bne.n	8005c1e <_read_r+0x1e>
 8005c18:	682b      	ldr	r3, [r5, #0]
 8005c1a:	b103      	cbz	r3, 8005c1e <_read_r+0x1e>
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	bd38      	pop	{r3, r4, r5, pc}
 8005c20:	2000060c 	.word	0x2000060c

08005c24 <lflush>:
 8005c24:	8983      	ldrh	r3, [r0, #12]
 8005c26:	f003 0309 	and.w	r3, r3, #9
 8005c2a:	2b09      	cmp	r3, #9
 8005c2c:	d101      	bne.n	8005c32 <lflush+0xe>
 8005c2e:	f7ff b96b 	b.w	8004f08 <fflush>
 8005c32:	2000      	movs	r0, #0
 8005c34:	4770      	bx	lr
	...

08005c38 <__srefill_r>:
 8005c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	b118      	cbz	r0, 8005c48 <__srefill_r+0x10>
 8005c40:	6983      	ldr	r3, [r0, #24]
 8005c42:	b90b      	cbnz	r3, 8005c48 <__srefill_r+0x10>
 8005c44:	f7ff f9ca 	bl	8004fdc <__sinit>
 8005c48:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <__srefill_r+0x100>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d10a      	bne.n	8005c64 <__srefill_r+0x2c>
 8005c4e:	686c      	ldr	r4, [r5, #4]
 8005c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c54:	2300      	movs	r3, #0
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	069e      	lsls	r6, r3, #26
 8005c5c:	d50c      	bpl.n	8005c78 <__srefill_r+0x40>
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c62:	e066      	b.n	8005d32 <__srefill_r+0xfa>
 8005c64:	4b35      	ldr	r3, [pc, #212]	; (8005d3c <__srefill_r+0x104>)
 8005c66:	429c      	cmp	r4, r3
 8005c68:	d101      	bne.n	8005c6e <__srefill_r+0x36>
 8005c6a:	68ac      	ldr	r4, [r5, #8]
 8005c6c:	e7f0      	b.n	8005c50 <__srefill_r+0x18>
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <__srefill_r+0x108>)
 8005c70:	429c      	cmp	r4, r3
 8005c72:	bf08      	it	eq
 8005c74:	68ec      	ldreq	r4, [r5, #12]
 8005c76:	e7eb      	b.n	8005c50 <__srefill_r+0x18>
 8005c78:	0758      	lsls	r0, r3, #29
 8005c7a:	d448      	bmi.n	8005d0e <__srefill_r+0xd6>
 8005c7c:	06d9      	lsls	r1, r3, #27
 8005c7e:	d405      	bmi.n	8005c8c <__srefill_r+0x54>
 8005c80:	2309      	movs	r3, #9
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c88:	81a3      	strh	r3, [r4, #12]
 8005c8a:	e7e8      	b.n	8005c5e <__srefill_r+0x26>
 8005c8c:	071a      	lsls	r2, r3, #28
 8005c8e:	d50b      	bpl.n	8005ca8 <__srefill_r+0x70>
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	f7ff f8fc 	bl	8004e90 <_fflush_r>
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d1e0      	bne.n	8005c5e <__srefill_r+0x26>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	60a0      	str	r0, [r4, #8]
 8005ca0:	f023 0308 	bic.w	r3, r3, #8
 8005ca4:	81a3      	strh	r3, [r4, #12]
 8005ca6:	61a0      	str	r0, [r4, #24]
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f043 0304 	orr.w	r3, r3, #4
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	6923      	ldr	r3, [r4, #16]
 8005cb2:	b91b      	cbnz	r3, 8005cbc <__srefill_r+0x84>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f7ff fab2 	bl	8005220 <__smakebuf_r>
 8005cbc:	89a6      	ldrh	r6, [r4, #12]
 8005cbe:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005cc2:	07b3      	lsls	r3, r6, #30
 8005cc4:	d00f      	beq.n	8005ce6 <__srefill_r+0xae>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <__srefill_r+0x10c>)
 8005ccc:	491e      	ldr	r1, [pc, #120]	; (8005d48 <__srefill_r+0x110>)
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	f006 0609 	and.w	r6, r6, #9
 8005cd4:	f7ff fa00 	bl	80050d8 <_fwalk>
 8005cd8:	2e09      	cmp	r6, #9
 8005cda:	81a7      	strh	r7, [r4, #12]
 8005cdc:	d103      	bne.n	8005ce6 <__srefill_r+0xae>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f7ff f84f 	bl	8004d84 <__sflush_r>
 8005ce6:	6922      	ldr	r2, [r4, #16]
 8005ce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	6a21      	ldr	r1, [r4, #32]
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	6060      	str	r0, [r4, #4]
 8005cf8:	dc1c      	bgt.n	8005d34 <__srefill_r+0xfc>
 8005cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cfe:	bf17      	itett	ne
 8005d00:	2200      	movne	r2, #0
 8005d02:	f043 0320 	orreq.w	r3, r3, #32
 8005d06:	6062      	strne	r2, [r4, #4]
 8005d08:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005d0c:	e7bc      	b.n	8005c88 <__srefill_r+0x50>
 8005d0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d10:	2900      	cmp	r1, #0
 8005d12:	d0cd      	beq.n	8005cb0 <__srefill_r+0x78>
 8005d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	d002      	beq.n	8005d22 <__srefill_r+0xea>
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f7ff fabf 	bl	80052a0 <_free_r>
 8005d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d24:	6063      	str	r3, [r4, #4]
 8005d26:	2000      	movs	r0, #0
 8005d28:	6360      	str	r0, [r4, #52]	; 0x34
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d0c0      	beq.n	8005cb0 <__srefill_r+0x78>
 8005d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d34:	2000      	movs	r0, #0
 8005d36:	e7fc      	b.n	8005d32 <__srefill_r+0xfa>
 8005d38:	080065d0 	.word	0x080065d0
 8005d3c:	080065f0 	.word	0x080065f0
 8005d40:	080065b0 	.word	0x080065b0
 8005d44:	080065ac 	.word	0x080065ac
 8005d48:	08005c25 	.word	0x08005c25

08005d4c <_init>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr

08005d58 <_fini>:
 8005d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5a:	bf00      	nop
 8005d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5e:	bc08      	pop	{r3}
 8005d60:	469e      	mov	lr, r3
 8005d62:	4770      	bx	lr
 8005d64:	0000      	movs	r0, r0
	...
